//*******************************************************************************************
// Description:    Netlist for LNTv1A's MBus Register File
//     Generated by genRF (Version 1.2) 06/18/2018 03:15:49
//*******************************************************************************************

//*******************************************************************************************
// MEMORY MAP
//*******************************************************************************************
// MBUS ADDR     || Register Name                         || Reset Value || Type || Comments 
//*******************************************************************************************
// 8'h00         || REGISTER 0x00 (  0)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h00 [    6] || WAKEUP_WHEN_DONE                      ||  1'h0       ||  W/R || 
// 8'h00 [    5] || MODE_CONTINUOUS                       ||  1'h0       ||  W/R || 
// 8'h00 [    4] || DBE_ENABLE                            ||  1'h0       ||  W/R || 
// 8'h00 [    3] || RESET_AFE                             ||  1'h1       ||  W/R || 
// 8'h00 [    2] || RESETN_DBE                            ||  1'h0       ||  W/R || 
// 8'h00 [    1] || LDC_ISOLATE                           ||  1'h1       ||  W/R || 
// 8'h00 [    0] || LDC_PG                                ||  1'h1       ||  W/R || 
//*******************************************************************************************
// 8'h01         || REGISTER 0x01 (  1)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h01 [14:12] || CTRL_CAPSIZE                          ||  3'h3       ||  W/R || 
// 8'h01 [11: 9] || CTRL_ICOMP                            ||  3'h3       ||  W/R || 
// 8'h01 [    8] || CTRL_VOFS_CANCEL                      ||  1'h1       ||  W/R || 
// 8'h01 [ 7: 4] || CTRL_IBIAS_VBIAS                      ||  4'h7       ||  W/R || 
// 8'h01 [ 3: 0] || CTRL_IBIAS_I                          ||  4'h8       ||  W/R || 
//*******************************************************************************************
// 8'h02         || REGISTER 0x02 (  2)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h02 [17:16] || CTRL_VREF_COMP_V                      ||  2'h3       ||  W/R || 
// 8'h02 [15: 9] || CTRLB_VREF_COMP_I                     ||  7'h67      ||  W/R || 
// 8'h02 [ 8: 7] || CTRL_VREF_PV_V                        ||  2'h2       ||  W/R || 
// 8'h02 [ 6: 0] || CTRLB_VREF_PV_I                       ||  7'h67      ||  W/R || 
//*******************************************************************************************
// 8'h03         || REGISTER 0x03 (  3)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h03 [23: 0] || TIME_COUNTING                         || 24'h000258  ||  W/R || 
//*******************************************************************************************
// 8'h04         || REGISTER 0x04 (  4)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h04 [23:12] || TIME_MONITOR_HOLD                     || 12'h000     ||  W/R || 
// 8'h04 [11: 0] || TIME_MONITORING                       || 12'h00A     ||  W/R || 
//*******************************************************************************************
// 8'h05         || REGISTER 0x05 (  5)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h05 [23:12] || THRESHOLD_HIGH                        || 12'h028     ||  W/R || 
// 8'h05 [11: 0] || THRESHOLD_LOW                         || 12'h014     ||  W/R || 
//*******************************************************************************************
// 8'h06         || REGISTER 0x06 (  6)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h06 [    0] || OBSEN_AFEOUT                          ||  1'h0       ||  W/R || 
//*******************************************************************************************
// 8'h07         || REGISTER 0x07 (  7)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h07 [ 1: 0] || OBSSEL_ABUF                           ||  2'h0       ||  W/R || 
//*******************************************************************************************
// 8'h08         || REGISTER 0x08 (  8)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h08 [    2] || OVSEL_IBIAS_VBIAS                     ||  1'h0       ||  W/R || 
// 8'h08 [    1] || OVSEL_VREF_COMP                       ||  1'h0       ||  W/R || 
// 8'h08 [    0] || OVSEL_VREF_PV                         ||  1'h0       ||  W/R || 
//*******************************************************************************************
// 8'h09         || REGISTER 0x09 (  9)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h09 [    1] || OVVAL_DIN                             ||  1'h0       ||  W/R || 
// 8'h09 [    0] || OVSEL_DIN                             ||  1'h0       ||  W/R || 
//*******************************************************************************************
// 8'h0A         || REGISTER 0x0A ( 10)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h0A [    1] || OVVAL_CLK                             ||  1'h0       ||  W/R || 
// 8'h0A [    0] || OVSEL_CLK                             ||  1'h0       ||  W/R || 
//*******************************************************************************************
// 8'h0B         || REGISTER 0x0B ( 11)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h0B [ 5: 1] || OVVAL_CONFIG                          ||  5'h00      ||  W/R || 
// 8'h0B [    0] || OVSEL_CONFIG                          ||  1'h0       ||  W/R || 
//*******************************************************************************************
// 8'h0C         || REGISTER 0x0C ( 12)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h0C [ 3: 1] || OVVAL_MONITOR_STATE                   ||  3'h0       ||  W/R || 
// 8'h0C [    0] || OVSEL_MONITOR_STATE                   ||  1'h0       ||  W/R || 
//*******************************************************************************************
// 8'h0D         || REGISTER 0x0D ( 13)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h0D [ 3: 1] || OVVAL_COUNTER_STATE                   ||  3'h0       ||  W/R || 
// 8'h0D [    0] || OVSEL_COUNTER_STATE                   ||  1'h0       ||  W/R || 
//*******************************************************************************************
// 8'h0E         || REGISTER 0x0E ( 14)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h0E [18:12] || OVVAL_CTRL_ICHARGE_MUL                ||  7'h00      ||  W/R || 
// 8'h0E [11: 9] || OVVAL_CTRLB_ICHARGE_DIV               ||  3'h0       ||  W/R || 
// 8'h0E [ 8: 2] || OVVAL_CTRL_ICHARGE_DIV                ||  7'h00      ||  W/R || 
// 8'h0E [    1] || OVVAL_CTRLB_ICHARGE_MUL_LOWLEAK       ||  1'h0       ||  W/R || 
// 8'h0E [    0] || OVVAL_CTRLB_ICHARGE_DIV_LOWLEAK       ||  1'h0       ||  W/R || 
//*******************************************************************************************
// 8'h0F         || REGISTER 0x0F ( 15)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h0F [    4] || OVSEL_CTRL_ICHARGE_MUL                ||  1'h0       ||  W/R || 
// 8'h0F [    3] || OVSEL_CTRLB_ICHARGE_DIV               ||  1'h0       ||  W/R || 
// 8'h0F [    2] || OVSEL_CTRL_ICHARGE_DIV                ||  1'h0       ||  W/R || 
// 8'h0F [    1] || OVSEL_CTRLB_ICHARGE_MUL_LOWLEAK       ||  1'h0       ||  W/R || 
// 8'h0F [    0] || OVSEL_CTRLB_ICHARGE_DIV_LOWLEAK       ||  1'h0       ||  W/R || 
//*******************************************************************************************
// 8'h10         || REGISTER 0x10 ( 16)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h10 [23: 0] || DOUT_LOWER                            || 24'h000000  ||   R  || 
//*******************************************************************************************
// 8'h11         || REGISTER 0x11 ( 17)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h11 [   23] || DOUT_OVERFLOW                         ||  1'h0       ||   R  || 
// 8'h11 [22: 0] || DOUT_UPPER                            || 23'h000000  ||   R  || 
//*******************************************************************************************
// 8'h12         || REGISTER 0x12 ( 18)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h12 [ 4: 0] || LDC_CONFIG                            ||  5'h00      ||   R  || 
//*******************************************************************************************
// 8'h13         || REGISTER 0x13 ( 19)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h13 [18:12] || CTRL_ICHARGE_MUL                      ||  7'h00      ||   R  || 
// 8'h13 [11: 9] || CTRLB_ICHARGE_DIV                     ||  3'h0       ||   R  || 
// 8'h13 [ 8: 2] || CTRL_ICHARGE_DIV                      ||  7'h00      ||   R  || 
// 8'h13 [    1] || CTRLB_ICHARGE_MUL_LOWLEAK             ||  1'h0       ||   R  || 
// 8'h13 [    0] || CTRLB_ICHARGE_DIV_LOWLEAK             ||  1'h0       ||   R  || 
//*******************************************************************************************
// 8'h14         || REGISTER 0x14 ( 20)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h14 [   12] || MONITOR_OVERFLOW                      ||  1'h0       ||   R  || 
// 8'h14 [11: 0] || MONITOR                               || 12'h000     ||   R  || 
//*******************************************************************************************
// 8'h15         || REGISTER 0x15 ( 21)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h15 [ 2: 0] || MONITOR_STATE                         ||  3'h0       ||   R  || 
//*******************************************************************************************
// 8'h16         || REGISTER 0x16 ( 22)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h16 [ 2: 0] || COUNTER_STATE                         ||  3'h0       ||   R  || 
//*******************************************************************************************
// 8'h17         || REGISTER 0x17 ( 23)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h17 [ 4: 1] || FDIV_CTRL_FREQ                        ||  4'h0       ||  W/R || 
// 8'h17 [    0] || FDIV_RESETN                           ||  1'h0       ||  W/R || 
//*******************************************************************************************
// 8'h18         || REGISTER 0x18 ( 24)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h19         || REGISTER 0x19 ( 25)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h1A         || REGISTER 0x1A ( 26)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h1B         || REGISTER 0x1B ( 27)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h1C         || REGISTER 0x1C ( 28)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h1D         || REGISTER 0x1D ( 29)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h1E         || REGISTER 0x1E ( 30)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h1F         || REGISTER 0x1F ( 31)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h20         || REGISTER 0x20 ( 32)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h20 [    4] || TMR_RESETB                            ||  1'h0       ||  W/R || 
// 8'h20 [    3] || TMR_EN_OSC                            ||  1'h0       ||  W/R || 
// 8'h20 [    2] || TMR_RESETB_DIV                        ||  1'h0       ||  W/R || 
// 8'h20 [    1] || TMR_RESETB_DCDC                       ||  1'h0       ||  W/R || 
// 8'h20 [    0] || TMR_EN_SELF_CLK                       ||  1'h0       ||  W/R || 
//*******************************************************************************************
// 8'h21         || REGISTER 0x21 ( 33)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h21 [   23] || TMR_SEL_CLK_DIV                       ||  1'h1       ||  W/R || 
// 8'h21 [   22] || TMR_SEL_CLK_OSC                       ||  1'h1       ||  W/R || 
// 8'h21 [   21] || TMR_SELF_EN                           ||  1'h1       ||  W/R || 
// 8'h21 [20:17] || TMR_IBIAS_REF                         ||  4'h4       ||  W/R || 
// 8'h21 [   16] || TMR_CASCODE_BOOST                     ||  1'h0       ||  W/R || 
// 8'h21 [15: 8] || TMR_SEL_CAP                           ||  8'h08      ||  W/R || 
// 8'h21 [ 7: 2] || TMR_SEL_DCAP                          ||  6'h04      ||  W/R || 
// 8'h21 [    1] || TMR_EN_TUNE1                          ||  1'h1       ||  W/R || 
// 8'h21 [    0] || TMR_EN_TUNE2                          ||  1'h1       ||  W/R || 
//*******************************************************************************************
// 8'h22         || REGISTER 0x22 ( 34)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h22 [23:21] || TMR_S                                 ||  3'h4       ||  W/R || 
// 8'h22 [20: 7] || TMR_DIFF_CON                          || 14'h3FFB    ||  W/R || 
// 8'h22 [    6] || TMR_POLY_CON                          ||  1'h1       ||  W/R || 
// 8'h22 [    5] || TMR_EN_TUNE1_RES                      ||  1'h1       ||  W/R || 
// 8'h22 [    4] || TMR_EN_TUNE2_RES                      ||  1'h1       ||  W/R || 
// 8'h22 [    3] || TMR_SAMPLE_EN                         ||  1'h1       ||  W/R || 
// 8'h22 [ 2: 0] || TMR_AFC                               ||  3'h4       ||  W/R || 
//*******************************************************************************************
// 8'h23         || REGISTER 0x23 ( 35)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h24         || REGISTER 0x24 ( 36)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h25         || REGISTER 0x25 ( 37)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h26         || REGISTER 0x26 ( 38)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h27         || REGISTER 0x27 ( 39)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h28         || REGISTER 0x28 ( 40)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h29         || REGISTER 0x29 ( 41)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h2A         || REGISTER 0x2A ( 42)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h2B         || REGISTER 0x2B ( 43)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h2C         || REGISTER 0x2C ( 44)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h2D         || REGISTER 0x2D ( 45)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h2E         || REGISTER 0x2E ( 46)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h2F         || REGISTER 0x2F ( 47)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h30         || REGISTER 0x30 ( 48)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h30 [    5] || WAKEUP_ON_PEND_REQ                    ||  1'h0       ||  W/R || 
// 8'h30 [    4] || MBUS_IGNORE_RX_FAIL                   ||  1'h1       ||  W/R || 
// 8'h30 [ 3: 2] || CLKGEN_DIV                            ||  2'h2       ||  W/R || 
// 8'h30 [ 1: 0] || CLKGEN_RING                           ||  2'h1       ||  W/R || 
//*******************************************************************************************
// 8'h31         || REGISTER 0x31 ( 49)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h31 [15: 8] || LDC_IRQ_SHORT_ADDR                    ||  8'h10      ||  W/R || 
// 8'h31 [ 7: 0] || LDC_IRQ_REG_ADDR                      ||  8'h00      ||  W/R || 
//*******************************************************************************************
// 8'h32         || REGISTER 0x32 ( 50)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h32 [15: 8] || LDC_IRQ_START_REG_ADDR                ||  8'h10      ||  W/R || CHANGE THIS for DOUT
// 8'h32 [ 7: 0] || LDC_IRQ_NUM_REG_1                     ||  8'h01      ||  W/R || 
//*******************************************************************************************
// 8'h33         || REGISTER 0x33 ( 51)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h34         || REGISTER 0x34 ( 52)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h35         || REGISTER 0x35 ( 53)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h36         || REGISTER 0x36 ( 54)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h37         || REGISTER 0x37 ( 55)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h38         || REGISTER 0x38 ( 56)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h39         || REGISTER 0x39 ( 57)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h3A         || REGISTER 0x3A ( 58)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h3B         || REGISTER 0x3B ( 59)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h3C         || REGISTER 0x3C ( 60)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h3D         || REGISTER 0x3D ( 61)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h3E         || REGISTER 0x3E ( 62)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h3F         || REGISTER 0x3F ( 63)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h40         || REGISTER 0x40 ( 64)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h40 [   23] || WUP_ENABLE                            ||  1'h0       ||  W/R || 
// 8'h40 [   22] || WUP_LC_IRQ_EN                         ||  1'h1       ||  W/R || 
// 8'h40 [   21] || WUP_AUTO_RESET                        ||  1'h1       ||  W/R || If 1, the wakeup timer is automatically reset to 0 when the system goes into sleep
// 8'h40 [   19] || WUP_ENABLE_CLK_SLP_OUT                ||  1'h0       ||  W/R || 
//*******************************************************************************************
// 8'h41         || REGISTER 0x41 ( 65)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h41 [ 7: 0] || WUP_THRESHOLD_EXT                     ||  8'h00      ||  W/R || Extended bits to provide 32-bit threshold
//*******************************************************************************************
// 8'h42         || REGISTER 0x42 ( 66)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h42 [23: 0] || WUP_THRESHOLD                         || 24'h2DC6C0  ||  W/R || 3000000 in decimal: 10 mins with 5kHz, 2.5 mins with 20kHz clock frequency
//*******************************************************************************************
// 8'h43         || REGISTER 0x43 ( 67)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h43 [ 7: 0] || WUP_CNT_VALUE_EXT                     ||  8'h00      ||   R  || 
//*******************************************************************************************
// 8'h44         || REGISTER 0x44 ( 68)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h44 [23: 0] || WUP_CNT_VALUE                         || 24'h000000  ||   R  || 
//*******************************************************************************************
// 8'h45         || REGISTER 0x45 ( 69)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h45 [23: 0] || WUP_IRQ_PAYLOAD                       || 24'h025001  ||  W/R || 
//*******************************************************************************************
// 8'h46         || REGISTER 0x46 ( 70)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h46 [15: 8] || WUP_IRQ_SHORT_ADDR                    ||  8'h10      ||  W/R || 
// 8'h46 [ 7: 0] || WUP_IRQ_REG_ADDR                      ||  8'h00      ||  W/R || 
//*******************************************************************************************
// 8'h47         || REGISTER 0x47 ( 71)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h47 [15: 8] || WUP_IRQ_START_REG_ADDR                ||  8'h35      ||  W/R || 
// 8'h47 [ 7: 0] || WUP_IRQ_NUM_REG_1                     ||  8'h00      ||  W/R || 
//*******************************************************************************************

module lntv1a_rf (
   //Input
    input         RESETn,
    input         ISOLATE,
    input [ 71:0] ADDR_IN,
    input [ 23:0] DATA_IN,
   //Output
    //Register 0x00 (  0)
    output        WAKEUP_WHEN_DONE,
    output        MODE_CONTINUOUS,
    output        MODE_CONTINUOUS_B, // Inverted Signal of MODE_CONTINUOUS
    output        DBE_ENABLE,
    output        DBE_ENABLE_B, // Inverted Signal of DBE_ENABLE
    output        RESET_AFE,
    output        RESET_AFE_B, // Inverted Signal of RESET_AFE
    output        RESETN_DBE,
    output        RESETN_DBE_B, // Inverted Signal of RESETN_DBE
    output        LDC_ISOLATE,
    output        LDC_ISOLATE_B, // Inverted Signal of LDC_ISOLATE
    output        LDC_PG,
    output        LDC_PG_B, // Inverted Signal of LDC_PG
    //Register 0x01 (  1)
    output [ 2:0] CTRL_CAPSIZE,
    output [ 2:0] CTRL_CAPSIZE_B, // Inverted Signal of CTRL_CAPSIZE
    output [ 2:0] CTRL_ICOMP,
    output [ 2:0] CTRL_ICOMP_B, // Inverted Signal of CTRL_ICOMP
    output        CTRL_VOFS_CANCEL,
    output        CTRL_VOFS_CANCEL_B, // Inverted Signal of CTRL_VOFS_CANCEL
    output [ 3:0] CTRL_IBIAS_VBIAS,
    output [ 3:0] CTRL_IBIAS_VBIAS_B, // Inverted Signal of CTRL_IBIAS_VBIAS
    output [ 3:0] CTRL_IBIAS_I,
    output [ 3:0] CTRL_IBIAS_I_B, // Inverted Signal of CTRL_IBIAS_I
    //Register 0x02 (  2)
    output [ 1:0] CTRL_VREF_COMP_V,
    output [ 1:0] CTRL_VREF_COMP_V_B, // Inverted Signal of CTRL_VREF_COMP_V
    output [ 6:0] CTRLB_VREF_COMP_I,
    output [ 6:0] CTRLB_VREF_COMP_I_B, // Inverted Signal of CTRLB_VREF_COMP_I
    output [ 1:0] CTRL_VREF_PV_V,
    output [ 1:0] CTRL_VREF_PV_V_B, // Inverted Signal of CTRL_VREF_PV_V
    output [ 6:0] CTRLB_VREF_PV_I,
    output [ 6:0] CTRLB_VREF_PV_I_B, // Inverted Signal of CTRLB_VREF_PV_I
    //Register 0x03 (  3)
    output [23:0] TIME_COUNTING,
    output [23:0] TIME_COUNTING_B, // Inverted Signal of TIME_COUNTING
    //Register 0x04 (  4)
    output [11:0] TIME_MONITOR_HOLD,
    output [11:0] TIME_MONITOR_HOLD_B, // Inverted Signal of TIME_MONITOR_HOLD
    output [11:0] TIME_MONITORING,
    output [11:0] TIME_MONITORING_B, // Inverted Signal of TIME_MONITORING
    //Register 0x05 (  5)
    output [11:0] THRESHOLD_HIGH,
    output [11:0] THRESHOLD_HIGH_B, // Inverted Signal of THRESHOLD_HIGH
    output [11:0] THRESHOLD_LOW,
    output [11:0] THRESHOLD_LOW_B, // Inverted Signal of THRESHOLD_LOW
    //Register 0x06 (  6)
    output        OBSEN_AFEOUT,
    output        OBSEN_AFEOUT_B, // Inverted Signal of OBSEN_AFEOUT
    //Register 0x07 (  7)
    output [ 1:0] OBSSEL_ABUF,
    output [ 1:0] OBSSEL_ABUF_B, // Inverted Signal of OBSSEL_ABUF
    //Register 0x08 (  8)
    output        OVSEL_IBIAS_VBIAS,
    output        OVSEL_IBIAS_VBIAS_B, // Inverted Signal of OVSEL_IBIAS_VBIAS
    output        OVSEL_VREF_COMP,
    output        OVSEL_VREF_COMP_B, // Inverted Signal of OVSEL_VREF_COMP
    output        OVSEL_VREF_PV,
    output        OVSEL_VREF_PV_B, // Inverted Signal of OVSEL_VREF_PV
    //Register 0x09 (  9)
    output        OVVAL_DIN,
    output        OVVAL_DIN_B, // Inverted Signal of OVVAL_DIN
    output        OVSEL_DIN,
    output        OVSEL_DIN_B, // Inverted Signal of OVSEL_DIN
    //Register 0x0A ( 10)
    output        OVVAL_CLK,
    output        OVVAL_CLK_B, // Inverted Signal of OVVAL_CLK
    output        OVSEL_CLK,
    output        OVSEL_CLK_B, // Inverted Signal of OVSEL_CLK
    //Register 0x0B ( 11)
    output [ 4:0] OVVAL_CONFIG,
    output [ 4:0] OVVAL_CONFIG_B, // Inverted Signal of OVVAL_CONFIG
    output        OVSEL_CONFIG,
    output        OVSEL_CONFIG_B, // Inverted Signal of OVSEL_CONFIG
    //Register 0x0C ( 12)
    output [ 2:0] OVVAL_MONITOR_STATE,
    output [ 2:0] OVVAL_MONITOR_STATE_B, // Inverted Signal of OVVAL_MONITOR_STATE
    output        OVSEL_MONITOR_STATE,
    output        OVSEL_MONITOR_STATE_B, // Inverted Signal of OVSEL_MONITOR_STATE
    //Register 0x0D ( 13)
    output [ 2:0] OVVAL_COUNTER_STATE,
    output [ 2:0] OVVAL_COUNTER_STATE_B, // Inverted Signal of OVVAL_COUNTER_STATE
    output        OVSEL_COUNTER_STATE,
    output        OVSEL_COUNTER_STATE_B, // Inverted Signal of OVSEL_COUNTER_STATE
    //Register 0x0E ( 14)
    output [ 6:0] OVVAL_CTRL_ICHARGE_MUL,
    output [ 6:0] OVVAL_CTRL_ICHARGE_MUL_B, // Inverted Signal of OVVAL_CTRL_ICHARGE_MUL
    output [ 2:0] OVVAL_CTRLB_ICHARGE_DIV,
    output [ 2:0] OVVAL_CTRLB_ICHARGE_DIV_B, // Inverted Signal of OVVAL_CTRLB_ICHARGE_DIV
    output [ 6:0] OVVAL_CTRL_ICHARGE_DIV,
    output [ 6:0] OVVAL_CTRL_ICHARGE_DIV_B, // Inverted Signal of OVVAL_CTRL_ICHARGE_DIV
    output        OVVAL_CTRLB_ICHARGE_MUL_LOWLEAK,
    output        OVVAL_CTRLB_ICHARGE_MUL_LOWLEAK_B, // Inverted Signal of OVVAL_CTRLB_ICHARGE_MUL_LOWLEAK
    output        OVVAL_CTRLB_ICHARGE_DIV_LOWLEAK,
    output        OVVAL_CTRLB_ICHARGE_DIV_LOWLEAK_B, // Inverted Signal of OVVAL_CTRLB_ICHARGE_DIV_LOWLEAK
    //Register 0x0F ( 15)
    output        OVSEL_CTRL_ICHARGE_MUL,
    output        OVSEL_CTRL_ICHARGE_MUL_B, // Inverted Signal of OVSEL_CTRL_ICHARGE_MUL
    output        OVSEL_CTRLB_ICHARGE_DIV,
    output        OVSEL_CTRLB_ICHARGE_DIV_B, // Inverted Signal of OVSEL_CTRLB_ICHARGE_DIV
    output        OVSEL_CTRL_ICHARGE_DIV,
    output        OVSEL_CTRL_ICHARGE_DIV_B, // Inverted Signal of OVSEL_CTRL_ICHARGE_DIV
    output        OVSEL_CTRLB_ICHARGE_MUL_LOWLEAK,
    output        OVSEL_CTRLB_ICHARGE_MUL_LOWLEAK_B, // Inverted Signal of OVSEL_CTRLB_ICHARGE_MUL_LOWLEAK
    output        OVSEL_CTRLB_ICHARGE_DIV_LOWLEAK,
    output        OVSEL_CTRLB_ICHARGE_DIV_LOWLEAK_B, // Inverted Signal of OVSEL_CTRLB_ICHARGE_DIV_LOWLEAK
    //Register 0x10 ( 16)
    //output [23:0] DOUT_LOWER, // READ-ONLY
    //Register 0x11 ( 17)
    //output        DOUT_OVERFLOW, // READ-ONLY
    //output [22:0] DOUT_UPPER, // READ-ONLY
    //Register 0x12 ( 18)
    //output [ 4:0] LDC_CONFIG, // READ-ONLY
    //Register 0x13 ( 19)
    //output [ 6:0] CTRL_ICHARGE_MUL, // READ-ONLY
    //output [ 2:0] CTRLB_ICHARGE_DIV, // READ-ONLY
    //output [ 6:0] CTRL_ICHARGE_DIV, // READ-ONLY
    //output        CTRLB_ICHARGE_MUL_LOWLEAK, // READ-ONLY
    //output        CTRLB_ICHARGE_DIV_LOWLEAK, // READ-ONLY
    //Register 0x14 ( 20)
    //output        MONITOR_OVERFLOW, // READ-ONLY
    //output [11:0] MONITOR, // READ-ONLY
    //Register 0x15 ( 21)
    //output [ 2:0] MONITOR_STATE, // READ-ONLY
    //Register 0x16 ( 22)
    //output [ 2:0] COUNTER_STATE, // READ-ONLY
    //Register 0x17 ( 23)
    output [ 3:0] FDIV_CTRL_FREQ,
    output        FDIV_RESETN,
    //Register 0x20 ( 32)
    output        TMR_RESETB,
    output        TMR_EN_OSC,
    output        TMR_RESETB_DIV,
    output        TMR_RESETB_DCDC,
    output        TMR_EN_SELF_CLK,
    //Register 0x21 ( 33)
    output        TMR_SEL_CLK_DIV,
    output        TMR_SEL_CLK_OSC,
    output        TMR_SELF_EN,
    output [ 3:0] TMR_IBIAS_REF,
    output        TMR_CASCODE_BOOST,
    output [ 7:0] TMR_SEL_CAP,
    output [ 5:0] TMR_SEL_DCAP,
    output        TMR_EN_TUNE1,
    output        TMR_EN_TUNE2,
    //Register 0x22 ( 34)
    output [ 2:0] TMR_S,
    output [13:0] TMR_DIFF_CON,
    output        TMR_POLY_CON,
    output        TMR_EN_TUNE1_RES,
    output        TMR_EN_TUNE2_RES,
    output        TMR_SAMPLE_EN,
    output [ 2:0] TMR_AFC,
    //Register 0x30 ( 48)
    output        WAKEUP_ON_PEND_REQ,
    output        MBUS_IGNORE_RX_FAIL,
    output [ 1:0] CLKGEN_DIV,
    output [ 1:0] CLKGEN_RING,
    //Register 0x31 ( 49)
    output [ 7:0] LDC_IRQ_SHORT_ADDR,
    output [ 7:0] LDC_IRQ_REG_ADDR,
    //Register 0x32 ( 50)
    output [ 7:0] LDC_IRQ_START_REG_ADDR,
    output [ 7:0] LDC_IRQ_NUM_REG_1,
    //Register 0x40 ( 64)
    output        WUP_ENABLE,
    output        WUP_LC_IRQ_EN,
    output        WUP_AUTO_RESET,
    output        WUP_ENABLE_CLK_SLP_OUT,
    //Register 0x41 ( 65)
    output [ 7:0] WUP_THRESHOLD_EXT,
    //Register 0x42 ( 66)
    output [23:0] WUP_THRESHOLD,
    //Register 0x43 ( 67)
    //output [ 7:0] WUP_CNT_VALUE_EXT, // READ-ONLY
    //Register 0x44 ( 68)
    //output [23:0] WUP_CNT_VALUE, // READ-ONLY
    //Register 0x45 ( 69)
    output [23:0] WUP_IRQ_PAYLOAD,
    //Register 0x46 ( 70)
    output [ 7:0] WUP_IRQ_SHORT_ADDR,
    output [ 7:0] WUP_IRQ_REG_ADDR,
    //Register 0x47 ( 71)
    output [ 7:0] WUP_IRQ_START_REG_ADDR,
    output [ 7:0] WUP_IRQ_NUM_REG_1
   );

   //Internal Wires
    wire         isolate_n;
    wire [ 71:0] addr_in_iso;
    wire [ 71:0] addr_in_iso_buf;
    wire [ 23:0] data_in_iso;
    wire [ 23:0] data_in_iso_buf;

   //****************************************************
   // ISOLATE                                            
   //****************************************************
    INVX4HVT ISOLATE_INV_0 (.A(ISOLATE), .Y(isolate_n));

    AND2X1HVT ADDR_IN_AND_071 (.A(isolate_n), .B(ADDR_IN[ 71]), .Y(addr_in_iso[ 71]));
    AND2X1HVT ADDR_IN_AND_070 (.A(isolate_n), .B(ADDR_IN[ 70]), .Y(addr_in_iso[ 70]));
    AND2X1HVT ADDR_IN_AND_069 (.A(isolate_n), .B(ADDR_IN[ 69]), .Y(addr_in_iso[ 69]));
    //AND2X1HVT ADDR_IN_AND_068 (.A(isolate_n), .B(ADDR_IN[ 68]), .Y(addr_in_iso[ 68]));
    //AND2X1HVT ADDR_IN_AND_067 (.A(isolate_n), .B(ADDR_IN[ 67]), .Y(addr_in_iso[ 67]));
    AND2X1HVT ADDR_IN_AND_066 (.A(isolate_n), .B(ADDR_IN[ 66]), .Y(addr_in_iso[ 66]));
    AND2X1HVT ADDR_IN_AND_065 (.A(isolate_n), .B(ADDR_IN[ 65]), .Y(addr_in_iso[ 65]));
    AND2X1HVT ADDR_IN_AND_064 (.A(isolate_n), .B(ADDR_IN[ 64]), .Y(addr_in_iso[ 64]));
    //AND2X1HVT ADDR_IN_AND_063 (.A(isolate_n), .B(ADDR_IN[ 63]), .Y(addr_in_iso[ 63]));
    //AND2X1HVT ADDR_IN_AND_062 (.A(isolate_n), .B(ADDR_IN[ 62]), .Y(addr_in_iso[ 62]));
    //AND2X1HVT ADDR_IN_AND_061 (.A(isolate_n), .B(ADDR_IN[ 61]), .Y(addr_in_iso[ 61]));
    //AND2X1HVT ADDR_IN_AND_060 (.A(isolate_n), .B(ADDR_IN[ 60]), .Y(addr_in_iso[ 60]));
    //AND2X1HVT ADDR_IN_AND_059 (.A(isolate_n), .B(ADDR_IN[ 59]), .Y(addr_in_iso[ 59]));
    //AND2X1HVT ADDR_IN_AND_058 (.A(isolate_n), .B(ADDR_IN[ 58]), .Y(addr_in_iso[ 58]));
    //AND2X1HVT ADDR_IN_AND_057 (.A(isolate_n), .B(ADDR_IN[ 57]), .Y(addr_in_iso[ 57]));
    //AND2X1HVT ADDR_IN_AND_056 (.A(isolate_n), .B(ADDR_IN[ 56]), .Y(addr_in_iso[ 56]));
    //AND2X1HVT ADDR_IN_AND_055 (.A(isolate_n), .B(ADDR_IN[ 55]), .Y(addr_in_iso[ 55]));
    //AND2X1HVT ADDR_IN_AND_054 (.A(isolate_n), .B(ADDR_IN[ 54]), .Y(addr_in_iso[ 54]));
    //AND2X1HVT ADDR_IN_AND_053 (.A(isolate_n), .B(ADDR_IN[ 53]), .Y(addr_in_iso[ 53]));
    //AND2X1HVT ADDR_IN_AND_052 (.A(isolate_n), .B(ADDR_IN[ 52]), .Y(addr_in_iso[ 52]));
    //AND2X1HVT ADDR_IN_AND_051 (.A(isolate_n), .B(ADDR_IN[ 51]), .Y(addr_in_iso[ 51]));
    AND2X1HVT ADDR_IN_AND_050 (.A(isolate_n), .B(ADDR_IN[ 50]), .Y(addr_in_iso[ 50]));
    AND2X1HVT ADDR_IN_AND_049 (.A(isolate_n), .B(ADDR_IN[ 49]), .Y(addr_in_iso[ 49]));
    AND2X1HVT ADDR_IN_AND_048 (.A(isolate_n), .B(ADDR_IN[ 48]), .Y(addr_in_iso[ 48]));
    //AND2X1HVT ADDR_IN_AND_047 (.A(isolate_n), .B(ADDR_IN[ 47]), .Y(addr_in_iso[ 47]));
    //AND2X1HVT ADDR_IN_AND_046 (.A(isolate_n), .B(ADDR_IN[ 46]), .Y(addr_in_iso[ 46]));
    //AND2X1HVT ADDR_IN_AND_045 (.A(isolate_n), .B(ADDR_IN[ 45]), .Y(addr_in_iso[ 45]));
    //AND2X1HVT ADDR_IN_AND_044 (.A(isolate_n), .B(ADDR_IN[ 44]), .Y(addr_in_iso[ 44]));
    //AND2X1HVT ADDR_IN_AND_043 (.A(isolate_n), .B(ADDR_IN[ 43]), .Y(addr_in_iso[ 43]));
    //AND2X1HVT ADDR_IN_AND_042 (.A(isolate_n), .B(ADDR_IN[ 42]), .Y(addr_in_iso[ 42]));
    //AND2X1HVT ADDR_IN_AND_041 (.A(isolate_n), .B(ADDR_IN[ 41]), .Y(addr_in_iso[ 41]));
    //AND2X1HVT ADDR_IN_AND_040 (.A(isolate_n), .B(ADDR_IN[ 40]), .Y(addr_in_iso[ 40]));
    //AND2X1HVT ADDR_IN_AND_039 (.A(isolate_n), .B(ADDR_IN[ 39]), .Y(addr_in_iso[ 39]));
    //AND2X1HVT ADDR_IN_AND_038 (.A(isolate_n), .B(ADDR_IN[ 38]), .Y(addr_in_iso[ 38]));
    //AND2X1HVT ADDR_IN_AND_037 (.A(isolate_n), .B(ADDR_IN[ 37]), .Y(addr_in_iso[ 37]));
    //AND2X1HVT ADDR_IN_AND_036 (.A(isolate_n), .B(ADDR_IN[ 36]), .Y(addr_in_iso[ 36]));
    //AND2X1HVT ADDR_IN_AND_035 (.A(isolate_n), .B(ADDR_IN[ 35]), .Y(addr_in_iso[ 35]));
    AND2X1HVT ADDR_IN_AND_034 (.A(isolate_n), .B(ADDR_IN[ 34]), .Y(addr_in_iso[ 34]));
    AND2X1HVT ADDR_IN_AND_033 (.A(isolate_n), .B(ADDR_IN[ 33]), .Y(addr_in_iso[ 33]));
    AND2X1HVT ADDR_IN_AND_032 (.A(isolate_n), .B(ADDR_IN[ 32]), .Y(addr_in_iso[ 32]));
    //AND2X1HVT ADDR_IN_AND_031 (.A(isolate_n), .B(ADDR_IN[ 31]), .Y(addr_in_iso[ 31]));
    //AND2X1HVT ADDR_IN_AND_030 (.A(isolate_n), .B(ADDR_IN[ 30]), .Y(addr_in_iso[ 30]));
    //AND2X1HVT ADDR_IN_AND_029 (.A(isolate_n), .B(ADDR_IN[ 29]), .Y(addr_in_iso[ 29]));
    //AND2X1HVT ADDR_IN_AND_028 (.A(isolate_n), .B(ADDR_IN[ 28]), .Y(addr_in_iso[ 28]));
    //AND2X1HVT ADDR_IN_AND_027 (.A(isolate_n), .B(ADDR_IN[ 27]), .Y(addr_in_iso[ 27]));
    //AND2X1HVT ADDR_IN_AND_026 (.A(isolate_n), .B(ADDR_IN[ 26]), .Y(addr_in_iso[ 26]));
    //AND2X1HVT ADDR_IN_AND_025 (.A(isolate_n), .B(ADDR_IN[ 25]), .Y(addr_in_iso[ 25]));
    //AND2X1HVT ADDR_IN_AND_024 (.A(isolate_n), .B(ADDR_IN[ 24]), .Y(addr_in_iso[ 24]));
    AND2X1HVT ADDR_IN_AND_023 (.A(isolate_n), .B(ADDR_IN[ 23]), .Y(addr_in_iso[ 23]));
    //AND2X1HVT ADDR_IN_AND_022 (.A(isolate_n), .B(ADDR_IN[ 22]), .Y(addr_in_iso[ 22]));
    //AND2X1HVT ADDR_IN_AND_021 (.A(isolate_n), .B(ADDR_IN[ 21]), .Y(addr_in_iso[ 21]));
    //AND2X1HVT ADDR_IN_AND_020 (.A(isolate_n), .B(ADDR_IN[ 20]), .Y(addr_in_iso[ 20]));
    //AND2X1HVT ADDR_IN_AND_019 (.A(isolate_n), .B(ADDR_IN[ 19]), .Y(addr_in_iso[ 19]));
    //AND2X1HVT ADDR_IN_AND_018 (.A(isolate_n), .B(ADDR_IN[ 18]), .Y(addr_in_iso[ 18]));
    //AND2X1HVT ADDR_IN_AND_017 (.A(isolate_n), .B(ADDR_IN[ 17]), .Y(addr_in_iso[ 17]));
    //AND2X1HVT ADDR_IN_AND_016 (.A(isolate_n), .B(ADDR_IN[ 16]), .Y(addr_in_iso[ 16]));
    AND2X1HVT ADDR_IN_AND_015 (.A(isolate_n), .B(ADDR_IN[ 15]), .Y(addr_in_iso[ 15]));
    AND2X1HVT ADDR_IN_AND_014 (.A(isolate_n), .B(ADDR_IN[ 14]), .Y(addr_in_iso[ 14]));
    AND2X1HVT ADDR_IN_AND_013 (.A(isolate_n), .B(ADDR_IN[ 13]), .Y(addr_in_iso[ 13]));
    AND2X1HVT ADDR_IN_AND_012 (.A(isolate_n), .B(ADDR_IN[ 12]), .Y(addr_in_iso[ 12]));
    AND2X1HVT ADDR_IN_AND_011 (.A(isolate_n), .B(ADDR_IN[ 11]), .Y(addr_in_iso[ 11]));
    AND2X1HVT ADDR_IN_AND_010 (.A(isolate_n), .B(ADDR_IN[ 10]), .Y(addr_in_iso[ 10]));
    AND2X1HVT ADDR_IN_AND_009 (.A(isolate_n), .B(ADDR_IN[  9]), .Y(addr_in_iso[  9]));
    AND2X1HVT ADDR_IN_AND_008 (.A(isolate_n), .B(ADDR_IN[  8]), .Y(addr_in_iso[  8]));
    AND2X1HVT ADDR_IN_AND_007 (.A(isolate_n), .B(ADDR_IN[  7]), .Y(addr_in_iso[  7]));
    AND2X1HVT ADDR_IN_AND_006 (.A(isolate_n), .B(ADDR_IN[  6]), .Y(addr_in_iso[  6]));
    AND2X1HVT ADDR_IN_AND_005 (.A(isolate_n), .B(ADDR_IN[  5]), .Y(addr_in_iso[  5]));
    AND2X1HVT ADDR_IN_AND_004 (.A(isolate_n), .B(ADDR_IN[  4]), .Y(addr_in_iso[  4]));
    AND2X1HVT ADDR_IN_AND_003 (.A(isolate_n), .B(ADDR_IN[  3]), .Y(addr_in_iso[  3]));
    AND2X1HVT ADDR_IN_AND_002 (.A(isolate_n), .B(ADDR_IN[  2]), .Y(addr_in_iso[  2]));
    AND2X1HVT ADDR_IN_AND_001 (.A(isolate_n), .B(ADDR_IN[  1]), .Y(addr_in_iso[  1]));
    AND2X1HVT ADDR_IN_AND_000 (.A(isolate_n), .B(ADDR_IN[  0]), .Y(addr_in_iso[  0]));

    AND2X1HVT DATA_IN_AND_23 (.A(isolate_n), .B(DATA_IN[23]), .Y(data_in_iso[23]));
    AND2X1HVT DATA_IN_AND_22 (.A(isolate_n), .B(DATA_IN[22]), .Y(data_in_iso[22]));
    AND2X1HVT DATA_IN_AND_21 (.A(isolate_n), .B(DATA_IN[21]), .Y(data_in_iso[21]));
    AND2X1HVT DATA_IN_AND_20 (.A(isolate_n), .B(DATA_IN[20]), .Y(data_in_iso[20]));
    AND2X1HVT DATA_IN_AND_19 (.A(isolate_n), .B(DATA_IN[19]), .Y(data_in_iso[19]));
    AND2X1HVT DATA_IN_AND_18 (.A(isolate_n), .B(DATA_IN[18]), .Y(data_in_iso[18]));
    AND2X1HVT DATA_IN_AND_17 (.A(isolate_n), .B(DATA_IN[17]), .Y(data_in_iso[17]));
    AND2X1HVT DATA_IN_AND_16 (.A(isolate_n), .B(DATA_IN[16]), .Y(data_in_iso[16]));
    AND2X1HVT DATA_IN_AND_15 (.A(isolate_n), .B(DATA_IN[15]), .Y(data_in_iso[15]));
    AND2X1HVT DATA_IN_AND_14 (.A(isolate_n), .B(DATA_IN[14]), .Y(data_in_iso[14]));
    AND2X1HVT DATA_IN_AND_13 (.A(isolate_n), .B(DATA_IN[13]), .Y(data_in_iso[13]));
    AND2X1HVT DATA_IN_AND_12 (.A(isolate_n), .B(DATA_IN[12]), .Y(data_in_iso[12]));
    AND2X1HVT DATA_IN_AND_11 (.A(isolate_n), .B(DATA_IN[11]), .Y(data_in_iso[11]));
    AND2X1HVT DATA_IN_AND_10 (.A(isolate_n), .B(DATA_IN[10]), .Y(data_in_iso[10]));
    AND2X1HVT DATA_IN_AND_09 (.A(isolate_n), .B(DATA_IN[ 9]), .Y(data_in_iso[ 9]));
    AND2X1HVT DATA_IN_AND_08 (.A(isolate_n), .B(DATA_IN[ 8]), .Y(data_in_iso[ 8]));
    AND2X1HVT DATA_IN_AND_07 (.A(isolate_n), .B(DATA_IN[ 7]), .Y(data_in_iso[ 7]));
    AND2X1HVT DATA_IN_AND_06 (.A(isolate_n), .B(DATA_IN[ 6]), .Y(data_in_iso[ 6]));
    AND2X1HVT DATA_IN_AND_05 (.A(isolate_n), .B(DATA_IN[ 5]), .Y(data_in_iso[ 5]));
    AND2X1HVT DATA_IN_AND_04 (.A(isolate_n), .B(DATA_IN[ 4]), .Y(data_in_iso[ 4]));
    AND2X1HVT DATA_IN_AND_03 (.A(isolate_n), .B(DATA_IN[ 3]), .Y(data_in_iso[ 3]));
    AND2X1HVT DATA_IN_AND_02 (.A(isolate_n), .B(DATA_IN[ 2]), .Y(data_in_iso[ 2]));
    AND2X1HVT DATA_IN_AND_01 (.A(isolate_n), .B(DATA_IN[ 1]), .Y(data_in_iso[ 1]));
    AND2X1HVT DATA_IN_AND_00 (.A(isolate_n), .B(DATA_IN[ 0]), .Y(data_in_iso[ 0]));

    BUFX4HVT BUF_ADDR_IN_071 (.A(addr_in_iso[ 71]), .Y(addr_in_iso_buf[ 71]));
    BUFX4HVT BUF_ADDR_IN_070 (.A(addr_in_iso[ 70]), .Y(addr_in_iso_buf[ 70]));
    BUFX4HVT BUF_ADDR_IN_069 (.A(addr_in_iso[ 69]), .Y(addr_in_iso_buf[ 69]));
    //BUFX4HVT BUF_ADDR_IN_068 (.A(addr_in_iso[ 68]), .Y(addr_in_iso_buf[ 68]));
    //BUFX4HVT BUF_ADDR_IN_067 (.A(addr_in_iso[ 67]), .Y(addr_in_iso_buf[ 67]));
    BUFX4HVT BUF_ADDR_IN_066 (.A(addr_in_iso[ 66]), .Y(addr_in_iso_buf[ 66]));
    BUFX4HVT BUF_ADDR_IN_065 (.A(addr_in_iso[ 65]), .Y(addr_in_iso_buf[ 65]));
    BUFX4HVT BUF_ADDR_IN_064 (.A(addr_in_iso[ 64]), .Y(addr_in_iso_buf[ 64]));
    //BUFX4HVT BUF_ADDR_IN_063 (.A(addr_in_iso[ 63]), .Y(addr_in_iso_buf[ 63]));
    //BUFX4HVT BUF_ADDR_IN_062 (.A(addr_in_iso[ 62]), .Y(addr_in_iso_buf[ 62]));
    //BUFX4HVT BUF_ADDR_IN_061 (.A(addr_in_iso[ 61]), .Y(addr_in_iso_buf[ 61]));
    //BUFX4HVT BUF_ADDR_IN_060 (.A(addr_in_iso[ 60]), .Y(addr_in_iso_buf[ 60]));
    //BUFX4HVT BUF_ADDR_IN_059 (.A(addr_in_iso[ 59]), .Y(addr_in_iso_buf[ 59]));
    //BUFX4HVT BUF_ADDR_IN_058 (.A(addr_in_iso[ 58]), .Y(addr_in_iso_buf[ 58]));
    //BUFX4HVT BUF_ADDR_IN_057 (.A(addr_in_iso[ 57]), .Y(addr_in_iso_buf[ 57]));
    //BUFX4HVT BUF_ADDR_IN_056 (.A(addr_in_iso[ 56]), .Y(addr_in_iso_buf[ 56]));
    //BUFX4HVT BUF_ADDR_IN_055 (.A(addr_in_iso[ 55]), .Y(addr_in_iso_buf[ 55]));
    //BUFX4HVT BUF_ADDR_IN_054 (.A(addr_in_iso[ 54]), .Y(addr_in_iso_buf[ 54]));
    //BUFX4HVT BUF_ADDR_IN_053 (.A(addr_in_iso[ 53]), .Y(addr_in_iso_buf[ 53]));
    //BUFX4HVT BUF_ADDR_IN_052 (.A(addr_in_iso[ 52]), .Y(addr_in_iso_buf[ 52]));
    //BUFX4HVT BUF_ADDR_IN_051 (.A(addr_in_iso[ 51]), .Y(addr_in_iso_buf[ 51]));
    BUFX4HVT BUF_ADDR_IN_050 (.A(addr_in_iso[ 50]), .Y(addr_in_iso_buf[ 50]));
    BUFX4HVT BUF_ADDR_IN_049 (.A(addr_in_iso[ 49]), .Y(addr_in_iso_buf[ 49]));
    BUFX4HVT BUF_ADDR_IN_048 (.A(addr_in_iso[ 48]), .Y(addr_in_iso_buf[ 48]));
    //BUFX4HVT BUF_ADDR_IN_047 (.A(addr_in_iso[ 47]), .Y(addr_in_iso_buf[ 47]));
    //BUFX4HVT BUF_ADDR_IN_046 (.A(addr_in_iso[ 46]), .Y(addr_in_iso_buf[ 46]));
    //BUFX4HVT BUF_ADDR_IN_045 (.A(addr_in_iso[ 45]), .Y(addr_in_iso_buf[ 45]));
    //BUFX4HVT BUF_ADDR_IN_044 (.A(addr_in_iso[ 44]), .Y(addr_in_iso_buf[ 44]));
    //BUFX4HVT BUF_ADDR_IN_043 (.A(addr_in_iso[ 43]), .Y(addr_in_iso_buf[ 43]));
    //BUFX4HVT BUF_ADDR_IN_042 (.A(addr_in_iso[ 42]), .Y(addr_in_iso_buf[ 42]));
    //BUFX4HVT BUF_ADDR_IN_041 (.A(addr_in_iso[ 41]), .Y(addr_in_iso_buf[ 41]));
    //BUFX4HVT BUF_ADDR_IN_040 (.A(addr_in_iso[ 40]), .Y(addr_in_iso_buf[ 40]));
    //BUFX4HVT BUF_ADDR_IN_039 (.A(addr_in_iso[ 39]), .Y(addr_in_iso_buf[ 39]));
    //BUFX4HVT BUF_ADDR_IN_038 (.A(addr_in_iso[ 38]), .Y(addr_in_iso_buf[ 38]));
    //BUFX4HVT BUF_ADDR_IN_037 (.A(addr_in_iso[ 37]), .Y(addr_in_iso_buf[ 37]));
    //BUFX4HVT BUF_ADDR_IN_036 (.A(addr_in_iso[ 36]), .Y(addr_in_iso_buf[ 36]));
    //BUFX4HVT BUF_ADDR_IN_035 (.A(addr_in_iso[ 35]), .Y(addr_in_iso_buf[ 35]));
    BUFX4HVT BUF_ADDR_IN_034 (.A(addr_in_iso[ 34]), .Y(addr_in_iso_buf[ 34]));
    BUFX4HVT BUF_ADDR_IN_033 (.A(addr_in_iso[ 33]), .Y(addr_in_iso_buf[ 33]));
    BUFX4HVT BUF_ADDR_IN_032 (.A(addr_in_iso[ 32]), .Y(addr_in_iso_buf[ 32]));
    //BUFX4HVT BUF_ADDR_IN_031 (.A(addr_in_iso[ 31]), .Y(addr_in_iso_buf[ 31]));
    //BUFX4HVT BUF_ADDR_IN_030 (.A(addr_in_iso[ 30]), .Y(addr_in_iso_buf[ 30]));
    //BUFX4HVT BUF_ADDR_IN_029 (.A(addr_in_iso[ 29]), .Y(addr_in_iso_buf[ 29]));
    //BUFX4HVT BUF_ADDR_IN_028 (.A(addr_in_iso[ 28]), .Y(addr_in_iso_buf[ 28]));
    //BUFX4HVT BUF_ADDR_IN_027 (.A(addr_in_iso[ 27]), .Y(addr_in_iso_buf[ 27]));
    //BUFX4HVT BUF_ADDR_IN_026 (.A(addr_in_iso[ 26]), .Y(addr_in_iso_buf[ 26]));
    //BUFX4HVT BUF_ADDR_IN_025 (.A(addr_in_iso[ 25]), .Y(addr_in_iso_buf[ 25]));
    //BUFX4HVT BUF_ADDR_IN_024 (.A(addr_in_iso[ 24]), .Y(addr_in_iso_buf[ 24]));
    BUFX4HVT BUF_ADDR_IN_023 (.A(addr_in_iso[ 23]), .Y(addr_in_iso_buf[ 23]));
    //BUFX4HVT BUF_ADDR_IN_022 (.A(addr_in_iso[ 22]), .Y(addr_in_iso_buf[ 22]));
    //BUFX4HVT BUF_ADDR_IN_021 (.A(addr_in_iso[ 21]), .Y(addr_in_iso_buf[ 21]));
    //BUFX4HVT BUF_ADDR_IN_020 (.A(addr_in_iso[ 20]), .Y(addr_in_iso_buf[ 20]));
    //BUFX4HVT BUF_ADDR_IN_019 (.A(addr_in_iso[ 19]), .Y(addr_in_iso_buf[ 19]));
    //BUFX4HVT BUF_ADDR_IN_018 (.A(addr_in_iso[ 18]), .Y(addr_in_iso_buf[ 18]));
    //BUFX4HVT BUF_ADDR_IN_017 (.A(addr_in_iso[ 17]), .Y(addr_in_iso_buf[ 17]));
    //BUFX4HVT BUF_ADDR_IN_016 (.A(addr_in_iso[ 16]), .Y(addr_in_iso_buf[ 16]));
    BUFX4HVT BUF_ADDR_IN_015 (.A(addr_in_iso[ 15]), .Y(addr_in_iso_buf[ 15]));
    BUFX4HVT BUF_ADDR_IN_014 (.A(addr_in_iso[ 14]), .Y(addr_in_iso_buf[ 14]));
    BUFX4HVT BUF_ADDR_IN_013 (.A(addr_in_iso[ 13]), .Y(addr_in_iso_buf[ 13]));
    BUFX4HVT BUF_ADDR_IN_012 (.A(addr_in_iso[ 12]), .Y(addr_in_iso_buf[ 12]));
    BUFX4HVT BUF_ADDR_IN_011 (.A(addr_in_iso[ 11]), .Y(addr_in_iso_buf[ 11]));
    BUFX4HVT BUF_ADDR_IN_010 (.A(addr_in_iso[ 10]), .Y(addr_in_iso_buf[ 10]));
    BUFX4HVT BUF_ADDR_IN_009 (.A(addr_in_iso[  9]), .Y(addr_in_iso_buf[  9]));
    BUFX4HVT BUF_ADDR_IN_008 (.A(addr_in_iso[  8]), .Y(addr_in_iso_buf[  8]));
    BUFX4HVT BUF_ADDR_IN_007 (.A(addr_in_iso[  7]), .Y(addr_in_iso_buf[  7]));
    BUFX4HVT BUF_ADDR_IN_006 (.A(addr_in_iso[  6]), .Y(addr_in_iso_buf[  6]));
    BUFX4HVT BUF_ADDR_IN_005 (.A(addr_in_iso[  5]), .Y(addr_in_iso_buf[  5]));
    BUFX4HVT BUF_ADDR_IN_004 (.A(addr_in_iso[  4]), .Y(addr_in_iso_buf[  4]));
    BUFX4HVT BUF_ADDR_IN_003 (.A(addr_in_iso[  3]), .Y(addr_in_iso_buf[  3]));
    BUFX4HVT BUF_ADDR_IN_002 (.A(addr_in_iso[  2]), .Y(addr_in_iso_buf[  2]));
    BUFX4HVT BUF_ADDR_IN_001 (.A(addr_in_iso[  1]), .Y(addr_in_iso_buf[  1]));
    BUFX4HVT BUF_ADDR_IN_000 (.A(addr_in_iso[  0]), .Y(addr_in_iso_buf[  0]));

    BUFX4HVT BUF_DATA_IN_23 (.A(data_in_iso[23]), .Y(data_in_iso_buf[23]));
    BUFX4HVT BUF_DATA_IN_22 (.A(data_in_iso[22]), .Y(data_in_iso_buf[22]));
    BUFX4HVT BUF_DATA_IN_21 (.A(data_in_iso[21]), .Y(data_in_iso_buf[21]));
    BUFX4HVT BUF_DATA_IN_20 (.A(data_in_iso[20]), .Y(data_in_iso_buf[20]));
    BUFX4HVT BUF_DATA_IN_19 (.A(data_in_iso[19]), .Y(data_in_iso_buf[19]));
    BUFX4HVT BUF_DATA_IN_18 (.A(data_in_iso[18]), .Y(data_in_iso_buf[18]));
    BUFX4HVT BUF_DATA_IN_17 (.A(data_in_iso[17]), .Y(data_in_iso_buf[17]));
    BUFX4HVT BUF_DATA_IN_16 (.A(data_in_iso[16]), .Y(data_in_iso_buf[16]));
    BUFX4HVT BUF_DATA_IN_15 (.A(data_in_iso[15]), .Y(data_in_iso_buf[15]));
    BUFX4HVT BUF_DATA_IN_14 (.A(data_in_iso[14]), .Y(data_in_iso_buf[14]));
    BUFX4HVT BUF_DATA_IN_13 (.A(data_in_iso[13]), .Y(data_in_iso_buf[13]));
    BUFX4HVT BUF_DATA_IN_12 (.A(data_in_iso[12]), .Y(data_in_iso_buf[12]));
    BUFX4HVT BUF_DATA_IN_11 (.A(data_in_iso[11]), .Y(data_in_iso_buf[11]));
    BUFX4HVT BUF_DATA_IN_10 (.A(data_in_iso[10]), .Y(data_in_iso_buf[10]));
    BUFX4HVT BUF_DATA_IN_09 (.A(data_in_iso[ 9]), .Y(data_in_iso_buf[ 9]));
    BUFX4HVT BUF_DATA_IN_08 (.A(data_in_iso[ 8]), .Y(data_in_iso_buf[ 8]));
    BUFX4HVT BUF_DATA_IN_07 (.A(data_in_iso[ 7]), .Y(data_in_iso_buf[ 7]));
    BUFX4HVT BUF_DATA_IN_06 (.A(data_in_iso[ 6]), .Y(data_in_iso_buf[ 6]));
    BUFX4HVT BUF_DATA_IN_05 (.A(data_in_iso[ 5]), .Y(data_in_iso_buf[ 5]));
    BUFX4HVT BUF_DATA_IN_04 (.A(data_in_iso[ 4]), .Y(data_in_iso_buf[ 4]));
    BUFX4HVT BUF_DATA_IN_03 (.A(data_in_iso[ 3]), .Y(data_in_iso_buf[ 3]));
    BUFX4HVT BUF_DATA_IN_02 (.A(data_in_iso[ 2]), .Y(data_in_iso_buf[ 2]));
    BUFX4HVT BUF_DATA_IN_01 (.A(data_in_iso[ 1]), .Y(data_in_iso_buf[ 1]));
    BUFX4HVT BUF_DATA_IN_00 (.A(data_in_iso[ 0]), .Y(data_in_iso_buf[ 0]));

   //****************************************************
   // REGISTER 0x00 (  0)
   //****************************************************
    //WAKEUP_WHEN_DONE (1'h0)
    DFFRX1HVT WAKEUP_WHEN_DONE_0 (.CK(addr_in_iso_buf[0]), .D(data_in_iso_buf[6]), .RN(RESETn), .Q(WAKEUP_WHEN_DONE));
    //MODE_CONTINUOUS (1'h0)
    DFFRX1HVT MODE_CONTINUOUS_0 (.CK(addr_in_iso_buf[0]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(MODE_CONTINUOUS));
    //DBE_ENABLE (1'h0)
    DFFRX1HVT DBE_ENABLE_0 (.CK(addr_in_iso_buf[0]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(DBE_ENABLE));
    //RESET_AFE (1'h1)
    DFFSX1HVT RESET_AFE_0 (.CK(addr_in_iso_buf[0]), .D(data_in_iso_buf[3]), .SN(RESETn), .Q(RESET_AFE));
    //RESETN_DBE (1'h0)
    DFFRX1HVT RESETN_DBE_0 (.CK(addr_in_iso_buf[0]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(RESETN_DBE));
    //LDC_ISOLATE (1'h1)
    DFFSX1HVT LDC_ISOLATE_0 (.CK(addr_in_iso_buf[0]), .D(data_in_iso_buf[1]), .SN(RESETn), .Q(LDC_ISOLATE));
    //LDC_PG (1'h1)
    DFFSX1HVT LDC_PG_0 (.CK(addr_in_iso_buf[0]), .D(data_in_iso_buf[0]), .SN(RESETn), .Q(LDC_PG));

    // Inverted Signals
    INVX4HVT MODE_CONTINUOUS_B_0 (.A(MODE_CONTINUOUS), .Y(MODE_CONTINUOUS_B));
    INVX4HVT DBE_ENABLE_B_0 (.A(DBE_ENABLE), .Y(DBE_ENABLE_B));
    INVX4HVT RESET_AFE_B_0 (.A(RESET_AFE), .Y(RESET_AFE_B));
    INVX4HVT RESETN_DBE_B_0 (.A(RESETN_DBE), .Y(RESETN_DBE_B));
    INVX4HVT LDC_ISOLATE_B_0 (.A(LDC_ISOLATE), .Y(LDC_ISOLATE_B));
    INVX4HVT LDC_PG_B_0 (.A(LDC_PG), .Y(LDC_PG_B));

   //****************************************************
   // REGISTER 0x01 (  1)
   //****************************************************
    //CTRL_CAPSIZE (3'h3)
    DFFRX1HVT CTRL_CAPSIZE_2 (.CK(addr_in_iso_buf[1]), .D(data_in_iso_buf[14]), .RN(RESETn), .Q(CTRL_CAPSIZE[2]));
    DFFSX1HVT CTRL_CAPSIZE_1 (.CK(addr_in_iso_buf[1]), .D(data_in_iso_buf[13]), .SN(RESETn), .Q(CTRL_CAPSIZE[1]));
    DFFSX1HVT CTRL_CAPSIZE_0 (.CK(addr_in_iso_buf[1]), .D(data_in_iso_buf[12]), .SN(RESETn), .Q(CTRL_CAPSIZE[0]));
    //CTRL_ICOMP (3'h3)
    DFFRX1HVT CTRL_ICOMP_2 (.CK(addr_in_iso_buf[1]), .D(data_in_iso_buf[11]), .RN(RESETn), .Q(CTRL_ICOMP[2]));
    DFFSX1HVT CTRL_ICOMP_1 (.CK(addr_in_iso_buf[1]), .D(data_in_iso_buf[10]), .SN(RESETn), .Q(CTRL_ICOMP[1]));
    DFFSX1HVT CTRL_ICOMP_0 (.CK(addr_in_iso_buf[1]), .D(data_in_iso_buf[9]), .SN(RESETn), .Q(CTRL_ICOMP[0]));
    //CTRL_VOFS_CANCEL (1'h1)
    DFFSX1HVT CTRL_VOFS_CANCEL_0 (.CK(addr_in_iso_buf[1]), .D(data_in_iso_buf[8]), .SN(RESETn), .Q(CTRL_VOFS_CANCEL));
    //CTRL_IBIAS_VBIAS (4'h7)
    DFFRX1HVT CTRL_IBIAS_VBIAS_3 (.CK(addr_in_iso_buf[1]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(CTRL_IBIAS_VBIAS[3]));
    DFFSX1HVT CTRL_IBIAS_VBIAS_2 (.CK(addr_in_iso_buf[1]), .D(data_in_iso_buf[6]), .SN(RESETn), .Q(CTRL_IBIAS_VBIAS[2]));
    DFFSX1HVT CTRL_IBIAS_VBIAS_1 (.CK(addr_in_iso_buf[1]), .D(data_in_iso_buf[5]), .SN(RESETn), .Q(CTRL_IBIAS_VBIAS[1]));
    DFFSX1HVT CTRL_IBIAS_VBIAS_0 (.CK(addr_in_iso_buf[1]), .D(data_in_iso_buf[4]), .SN(RESETn), .Q(CTRL_IBIAS_VBIAS[0]));
    //CTRL_IBIAS_I (4'h8)
    DFFSX1HVT CTRL_IBIAS_I_3 (.CK(addr_in_iso_buf[1]), .D(data_in_iso_buf[3]), .SN(RESETn), .Q(CTRL_IBIAS_I[3]));
    DFFRX1HVT CTRL_IBIAS_I_2 (.CK(addr_in_iso_buf[1]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(CTRL_IBIAS_I[2]));
    DFFRX1HVT CTRL_IBIAS_I_1 (.CK(addr_in_iso_buf[1]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(CTRL_IBIAS_I[1]));
    DFFRX1HVT CTRL_IBIAS_I_0 (.CK(addr_in_iso_buf[1]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(CTRL_IBIAS_I[0]));

    // Inverted Signals
    INVX4HVT CTRL_CAPSIZE_B_2 (.A(CTRL_CAPSIZE[2]), .Y(CTRL_CAPSIZE_B[2]));
    INVX4HVT CTRL_CAPSIZE_B_1 (.A(CTRL_CAPSIZE[1]), .Y(CTRL_CAPSIZE_B[1]));
    INVX4HVT CTRL_CAPSIZE_B_0 (.A(CTRL_CAPSIZE[0]), .Y(CTRL_CAPSIZE_B[0]));
    INVX4HVT CTRL_ICOMP_B_2 (.A(CTRL_ICOMP[2]), .Y(CTRL_ICOMP_B[2]));
    INVX4HVT CTRL_ICOMP_B_1 (.A(CTRL_ICOMP[1]), .Y(CTRL_ICOMP_B[1]));
    INVX4HVT CTRL_ICOMP_B_0 (.A(CTRL_ICOMP[0]), .Y(CTRL_ICOMP_B[0]));
    INVX4HVT CTRL_VOFS_CANCEL_B_0 (.A(CTRL_VOFS_CANCEL), .Y(CTRL_VOFS_CANCEL_B));
    INVX4HVT CTRL_IBIAS_VBIAS_B_3 (.A(CTRL_IBIAS_VBIAS[3]), .Y(CTRL_IBIAS_VBIAS_B[3]));
    INVX4HVT CTRL_IBIAS_VBIAS_B_2 (.A(CTRL_IBIAS_VBIAS[2]), .Y(CTRL_IBIAS_VBIAS_B[2]));
    INVX4HVT CTRL_IBIAS_VBIAS_B_1 (.A(CTRL_IBIAS_VBIAS[1]), .Y(CTRL_IBIAS_VBIAS_B[1]));
    INVX4HVT CTRL_IBIAS_VBIAS_B_0 (.A(CTRL_IBIAS_VBIAS[0]), .Y(CTRL_IBIAS_VBIAS_B[0]));
    INVX4HVT CTRL_IBIAS_I_B_3 (.A(CTRL_IBIAS_I[3]), .Y(CTRL_IBIAS_I_B[3]));
    INVX4HVT CTRL_IBIAS_I_B_2 (.A(CTRL_IBIAS_I[2]), .Y(CTRL_IBIAS_I_B[2]));
    INVX4HVT CTRL_IBIAS_I_B_1 (.A(CTRL_IBIAS_I[1]), .Y(CTRL_IBIAS_I_B[1]));
    INVX4HVT CTRL_IBIAS_I_B_0 (.A(CTRL_IBIAS_I[0]), .Y(CTRL_IBIAS_I_B[0]));

   //****************************************************
   // REGISTER 0x02 (  2)
   //****************************************************
    //CTRL_VREF_COMP_V (2'h3)
    DFFSX1HVT CTRL_VREF_COMP_V_1 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[17]), .SN(RESETn), .Q(CTRL_VREF_COMP_V[1]));
    DFFSX1HVT CTRL_VREF_COMP_V_0 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[16]), .SN(RESETn), .Q(CTRL_VREF_COMP_V[0]));
    //CTRLB_VREF_COMP_I (7'h67)
    DFFSX1HVT CTRLB_VREF_COMP_I_6 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[15]), .SN(RESETn), .Q(CTRLB_VREF_COMP_I[6]));
    DFFSX1HVT CTRLB_VREF_COMP_I_5 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[14]), .SN(RESETn), .Q(CTRLB_VREF_COMP_I[5]));
    DFFRX1HVT CTRLB_VREF_COMP_I_4 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[13]), .RN(RESETn), .Q(CTRLB_VREF_COMP_I[4]));
    DFFRX1HVT CTRLB_VREF_COMP_I_3 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[12]), .RN(RESETn), .Q(CTRLB_VREF_COMP_I[3]));
    DFFSX1HVT CTRLB_VREF_COMP_I_2 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[11]), .SN(RESETn), .Q(CTRLB_VREF_COMP_I[2]));
    DFFSX1HVT CTRLB_VREF_COMP_I_1 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[10]), .SN(RESETn), .Q(CTRLB_VREF_COMP_I[1]));
    DFFSX1HVT CTRLB_VREF_COMP_I_0 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[9]), .SN(RESETn), .Q(CTRLB_VREF_COMP_I[0]));
    //CTRL_VREF_PV_V (2'h2)
    DFFSX1HVT CTRL_VREF_PV_V_1 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[8]), .SN(RESETn), .Q(CTRL_VREF_PV_V[1]));
    DFFRX1HVT CTRL_VREF_PV_V_0 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(CTRL_VREF_PV_V[0]));
    //CTRLB_VREF_PV_I (7'h67)
    DFFSX1HVT CTRLB_VREF_PV_I_6 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[6]), .SN(RESETn), .Q(CTRLB_VREF_PV_I[6]));
    DFFSX1HVT CTRLB_VREF_PV_I_5 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[5]), .SN(RESETn), .Q(CTRLB_VREF_PV_I[5]));
    DFFRX1HVT CTRLB_VREF_PV_I_4 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(CTRLB_VREF_PV_I[4]));
    DFFRX1HVT CTRLB_VREF_PV_I_3 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(CTRLB_VREF_PV_I[3]));
    DFFSX1HVT CTRLB_VREF_PV_I_2 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[2]), .SN(RESETn), .Q(CTRLB_VREF_PV_I[2]));
    DFFSX1HVT CTRLB_VREF_PV_I_1 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[1]), .SN(RESETn), .Q(CTRLB_VREF_PV_I[1]));
    DFFSX1HVT CTRLB_VREF_PV_I_0 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[0]), .SN(RESETn), .Q(CTRLB_VREF_PV_I[0]));

    // Inverted Signals
    INVX4HVT CTRL_VREF_COMP_V_B_1 (.A(CTRL_VREF_COMP_V[1]), .Y(CTRL_VREF_COMP_V_B[1]));
    INVX4HVT CTRL_VREF_COMP_V_B_0 (.A(CTRL_VREF_COMP_V[0]), .Y(CTRL_VREF_COMP_V_B[0]));
    INVX4HVT CTRLB_VREF_COMP_I_B_6 (.A(CTRLB_VREF_COMP_I[6]), .Y(CTRLB_VREF_COMP_I_B[6]));
    INVX4HVT CTRLB_VREF_COMP_I_B_5 (.A(CTRLB_VREF_COMP_I[5]), .Y(CTRLB_VREF_COMP_I_B[5]));
    INVX4HVT CTRLB_VREF_COMP_I_B_4 (.A(CTRLB_VREF_COMP_I[4]), .Y(CTRLB_VREF_COMP_I_B[4]));
    INVX4HVT CTRLB_VREF_COMP_I_B_3 (.A(CTRLB_VREF_COMP_I[3]), .Y(CTRLB_VREF_COMP_I_B[3]));
    INVX4HVT CTRLB_VREF_COMP_I_B_2 (.A(CTRLB_VREF_COMP_I[2]), .Y(CTRLB_VREF_COMP_I_B[2]));
    INVX4HVT CTRLB_VREF_COMP_I_B_1 (.A(CTRLB_VREF_COMP_I[1]), .Y(CTRLB_VREF_COMP_I_B[1]));
    INVX4HVT CTRLB_VREF_COMP_I_B_0 (.A(CTRLB_VREF_COMP_I[0]), .Y(CTRLB_VREF_COMP_I_B[0]));
    INVX4HVT CTRL_VREF_PV_V_B_1 (.A(CTRL_VREF_PV_V[1]), .Y(CTRL_VREF_PV_V_B[1]));
    INVX4HVT CTRL_VREF_PV_V_B_0 (.A(CTRL_VREF_PV_V[0]), .Y(CTRL_VREF_PV_V_B[0]));
    INVX4HVT CTRLB_VREF_PV_I_B_6 (.A(CTRLB_VREF_PV_I[6]), .Y(CTRLB_VREF_PV_I_B[6]));
    INVX4HVT CTRLB_VREF_PV_I_B_5 (.A(CTRLB_VREF_PV_I[5]), .Y(CTRLB_VREF_PV_I_B[5]));
    INVX4HVT CTRLB_VREF_PV_I_B_4 (.A(CTRLB_VREF_PV_I[4]), .Y(CTRLB_VREF_PV_I_B[4]));
    INVX4HVT CTRLB_VREF_PV_I_B_3 (.A(CTRLB_VREF_PV_I[3]), .Y(CTRLB_VREF_PV_I_B[3]));
    INVX4HVT CTRLB_VREF_PV_I_B_2 (.A(CTRLB_VREF_PV_I[2]), .Y(CTRLB_VREF_PV_I_B[2]));
    INVX4HVT CTRLB_VREF_PV_I_B_1 (.A(CTRLB_VREF_PV_I[1]), .Y(CTRLB_VREF_PV_I_B[1]));
    INVX4HVT CTRLB_VREF_PV_I_B_0 (.A(CTRLB_VREF_PV_I[0]), .Y(CTRLB_VREF_PV_I_B[0]));

   //****************************************************
   // REGISTER 0x03 (  3)
   //****************************************************
    //TIME_COUNTING (24'h000258)
    DFFRX1HVT TIME_COUNTING_23 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[23]), .RN(RESETn), .Q(TIME_COUNTING[23]));
    DFFRX1HVT TIME_COUNTING_22 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[22]), .RN(RESETn), .Q(TIME_COUNTING[22]));
    DFFRX1HVT TIME_COUNTING_21 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[21]), .RN(RESETn), .Q(TIME_COUNTING[21]));
    DFFRX1HVT TIME_COUNTING_20 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[20]), .RN(RESETn), .Q(TIME_COUNTING[20]));
    DFFRX1HVT TIME_COUNTING_19 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[19]), .RN(RESETn), .Q(TIME_COUNTING[19]));
    DFFRX1HVT TIME_COUNTING_18 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[18]), .RN(RESETn), .Q(TIME_COUNTING[18]));
    DFFRX1HVT TIME_COUNTING_17 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[17]), .RN(RESETn), .Q(TIME_COUNTING[17]));
    DFFRX1HVT TIME_COUNTING_16 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[16]), .RN(RESETn), .Q(TIME_COUNTING[16]));
    DFFRX1HVT TIME_COUNTING_15 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[15]), .RN(RESETn), .Q(TIME_COUNTING[15]));
    DFFRX1HVT TIME_COUNTING_14 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[14]), .RN(RESETn), .Q(TIME_COUNTING[14]));
    DFFRX1HVT TIME_COUNTING_13 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[13]), .RN(RESETn), .Q(TIME_COUNTING[13]));
    DFFRX1HVT TIME_COUNTING_12 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[12]), .RN(RESETn), .Q(TIME_COUNTING[12]));
    DFFRX1HVT TIME_COUNTING_11 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[11]), .RN(RESETn), .Q(TIME_COUNTING[11]));
    DFFRX1HVT TIME_COUNTING_10 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[10]), .RN(RESETn), .Q(TIME_COUNTING[10]));
    DFFSX1HVT TIME_COUNTING_9 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[9]), .SN(RESETn), .Q(TIME_COUNTING[9]));
    DFFRX1HVT TIME_COUNTING_8 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[8]), .RN(RESETn), .Q(TIME_COUNTING[8]));
    DFFRX1HVT TIME_COUNTING_7 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(TIME_COUNTING[7]));
    DFFSX1HVT TIME_COUNTING_6 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[6]), .SN(RESETn), .Q(TIME_COUNTING[6]));
    DFFRX1HVT TIME_COUNTING_5 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(TIME_COUNTING[5]));
    DFFSX1HVT TIME_COUNTING_4 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[4]), .SN(RESETn), .Q(TIME_COUNTING[4]));
    DFFSX1HVT TIME_COUNTING_3 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[3]), .SN(RESETn), .Q(TIME_COUNTING[3]));
    DFFRX1HVT TIME_COUNTING_2 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(TIME_COUNTING[2]));
    DFFRX1HVT TIME_COUNTING_1 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(TIME_COUNTING[1]));
    DFFRX1HVT TIME_COUNTING_0 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(TIME_COUNTING[0]));

    // Inverted Signals
    INVX4HVT TIME_COUNTING_B_23 (.A(TIME_COUNTING[23]), .Y(TIME_COUNTING_B[23]));
    INVX4HVT TIME_COUNTING_B_22 (.A(TIME_COUNTING[22]), .Y(TIME_COUNTING_B[22]));
    INVX4HVT TIME_COUNTING_B_21 (.A(TIME_COUNTING[21]), .Y(TIME_COUNTING_B[21]));
    INVX4HVT TIME_COUNTING_B_20 (.A(TIME_COUNTING[20]), .Y(TIME_COUNTING_B[20]));
    INVX4HVT TIME_COUNTING_B_19 (.A(TIME_COUNTING[19]), .Y(TIME_COUNTING_B[19]));
    INVX4HVT TIME_COUNTING_B_18 (.A(TIME_COUNTING[18]), .Y(TIME_COUNTING_B[18]));
    INVX4HVT TIME_COUNTING_B_17 (.A(TIME_COUNTING[17]), .Y(TIME_COUNTING_B[17]));
    INVX4HVT TIME_COUNTING_B_16 (.A(TIME_COUNTING[16]), .Y(TIME_COUNTING_B[16]));
    INVX4HVT TIME_COUNTING_B_15 (.A(TIME_COUNTING[15]), .Y(TIME_COUNTING_B[15]));
    INVX4HVT TIME_COUNTING_B_14 (.A(TIME_COUNTING[14]), .Y(TIME_COUNTING_B[14]));
    INVX4HVT TIME_COUNTING_B_13 (.A(TIME_COUNTING[13]), .Y(TIME_COUNTING_B[13]));
    INVX4HVT TIME_COUNTING_B_12 (.A(TIME_COUNTING[12]), .Y(TIME_COUNTING_B[12]));
    INVX4HVT TIME_COUNTING_B_11 (.A(TIME_COUNTING[11]), .Y(TIME_COUNTING_B[11]));
    INVX4HVT TIME_COUNTING_B_10 (.A(TIME_COUNTING[10]), .Y(TIME_COUNTING_B[10]));
    INVX4HVT TIME_COUNTING_B_9 (.A(TIME_COUNTING[9]), .Y(TIME_COUNTING_B[9]));
    INVX4HVT TIME_COUNTING_B_8 (.A(TIME_COUNTING[8]), .Y(TIME_COUNTING_B[8]));
    INVX4HVT TIME_COUNTING_B_7 (.A(TIME_COUNTING[7]), .Y(TIME_COUNTING_B[7]));
    INVX4HVT TIME_COUNTING_B_6 (.A(TIME_COUNTING[6]), .Y(TIME_COUNTING_B[6]));
    INVX4HVT TIME_COUNTING_B_5 (.A(TIME_COUNTING[5]), .Y(TIME_COUNTING_B[5]));
    INVX4HVT TIME_COUNTING_B_4 (.A(TIME_COUNTING[4]), .Y(TIME_COUNTING_B[4]));
    INVX4HVT TIME_COUNTING_B_3 (.A(TIME_COUNTING[3]), .Y(TIME_COUNTING_B[3]));
    INVX4HVT TIME_COUNTING_B_2 (.A(TIME_COUNTING[2]), .Y(TIME_COUNTING_B[2]));
    INVX4HVT TIME_COUNTING_B_1 (.A(TIME_COUNTING[1]), .Y(TIME_COUNTING_B[1]));
    INVX4HVT TIME_COUNTING_B_0 (.A(TIME_COUNTING[0]), .Y(TIME_COUNTING_B[0]));

   //****************************************************
   // REGISTER 0x04 (  4)
   //****************************************************
    //TIME_MONITOR_HOLD (12'h000)
    DFFRX1HVT TIME_MONITOR_HOLD_11 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[23]), .RN(RESETn), .Q(TIME_MONITOR_HOLD[11]));
    DFFRX1HVT TIME_MONITOR_HOLD_10 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[22]), .RN(RESETn), .Q(TIME_MONITOR_HOLD[10]));
    DFFRX1HVT TIME_MONITOR_HOLD_9 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[21]), .RN(RESETn), .Q(TIME_MONITOR_HOLD[9]));
    DFFRX1HVT TIME_MONITOR_HOLD_8 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[20]), .RN(RESETn), .Q(TIME_MONITOR_HOLD[8]));
    DFFRX1HVT TIME_MONITOR_HOLD_7 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[19]), .RN(RESETn), .Q(TIME_MONITOR_HOLD[7]));
    DFFRX1HVT TIME_MONITOR_HOLD_6 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[18]), .RN(RESETn), .Q(TIME_MONITOR_HOLD[6]));
    DFFRX1HVT TIME_MONITOR_HOLD_5 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[17]), .RN(RESETn), .Q(TIME_MONITOR_HOLD[5]));
    DFFRX1HVT TIME_MONITOR_HOLD_4 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[16]), .RN(RESETn), .Q(TIME_MONITOR_HOLD[4]));
    DFFRX1HVT TIME_MONITOR_HOLD_3 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[15]), .RN(RESETn), .Q(TIME_MONITOR_HOLD[3]));
    DFFRX1HVT TIME_MONITOR_HOLD_2 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[14]), .RN(RESETn), .Q(TIME_MONITOR_HOLD[2]));
    DFFRX1HVT TIME_MONITOR_HOLD_1 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[13]), .RN(RESETn), .Q(TIME_MONITOR_HOLD[1]));
    DFFRX1HVT TIME_MONITOR_HOLD_0 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[12]), .RN(RESETn), .Q(TIME_MONITOR_HOLD[0]));
    //TIME_MONITORING (12'h00A)
    DFFRX1HVT TIME_MONITORING_11 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[11]), .RN(RESETn), .Q(TIME_MONITORING[11]));
    DFFRX1HVT TIME_MONITORING_10 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[10]), .RN(RESETn), .Q(TIME_MONITORING[10]));
    DFFRX1HVT TIME_MONITORING_9 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[9]), .RN(RESETn), .Q(TIME_MONITORING[9]));
    DFFRX1HVT TIME_MONITORING_8 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[8]), .RN(RESETn), .Q(TIME_MONITORING[8]));
    DFFRX1HVT TIME_MONITORING_7 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(TIME_MONITORING[7]));
    DFFRX1HVT TIME_MONITORING_6 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[6]), .RN(RESETn), .Q(TIME_MONITORING[6]));
    DFFRX1HVT TIME_MONITORING_5 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(TIME_MONITORING[5]));
    DFFRX1HVT TIME_MONITORING_4 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(TIME_MONITORING[4]));
    DFFSX1HVT TIME_MONITORING_3 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[3]), .SN(RESETn), .Q(TIME_MONITORING[3]));
    DFFRX1HVT TIME_MONITORING_2 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(TIME_MONITORING[2]));
    DFFSX1HVT TIME_MONITORING_1 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[1]), .SN(RESETn), .Q(TIME_MONITORING[1]));
    DFFRX1HVT TIME_MONITORING_0 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(TIME_MONITORING[0]));

    // Inverted Signals
    INVX4HVT TIME_MONITOR_HOLD_B_11 (.A(TIME_MONITOR_HOLD[11]), .Y(TIME_MONITOR_HOLD_B[11]));
    INVX4HVT TIME_MONITOR_HOLD_B_10 (.A(TIME_MONITOR_HOLD[10]), .Y(TIME_MONITOR_HOLD_B[10]));
    INVX4HVT TIME_MONITOR_HOLD_B_9 (.A(TIME_MONITOR_HOLD[9]), .Y(TIME_MONITOR_HOLD_B[9]));
    INVX4HVT TIME_MONITOR_HOLD_B_8 (.A(TIME_MONITOR_HOLD[8]), .Y(TIME_MONITOR_HOLD_B[8]));
    INVX4HVT TIME_MONITOR_HOLD_B_7 (.A(TIME_MONITOR_HOLD[7]), .Y(TIME_MONITOR_HOLD_B[7]));
    INVX4HVT TIME_MONITOR_HOLD_B_6 (.A(TIME_MONITOR_HOLD[6]), .Y(TIME_MONITOR_HOLD_B[6]));
    INVX4HVT TIME_MONITOR_HOLD_B_5 (.A(TIME_MONITOR_HOLD[5]), .Y(TIME_MONITOR_HOLD_B[5]));
    INVX4HVT TIME_MONITOR_HOLD_B_4 (.A(TIME_MONITOR_HOLD[4]), .Y(TIME_MONITOR_HOLD_B[4]));
    INVX4HVT TIME_MONITOR_HOLD_B_3 (.A(TIME_MONITOR_HOLD[3]), .Y(TIME_MONITOR_HOLD_B[3]));
    INVX4HVT TIME_MONITOR_HOLD_B_2 (.A(TIME_MONITOR_HOLD[2]), .Y(TIME_MONITOR_HOLD_B[2]));
    INVX4HVT TIME_MONITOR_HOLD_B_1 (.A(TIME_MONITOR_HOLD[1]), .Y(TIME_MONITOR_HOLD_B[1]));
    INVX4HVT TIME_MONITOR_HOLD_B_0 (.A(TIME_MONITOR_HOLD[0]), .Y(TIME_MONITOR_HOLD_B[0]));
    INVX4HVT TIME_MONITORING_B_11 (.A(TIME_MONITORING[11]), .Y(TIME_MONITORING_B[11]));
    INVX4HVT TIME_MONITORING_B_10 (.A(TIME_MONITORING[10]), .Y(TIME_MONITORING_B[10]));
    INVX4HVT TIME_MONITORING_B_9 (.A(TIME_MONITORING[9]), .Y(TIME_MONITORING_B[9]));
    INVX4HVT TIME_MONITORING_B_8 (.A(TIME_MONITORING[8]), .Y(TIME_MONITORING_B[8]));
    INVX4HVT TIME_MONITORING_B_7 (.A(TIME_MONITORING[7]), .Y(TIME_MONITORING_B[7]));
    INVX4HVT TIME_MONITORING_B_6 (.A(TIME_MONITORING[6]), .Y(TIME_MONITORING_B[6]));
    INVX4HVT TIME_MONITORING_B_5 (.A(TIME_MONITORING[5]), .Y(TIME_MONITORING_B[5]));
    INVX4HVT TIME_MONITORING_B_4 (.A(TIME_MONITORING[4]), .Y(TIME_MONITORING_B[4]));
    INVX4HVT TIME_MONITORING_B_3 (.A(TIME_MONITORING[3]), .Y(TIME_MONITORING_B[3]));
    INVX4HVT TIME_MONITORING_B_2 (.A(TIME_MONITORING[2]), .Y(TIME_MONITORING_B[2]));
    INVX4HVT TIME_MONITORING_B_1 (.A(TIME_MONITORING[1]), .Y(TIME_MONITORING_B[1]));
    INVX4HVT TIME_MONITORING_B_0 (.A(TIME_MONITORING[0]), .Y(TIME_MONITORING_B[0]));

   //****************************************************
   // REGISTER 0x05 (  5)
   //****************************************************
    //THRESHOLD_HIGH (12'h028)
    DFFRX1HVT THRESHOLD_HIGH_11 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[23]), .RN(RESETn), .Q(THRESHOLD_HIGH[11]));
    DFFRX1HVT THRESHOLD_HIGH_10 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[22]), .RN(RESETn), .Q(THRESHOLD_HIGH[10]));
    DFFRX1HVT THRESHOLD_HIGH_9 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[21]), .RN(RESETn), .Q(THRESHOLD_HIGH[9]));
    DFFRX1HVT THRESHOLD_HIGH_8 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[20]), .RN(RESETn), .Q(THRESHOLD_HIGH[8]));
    DFFRX1HVT THRESHOLD_HIGH_7 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[19]), .RN(RESETn), .Q(THRESHOLD_HIGH[7]));
    DFFRX1HVT THRESHOLD_HIGH_6 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[18]), .RN(RESETn), .Q(THRESHOLD_HIGH[6]));
    DFFSX1HVT THRESHOLD_HIGH_5 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[17]), .SN(RESETn), .Q(THRESHOLD_HIGH[5]));
    DFFRX1HVT THRESHOLD_HIGH_4 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[16]), .RN(RESETn), .Q(THRESHOLD_HIGH[4]));
    DFFSX1HVT THRESHOLD_HIGH_3 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[15]), .SN(RESETn), .Q(THRESHOLD_HIGH[3]));
    DFFRX1HVT THRESHOLD_HIGH_2 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[14]), .RN(RESETn), .Q(THRESHOLD_HIGH[2]));
    DFFRX1HVT THRESHOLD_HIGH_1 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[13]), .RN(RESETn), .Q(THRESHOLD_HIGH[1]));
    DFFRX1HVT THRESHOLD_HIGH_0 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[12]), .RN(RESETn), .Q(THRESHOLD_HIGH[0]));
    //THRESHOLD_LOW (12'h014)
    DFFRX1HVT THRESHOLD_LOW_11 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[11]), .RN(RESETn), .Q(THRESHOLD_LOW[11]));
    DFFRX1HVT THRESHOLD_LOW_10 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[10]), .RN(RESETn), .Q(THRESHOLD_LOW[10]));
    DFFRX1HVT THRESHOLD_LOW_9 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[9]), .RN(RESETn), .Q(THRESHOLD_LOW[9]));
    DFFRX1HVT THRESHOLD_LOW_8 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[8]), .RN(RESETn), .Q(THRESHOLD_LOW[8]));
    DFFRX1HVT THRESHOLD_LOW_7 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(THRESHOLD_LOW[7]));
    DFFRX1HVT THRESHOLD_LOW_6 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[6]), .RN(RESETn), .Q(THRESHOLD_LOW[6]));
    DFFRX1HVT THRESHOLD_LOW_5 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(THRESHOLD_LOW[5]));
    DFFSX1HVT THRESHOLD_LOW_4 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[4]), .SN(RESETn), .Q(THRESHOLD_LOW[4]));
    DFFRX1HVT THRESHOLD_LOW_3 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(THRESHOLD_LOW[3]));
    DFFSX1HVT THRESHOLD_LOW_2 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[2]), .SN(RESETn), .Q(THRESHOLD_LOW[2]));
    DFFRX1HVT THRESHOLD_LOW_1 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(THRESHOLD_LOW[1]));
    DFFRX1HVT THRESHOLD_LOW_0 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(THRESHOLD_LOW[0]));

    // Inverted Signals
    INVX4HVT THRESHOLD_HIGH_B_11 (.A(THRESHOLD_HIGH[11]), .Y(THRESHOLD_HIGH_B[11]));
    INVX4HVT THRESHOLD_HIGH_B_10 (.A(THRESHOLD_HIGH[10]), .Y(THRESHOLD_HIGH_B[10]));
    INVX4HVT THRESHOLD_HIGH_B_9 (.A(THRESHOLD_HIGH[9]), .Y(THRESHOLD_HIGH_B[9]));
    INVX4HVT THRESHOLD_HIGH_B_8 (.A(THRESHOLD_HIGH[8]), .Y(THRESHOLD_HIGH_B[8]));
    INVX4HVT THRESHOLD_HIGH_B_7 (.A(THRESHOLD_HIGH[7]), .Y(THRESHOLD_HIGH_B[7]));
    INVX4HVT THRESHOLD_HIGH_B_6 (.A(THRESHOLD_HIGH[6]), .Y(THRESHOLD_HIGH_B[6]));
    INVX4HVT THRESHOLD_HIGH_B_5 (.A(THRESHOLD_HIGH[5]), .Y(THRESHOLD_HIGH_B[5]));
    INVX4HVT THRESHOLD_HIGH_B_4 (.A(THRESHOLD_HIGH[4]), .Y(THRESHOLD_HIGH_B[4]));
    INVX4HVT THRESHOLD_HIGH_B_3 (.A(THRESHOLD_HIGH[3]), .Y(THRESHOLD_HIGH_B[3]));
    INVX4HVT THRESHOLD_HIGH_B_2 (.A(THRESHOLD_HIGH[2]), .Y(THRESHOLD_HIGH_B[2]));
    INVX4HVT THRESHOLD_HIGH_B_1 (.A(THRESHOLD_HIGH[1]), .Y(THRESHOLD_HIGH_B[1]));
    INVX4HVT THRESHOLD_HIGH_B_0 (.A(THRESHOLD_HIGH[0]), .Y(THRESHOLD_HIGH_B[0]));
    INVX4HVT THRESHOLD_LOW_B_11 (.A(THRESHOLD_LOW[11]), .Y(THRESHOLD_LOW_B[11]));
    INVX4HVT THRESHOLD_LOW_B_10 (.A(THRESHOLD_LOW[10]), .Y(THRESHOLD_LOW_B[10]));
    INVX4HVT THRESHOLD_LOW_B_9 (.A(THRESHOLD_LOW[9]), .Y(THRESHOLD_LOW_B[9]));
    INVX4HVT THRESHOLD_LOW_B_8 (.A(THRESHOLD_LOW[8]), .Y(THRESHOLD_LOW_B[8]));
    INVX4HVT THRESHOLD_LOW_B_7 (.A(THRESHOLD_LOW[7]), .Y(THRESHOLD_LOW_B[7]));
    INVX4HVT THRESHOLD_LOW_B_6 (.A(THRESHOLD_LOW[6]), .Y(THRESHOLD_LOW_B[6]));
    INVX4HVT THRESHOLD_LOW_B_5 (.A(THRESHOLD_LOW[5]), .Y(THRESHOLD_LOW_B[5]));
    INVX4HVT THRESHOLD_LOW_B_4 (.A(THRESHOLD_LOW[4]), .Y(THRESHOLD_LOW_B[4]));
    INVX4HVT THRESHOLD_LOW_B_3 (.A(THRESHOLD_LOW[3]), .Y(THRESHOLD_LOW_B[3]));
    INVX4HVT THRESHOLD_LOW_B_2 (.A(THRESHOLD_LOW[2]), .Y(THRESHOLD_LOW_B[2]));
    INVX4HVT THRESHOLD_LOW_B_1 (.A(THRESHOLD_LOW[1]), .Y(THRESHOLD_LOW_B[1]));
    INVX4HVT THRESHOLD_LOW_B_0 (.A(THRESHOLD_LOW[0]), .Y(THRESHOLD_LOW_B[0]));

   //****************************************************
   // REGISTER 0x06 (  6)
   //****************************************************
    //OBSEN_AFEOUT (1'h0)
    DFFRX1HVT OBSEN_AFEOUT_0 (.CK(addr_in_iso_buf[6]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(OBSEN_AFEOUT));

    // Inverted Signals
    INVX4HVT OBSEN_AFEOUT_B_0 (.A(OBSEN_AFEOUT), .Y(OBSEN_AFEOUT_B));

   //****************************************************
   // REGISTER 0x07 (  7)
   //****************************************************
    //OBSSEL_ABUF (2'h0)
    DFFRX1HVT OBSSEL_ABUF_1 (.CK(addr_in_iso_buf[7]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(OBSSEL_ABUF[1]));
    DFFRX1HVT OBSSEL_ABUF_0 (.CK(addr_in_iso_buf[7]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(OBSSEL_ABUF[0]));

    // Inverted Signals
    INVX4HVT OBSSEL_ABUF_B_1 (.A(OBSSEL_ABUF[1]), .Y(OBSSEL_ABUF_B[1]));
    INVX4HVT OBSSEL_ABUF_B_0 (.A(OBSSEL_ABUF[0]), .Y(OBSSEL_ABUF_B[0]));

   //****************************************************
   // REGISTER 0x08 (  8)
   //****************************************************
    //OVSEL_IBIAS_VBIAS (1'h0)
    DFFRX1HVT OVSEL_IBIAS_VBIAS_0 (.CK(addr_in_iso_buf[8]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(OVSEL_IBIAS_VBIAS));
    //OVSEL_VREF_COMP (1'h0)
    DFFRX1HVT OVSEL_VREF_COMP_0 (.CK(addr_in_iso_buf[8]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(OVSEL_VREF_COMP));
    //OVSEL_VREF_PV (1'h0)
    DFFRX1HVT OVSEL_VREF_PV_0 (.CK(addr_in_iso_buf[8]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(OVSEL_VREF_PV));

    // Inverted Signals
    INVX4HVT OVSEL_IBIAS_VBIAS_B_0 (.A(OVSEL_IBIAS_VBIAS), .Y(OVSEL_IBIAS_VBIAS_B));
    INVX4HVT OVSEL_VREF_COMP_B_0 (.A(OVSEL_VREF_COMP), .Y(OVSEL_VREF_COMP_B));
    INVX4HVT OVSEL_VREF_PV_B_0 (.A(OVSEL_VREF_PV), .Y(OVSEL_VREF_PV_B));

   //****************************************************
   // REGISTER 0x09 (  9)
   //****************************************************
    //OVVAL_DIN (1'h0)
    DFFRX1HVT OVVAL_DIN_0 (.CK(addr_in_iso_buf[9]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(OVVAL_DIN));
    //OVSEL_DIN (1'h0)
    DFFRX1HVT OVSEL_DIN_0 (.CK(addr_in_iso_buf[9]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(OVSEL_DIN));

    // Inverted Signals
    INVX4HVT OVVAL_DIN_B_0 (.A(OVVAL_DIN), .Y(OVVAL_DIN_B));
    INVX4HVT OVSEL_DIN_B_0 (.A(OVSEL_DIN), .Y(OVSEL_DIN_B));

   //****************************************************
   // REGISTER 0x0A ( 10)
   //****************************************************
    //OVVAL_CLK (1'h0)
    DFFRX1HVT OVVAL_CLK_0 (.CK(addr_in_iso_buf[10]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(OVVAL_CLK));
    //OVSEL_CLK (1'h0)
    DFFRX1HVT OVSEL_CLK_0 (.CK(addr_in_iso_buf[10]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(OVSEL_CLK));

    // Inverted Signals
    INVX4HVT OVVAL_CLK_B_0 (.A(OVVAL_CLK), .Y(OVVAL_CLK_B));
    INVX4HVT OVSEL_CLK_B_0 (.A(OVSEL_CLK), .Y(OVSEL_CLK_B));

   //****************************************************
   // REGISTER 0x0B ( 11)
   //****************************************************
    //OVVAL_CONFIG (5'h00)
    DFFRX1HVT OVVAL_CONFIG_4 (.CK(addr_in_iso_buf[11]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(OVVAL_CONFIG[4]));
    DFFRX1HVT OVVAL_CONFIG_3 (.CK(addr_in_iso_buf[11]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(OVVAL_CONFIG[3]));
    DFFRX1HVT OVVAL_CONFIG_2 (.CK(addr_in_iso_buf[11]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(OVVAL_CONFIG[2]));
    DFFRX1HVT OVVAL_CONFIG_1 (.CK(addr_in_iso_buf[11]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(OVVAL_CONFIG[1]));
    DFFRX1HVT OVVAL_CONFIG_0 (.CK(addr_in_iso_buf[11]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(OVVAL_CONFIG[0]));
    //OVSEL_CONFIG (1'h0)
    DFFRX1HVT OVSEL_CONFIG_0 (.CK(addr_in_iso_buf[11]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(OVSEL_CONFIG));

    // Inverted Signals
    INVX4HVT OVVAL_CONFIG_B_4 (.A(OVVAL_CONFIG[4]), .Y(OVVAL_CONFIG_B[4]));
    INVX4HVT OVVAL_CONFIG_B_3 (.A(OVVAL_CONFIG[3]), .Y(OVVAL_CONFIG_B[3]));
    INVX4HVT OVVAL_CONFIG_B_2 (.A(OVVAL_CONFIG[2]), .Y(OVVAL_CONFIG_B[2]));
    INVX4HVT OVVAL_CONFIG_B_1 (.A(OVVAL_CONFIG[1]), .Y(OVVAL_CONFIG_B[1]));
    INVX4HVT OVVAL_CONFIG_B_0 (.A(OVVAL_CONFIG[0]), .Y(OVVAL_CONFIG_B[0]));
    INVX4HVT OVSEL_CONFIG_B_0 (.A(OVSEL_CONFIG), .Y(OVSEL_CONFIG_B));

   //****************************************************
   // REGISTER 0x0C ( 12)
   //****************************************************
    //OVVAL_MONITOR_STATE (3'h0)
    DFFRX1HVT OVVAL_MONITOR_STATE_2 (.CK(addr_in_iso_buf[12]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(OVVAL_MONITOR_STATE[2]));
    DFFRX1HVT OVVAL_MONITOR_STATE_1 (.CK(addr_in_iso_buf[12]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(OVVAL_MONITOR_STATE[1]));
    DFFRX1HVT OVVAL_MONITOR_STATE_0 (.CK(addr_in_iso_buf[12]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(OVVAL_MONITOR_STATE[0]));
    //OVSEL_MONITOR_STATE (1'h0)
    DFFRX1HVT OVSEL_MONITOR_STATE_0 (.CK(addr_in_iso_buf[12]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(OVSEL_MONITOR_STATE));

    // Inverted Signals
    INVX4HVT OVVAL_MONITOR_STATE_B_2 (.A(OVVAL_MONITOR_STATE[2]), .Y(OVVAL_MONITOR_STATE_B[2]));
    INVX4HVT OVVAL_MONITOR_STATE_B_1 (.A(OVVAL_MONITOR_STATE[1]), .Y(OVVAL_MONITOR_STATE_B[1]));
    INVX4HVT OVVAL_MONITOR_STATE_B_0 (.A(OVVAL_MONITOR_STATE[0]), .Y(OVVAL_MONITOR_STATE_B[0]));
    INVX4HVT OVSEL_MONITOR_STATE_B_0 (.A(OVSEL_MONITOR_STATE), .Y(OVSEL_MONITOR_STATE_B));

   //****************************************************
   // REGISTER 0x0D ( 13)
   //****************************************************
    //OVVAL_COUNTER_STATE (3'h0)
    DFFRX1HVT OVVAL_COUNTER_STATE_2 (.CK(addr_in_iso_buf[13]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(OVVAL_COUNTER_STATE[2]));
    DFFRX1HVT OVVAL_COUNTER_STATE_1 (.CK(addr_in_iso_buf[13]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(OVVAL_COUNTER_STATE[1]));
    DFFRX1HVT OVVAL_COUNTER_STATE_0 (.CK(addr_in_iso_buf[13]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(OVVAL_COUNTER_STATE[0]));
    //OVSEL_COUNTER_STATE (1'h0)
    DFFRX1HVT OVSEL_COUNTER_STATE_0 (.CK(addr_in_iso_buf[13]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(OVSEL_COUNTER_STATE));

    // Inverted Signals
    INVX4HVT OVVAL_COUNTER_STATE_B_2 (.A(OVVAL_COUNTER_STATE[2]), .Y(OVVAL_COUNTER_STATE_B[2]));
    INVX4HVT OVVAL_COUNTER_STATE_B_1 (.A(OVVAL_COUNTER_STATE[1]), .Y(OVVAL_COUNTER_STATE_B[1]));
    INVX4HVT OVVAL_COUNTER_STATE_B_0 (.A(OVVAL_COUNTER_STATE[0]), .Y(OVVAL_COUNTER_STATE_B[0]));
    INVX4HVT OVSEL_COUNTER_STATE_B_0 (.A(OVSEL_COUNTER_STATE), .Y(OVSEL_COUNTER_STATE_B));

   //****************************************************
   // REGISTER 0x0E ( 14)
   //****************************************************
    //OVVAL_CTRL_ICHARGE_MUL (7'h00)
    DFFRX1HVT OVVAL_CTRL_ICHARGE_MUL_6 (.CK(addr_in_iso_buf[14]), .D(data_in_iso_buf[18]), .RN(RESETn), .Q(OVVAL_CTRL_ICHARGE_MUL[6]));
    DFFRX1HVT OVVAL_CTRL_ICHARGE_MUL_5 (.CK(addr_in_iso_buf[14]), .D(data_in_iso_buf[17]), .RN(RESETn), .Q(OVVAL_CTRL_ICHARGE_MUL[5]));
    DFFRX1HVT OVVAL_CTRL_ICHARGE_MUL_4 (.CK(addr_in_iso_buf[14]), .D(data_in_iso_buf[16]), .RN(RESETn), .Q(OVVAL_CTRL_ICHARGE_MUL[4]));
    DFFRX1HVT OVVAL_CTRL_ICHARGE_MUL_3 (.CK(addr_in_iso_buf[14]), .D(data_in_iso_buf[15]), .RN(RESETn), .Q(OVVAL_CTRL_ICHARGE_MUL[3]));
    DFFRX1HVT OVVAL_CTRL_ICHARGE_MUL_2 (.CK(addr_in_iso_buf[14]), .D(data_in_iso_buf[14]), .RN(RESETn), .Q(OVVAL_CTRL_ICHARGE_MUL[2]));
    DFFRX1HVT OVVAL_CTRL_ICHARGE_MUL_1 (.CK(addr_in_iso_buf[14]), .D(data_in_iso_buf[13]), .RN(RESETn), .Q(OVVAL_CTRL_ICHARGE_MUL[1]));
    DFFRX1HVT OVVAL_CTRL_ICHARGE_MUL_0 (.CK(addr_in_iso_buf[14]), .D(data_in_iso_buf[12]), .RN(RESETn), .Q(OVVAL_CTRL_ICHARGE_MUL[0]));
    //OVVAL_CTRLB_ICHARGE_DIV (3'h0)
    DFFRX1HVT OVVAL_CTRLB_ICHARGE_DIV_2 (.CK(addr_in_iso_buf[14]), .D(data_in_iso_buf[11]), .RN(RESETn), .Q(OVVAL_CTRLB_ICHARGE_DIV[2]));
    DFFRX1HVT OVVAL_CTRLB_ICHARGE_DIV_1 (.CK(addr_in_iso_buf[14]), .D(data_in_iso_buf[10]), .RN(RESETn), .Q(OVVAL_CTRLB_ICHARGE_DIV[1]));
    DFFRX1HVT OVVAL_CTRLB_ICHARGE_DIV_0 (.CK(addr_in_iso_buf[14]), .D(data_in_iso_buf[9]), .RN(RESETn), .Q(OVVAL_CTRLB_ICHARGE_DIV[0]));
    //OVVAL_CTRL_ICHARGE_DIV (7'h00)
    DFFRX1HVT OVVAL_CTRL_ICHARGE_DIV_6 (.CK(addr_in_iso_buf[14]), .D(data_in_iso_buf[8]), .RN(RESETn), .Q(OVVAL_CTRL_ICHARGE_DIV[6]));
    DFFRX1HVT OVVAL_CTRL_ICHARGE_DIV_5 (.CK(addr_in_iso_buf[14]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(OVVAL_CTRL_ICHARGE_DIV[5]));
    DFFRX1HVT OVVAL_CTRL_ICHARGE_DIV_4 (.CK(addr_in_iso_buf[14]), .D(data_in_iso_buf[6]), .RN(RESETn), .Q(OVVAL_CTRL_ICHARGE_DIV[4]));
    DFFRX1HVT OVVAL_CTRL_ICHARGE_DIV_3 (.CK(addr_in_iso_buf[14]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(OVVAL_CTRL_ICHARGE_DIV[3]));
    DFFRX1HVT OVVAL_CTRL_ICHARGE_DIV_2 (.CK(addr_in_iso_buf[14]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(OVVAL_CTRL_ICHARGE_DIV[2]));
    DFFRX1HVT OVVAL_CTRL_ICHARGE_DIV_1 (.CK(addr_in_iso_buf[14]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(OVVAL_CTRL_ICHARGE_DIV[1]));
    DFFRX1HVT OVVAL_CTRL_ICHARGE_DIV_0 (.CK(addr_in_iso_buf[14]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(OVVAL_CTRL_ICHARGE_DIV[0]));
    //OVVAL_CTRLB_ICHARGE_MUL_LOWLEAK (1'h0)
    DFFRX1HVT OVVAL_CTRLB_ICHARGE_MUL_LOWLEAK_0 (.CK(addr_in_iso_buf[14]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(OVVAL_CTRLB_ICHARGE_MUL_LOWLEAK));
    //OVVAL_CTRLB_ICHARGE_DIV_LOWLEAK (1'h0)
    DFFRX1HVT OVVAL_CTRLB_ICHARGE_DIV_LOWLEAK_0 (.CK(addr_in_iso_buf[14]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(OVVAL_CTRLB_ICHARGE_DIV_LOWLEAK));

    // Inverted Signals
    INVX4HVT OVVAL_CTRL_ICHARGE_MUL_B_6 (.A(OVVAL_CTRL_ICHARGE_MUL[6]), .Y(OVVAL_CTRL_ICHARGE_MUL_B[6]));
    INVX4HVT OVVAL_CTRL_ICHARGE_MUL_B_5 (.A(OVVAL_CTRL_ICHARGE_MUL[5]), .Y(OVVAL_CTRL_ICHARGE_MUL_B[5]));
    INVX4HVT OVVAL_CTRL_ICHARGE_MUL_B_4 (.A(OVVAL_CTRL_ICHARGE_MUL[4]), .Y(OVVAL_CTRL_ICHARGE_MUL_B[4]));
    INVX4HVT OVVAL_CTRL_ICHARGE_MUL_B_3 (.A(OVVAL_CTRL_ICHARGE_MUL[3]), .Y(OVVAL_CTRL_ICHARGE_MUL_B[3]));
    INVX4HVT OVVAL_CTRL_ICHARGE_MUL_B_2 (.A(OVVAL_CTRL_ICHARGE_MUL[2]), .Y(OVVAL_CTRL_ICHARGE_MUL_B[2]));
    INVX4HVT OVVAL_CTRL_ICHARGE_MUL_B_1 (.A(OVVAL_CTRL_ICHARGE_MUL[1]), .Y(OVVAL_CTRL_ICHARGE_MUL_B[1]));
    INVX4HVT OVVAL_CTRL_ICHARGE_MUL_B_0 (.A(OVVAL_CTRL_ICHARGE_MUL[0]), .Y(OVVAL_CTRL_ICHARGE_MUL_B[0]));
    INVX4HVT OVVAL_CTRLB_ICHARGE_DIV_B_2 (.A(OVVAL_CTRLB_ICHARGE_DIV[2]), .Y(OVVAL_CTRLB_ICHARGE_DIV_B[2]));
    INVX4HVT OVVAL_CTRLB_ICHARGE_DIV_B_1 (.A(OVVAL_CTRLB_ICHARGE_DIV[1]), .Y(OVVAL_CTRLB_ICHARGE_DIV_B[1]));
    INVX4HVT OVVAL_CTRLB_ICHARGE_DIV_B_0 (.A(OVVAL_CTRLB_ICHARGE_DIV[0]), .Y(OVVAL_CTRLB_ICHARGE_DIV_B[0]));
    INVX4HVT OVVAL_CTRL_ICHARGE_DIV_B_6 (.A(OVVAL_CTRL_ICHARGE_DIV[6]), .Y(OVVAL_CTRL_ICHARGE_DIV_B[6]));
    INVX4HVT OVVAL_CTRL_ICHARGE_DIV_B_5 (.A(OVVAL_CTRL_ICHARGE_DIV[5]), .Y(OVVAL_CTRL_ICHARGE_DIV_B[5]));
    INVX4HVT OVVAL_CTRL_ICHARGE_DIV_B_4 (.A(OVVAL_CTRL_ICHARGE_DIV[4]), .Y(OVVAL_CTRL_ICHARGE_DIV_B[4]));
    INVX4HVT OVVAL_CTRL_ICHARGE_DIV_B_3 (.A(OVVAL_CTRL_ICHARGE_DIV[3]), .Y(OVVAL_CTRL_ICHARGE_DIV_B[3]));
    INVX4HVT OVVAL_CTRL_ICHARGE_DIV_B_2 (.A(OVVAL_CTRL_ICHARGE_DIV[2]), .Y(OVVAL_CTRL_ICHARGE_DIV_B[2]));
    INVX4HVT OVVAL_CTRL_ICHARGE_DIV_B_1 (.A(OVVAL_CTRL_ICHARGE_DIV[1]), .Y(OVVAL_CTRL_ICHARGE_DIV_B[1]));
    INVX4HVT OVVAL_CTRL_ICHARGE_DIV_B_0 (.A(OVVAL_CTRL_ICHARGE_DIV[0]), .Y(OVVAL_CTRL_ICHARGE_DIV_B[0]));
    INVX4HVT OVVAL_CTRLB_ICHARGE_MUL_LOWLEAK_B_0 (.A(OVVAL_CTRLB_ICHARGE_MUL_LOWLEAK), .Y(OVVAL_CTRLB_ICHARGE_MUL_LOWLEAK_B));
    INVX4HVT OVVAL_CTRLB_ICHARGE_DIV_LOWLEAK_B_0 (.A(OVVAL_CTRLB_ICHARGE_DIV_LOWLEAK), .Y(OVVAL_CTRLB_ICHARGE_DIV_LOWLEAK_B));

   //****************************************************
   // REGISTER 0x0F ( 15)
   //****************************************************
    //OVSEL_CTRL_ICHARGE_MUL (1'h0)
    DFFRX1HVT OVSEL_CTRL_ICHARGE_MUL_0 (.CK(addr_in_iso_buf[15]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(OVSEL_CTRL_ICHARGE_MUL));
    //OVSEL_CTRLB_ICHARGE_DIV (1'h0)
    DFFRX1HVT OVSEL_CTRLB_ICHARGE_DIV_0 (.CK(addr_in_iso_buf[15]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(OVSEL_CTRLB_ICHARGE_DIV));
    //OVSEL_CTRL_ICHARGE_DIV (1'h0)
    DFFRX1HVT OVSEL_CTRL_ICHARGE_DIV_0 (.CK(addr_in_iso_buf[15]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(OVSEL_CTRL_ICHARGE_DIV));
    //OVSEL_CTRLB_ICHARGE_MUL_LOWLEAK (1'h0)
    DFFRX1HVT OVSEL_CTRLB_ICHARGE_MUL_LOWLEAK_0 (.CK(addr_in_iso_buf[15]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(OVSEL_CTRLB_ICHARGE_MUL_LOWLEAK));
    //OVSEL_CTRLB_ICHARGE_DIV_LOWLEAK (1'h0)
    DFFRX1HVT OVSEL_CTRLB_ICHARGE_DIV_LOWLEAK_0 (.CK(addr_in_iso_buf[15]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(OVSEL_CTRLB_ICHARGE_DIV_LOWLEAK));

    // Inverted Signals
    INVX4HVT OVSEL_CTRL_ICHARGE_MUL_B_0 (.A(OVSEL_CTRL_ICHARGE_MUL), .Y(OVSEL_CTRL_ICHARGE_MUL_B));
    INVX4HVT OVSEL_CTRLB_ICHARGE_DIV_B_0 (.A(OVSEL_CTRLB_ICHARGE_DIV), .Y(OVSEL_CTRLB_ICHARGE_DIV_B));
    INVX4HVT OVSEL_CTRL_ICHARGE_DIV_B_0 (.A(OVSEL_CTRL_ICHARGE_DIV), .Y(OVSEL_CTRL_ICHARGE_DIV_B));
    INVX4HVT OVSEL_CTRLB_ICHARGE_MUL_LOWLEAK_B_0 (.A(OVSEL_CTRLB_ICHARGE_MUL_LOWLEAK), .Y(OVSEL_CTRLB_ICHARGE_MUL_LOWLEAK_B));
    INVX4HVT OVSEL_CTRLB_ICHARGE_DIV_LOWLEAK_B_0 (.A(OVSEL_CTRLB_ICHARGE_DIV_LOWLEAK), .Y(OVSEL_CTRLB_ICHARGE_DIV_LOWLEAK_B));

   //****************************************************
   // REGISTER 0x10 ( 16)
   //****************************************************
    //DOUT_LOWER (24'h000000)
    //DFFRX1HVT DOUT_LOWER_23 (.CK(addr_in_iso_buf[16]), .D(data_in_iso_buf[23]), .RN(RESETn), .Q(DOUT_LOWER[23]));
    //DFFRX1HVT DOUT_LOWER_22 (.CK(addr_in_iso_buf[16]), .D(data_in_iso_buf[22]), .RN(RESETn), .Q(DOUT_LOWER[22]));
    //DFFRX1HVT DOUT_LOWER_21 (.CK(addr_in_iso_buf[16]), .D(data_in_iso_buf[21]), .RN(RESETn), .Q(DOUT_LOWER[21]));
    //DFFRX1HVT DOUT_LOWER_20 (.CK(addr_in_iso_buf[16]), .D(data_in_iso_buf[20]), .RN(RESETn), .Q(DOUT_LOWER[20]));
    //DFFRX1HVT DOUT_LOWER_19 (.CK(addr_in_iso_buf[16]), .D(data_in_iso_buf[19]), .RN(RESETn), .Q(DOUT_LOWER[19]));
    //DFFRX1HVT DOUT_LOWER_18 (.CK(addr_in_iso_buf[16]), .D(data_in_iso_buf[18]), .RN(RESETn), .Q(DOUT_LOWER[18]));
    //DFFRX1HVT DOUT_LOWER_17 (.CK(addr_in_iso_buf[16]), .D(data_in_iso_buf[17]), .RN(RESETn), .Q(DOUT_LOWER[17]));
    //DFFRX1HVT DOUT_LOWER_16 (.CK(addr_in_iso_buf[16]), .D(data_in_iso_buf[16]), .RN(RESETn), .Q(DOUT_LOWER[16]));
    //DFFRX1HVT DOUT_LOWER_15 (.CK(addr_in_iso_buf[16]), .D(data_in_iso_buf[15]), .RN(RESETn), .Q(DOUT_LOWER[15]));
    //DFFRX1HVT DOUT_LOWER_14 (.CK(addr_in_iso_buf[16]), .D(data_in_iso_buf[14]), .RN(RESETn), .Q(DOUT_LOWER[14]));
    //DFFRX1HVT DOUT_LOWER_13 (.CK(addr_in_iso_buf[16]), .D(data_in_iso_buf[13]), .RN(RESETn), .Q(DOUT_LOWER[13]));
    //DFFRX1HVT DOUT_LOWER_12 (.CK(addr_in_iso_buf[16]), .D(data_in_iso_buf[12]), .RN(RESETn), .Q(DOUT_LOWER[12]));
    //DFFRX1HVT DOUT_LOWER_11 (.CK(addr_in_iso_buf[16]), .D(data_in_iso_buf[11]), .RN(RESETn), .Q(DOUT_LOWER[11]));
    //DFFRX1HVT DOUT_LOWER_10 (.CK(addr_in_iso_buf[16]), .D(data_in_iso_buf[10]), .RN(RESETn), .Q(DOUT_LOWER[10]));
    //DFFRX1HVT DOUT_LOWER_9 (.CK(addr_in_iso_buf[16]), .D(data_in_iso_buf[9]), .RN(RESETn), .Q(DOUT_LOWER[9]));
    //DFFRX1HVT DOUT_LOWER_8 (.CK(addr_in_iso_buf[16]), .D(data_in_iso_buf[8]), .RN(RESETn), .Q(DOUT_LOWER[8]));
    //DFFRX1HVT DOUT_LOWER_7 (.CK(addr_in_iso_buf[16]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(DOUT_LOWER[7]));
    //DFFRX1HVT DOUT_LOWER_6 (.CK(addr_in_iso_buf[16]), .D(data_in_iso_buf[6]), .RN(RESETn), .Q(DOUT_LOWER[6]));
    //DFFRX1HVT DOUT_LOWER_5 (.CK(addr_in_iso_buf[16]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(DOUT_LOWER[5]));
    //DFFRX1HVT DOUT_LOWER_4 (.CK(addr_in_iso_buf[16]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(DOUT_LOWER[4]));
    //DFFRX1HVT DOUT_LOWER_3 (.CK(addr_in_iso_buf[16]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(DOUT_LOWER[3]));
    //DFFRX1HVT DOUT_LOWER_2 (.CK(addr_in_iso_buf[16]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(DOUT_LOWER[2]));
    //DFFRX1HVT DOUT_LOWER_1 (.CK(addr_in_iso_buf[16]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(DOUT_LOWER[1]));
    //DFFRX1HVT DOUT_LOWER_0 (.CK(addr_in_iso_buf[16]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(DOUT_LOWER[0]));

   //****************************************************
   // REGISTER 0x11 ( 17)
   //****************************************************
    //DOUT_OVERFLOW (1'h0)
    //DFFRX1HVT DOUT_OVERFLOW_0 (.CK(addr_in_iso_buf[17]), .D(data_in_iso_buf[23]), .RN(RESETn), .Q(DOUT_OVERFLOW));
    //DOUT_UPPER (23'h000000)
    //DFFRX1HVT DOUT_UPPER_22 (.CK(addr_in_iso_buf[17]), .D(data_in_iso_buf[22]), .RN(RESETn), .Q(DOUT_UPPER[22]));
    //DFFRX1HVT DOUT_UPPER_21 (.CK(addr_in_iso_buf[17]), .D(data_in_iso_buf[21]), .RN(RESETn), .Q(DOUT_UPPER[21]));
    //DFFRX1HVT DOUT_UPPER_20 (.CK(addr_in_iso_buf[17]), .D(data_in_iso_buf[20]), .RN(RESETn), .Q(DOUT_UPPER[20]));
    //DFFRX1HVT DOUT_UPPER_19 (.CK(addr_in_iso_buf[17]), .D(data_in_iso_buf[19]), .RN(RESETn), .Q(DOUT_UPPER[19]));
    //DFFRX1HVT DOUT_UPPER_18 (.CK(addr_in_iso_buf[17]), .D(data_in_iso_buf[18]), .RN(RESETn), .Q(DOUT_UPPER[18]));
    //DFFRX1HVT DOUT_UPPER_17 (.CK(addr_in_iso_buf[17]), .D(data_in_iso_buf[17]), .RN(RESETn), .Q(DOUT_UPPER[17]));
    //DFFRX1HVT DOUT_UPPER_16 (.CK(addr_in_iso_buf[17]), .D(data_in_iso_buf[16]), .RN(RESETn), .Q(DOUT_UPPER[16]));
    //DFFRX1HVT DOUT_UPPER_15 (.CK(addr_in_iso_buf[17]), .D(data_in_iso_buf[15]), .RN(RESETn), .Q(DOUT_UPPER[15]));
    //DFFRX1HVT DOUT_UPPER_14 (.CK(addr_in_iso_buf[17]), .D(data_in_iso_buf[14]), .RN(RESETn), .Q(DOUT_UPPER[14]));
    //DFFRX1HVT DOUT_UPPER_13 (.CK(addr_in_iso_buf[17]), .D(data_in_iso_buf[13]), .RN(RESETn), .Q(DOUT_UPPER[13]));
    //DFFRX1HVT DOUT_UPPER_12 (.CK(addr_in_iso_buf[17]), .D(data_in_iso_buf[12]), .RN(RESETn), .Q(DOUT_UPPER[12]));
    //DFFRX1HVT DOUT_UPPER_11 (.CK(addr_in_iso_buf[17]), .D(data_in_iso_buf[11]), .RN(RESETn), .Q(DOUT_UPPER[11]));
    //DFFRX1HVT DOUT_UPPER_10 (.CK(addr_in_iso_buf[17]), .D(data_in_iso_buf[10]), .RN(RESETn), .Q(DOUT_UPPER[10]));
    //DFFRX1HVT DOUT_UPPER_9 (.CK(addr_in_iso_buf[17]), .D(data_in_iso_buf[9]), .RN(RESETn), .Q(DOUT_UPPER[9]));
    //DFFRX1HVT DOUT_UPPER_8 (.CK(addr_in_iso_buf[17]), .D(data_in_iso_buf[8]), .RN(RESETn), .Q(DOUT_UPPER[8]));
    //DFFRX1HVT DOUT_UPPER_7 (.CK(addr_in_iso_buf[17]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(DOUT_UPPER[7]));
    //DFFRX1HVT DOUT_UPPER_6 (.CK(addr_in_iso_buf[17]), .D(data_in_iso_buf[6]), .RN(RESETn), .Q(DOUT_UPPER[6]));
    //DFFRX1HVT DOUT_UPPER_5 (.CK(addr_in_iso_buf[17]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(DOUT_UPPER[5]));
    //DFFRX1HVT DOUT_UPPER_4 (.CK(addr_in_iso_buf[17]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(DOUT_UPPER[4]));
    //DFFRX1HVT DOUT_UPPER_3 (.CK(addr_in_iso_buf[17]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(DOUT_UPPER[3]));
    //DFFRX1HVT DOUT_UPPER_2 (.CK(addr_in_iso_buf[17]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(DOUT_UPPER[2]));
    //DFFRX1HVT DOUT_UPPER_1 (.CK(addr_in_iso_buf[17]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(DOUT_UPPER[1]));
    //DFFRX1HVT DOUT_UPPER_0 (.CK(addr_in_iso_buf[17]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(DOUT_UPPER[0]));

   //****************************************************
   // REGISTER 0x12 ( 18)
   //****************************************************
    //LDC_CONFIG (5'h00)
    //DFFRX1HVT LDC_CONFIG_4 (.CK(addr_in_iso_buf[18]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(LDC_CONFIG[4]));
    //DFFRX1HVT LDC_CONFIG_3 (.CK(addr_in_iso_buf[18]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(LDC_CONFIG[3]));
    //DFFRX1HVT LDC_CONFIG_2 (.CK(addr_in_iso_buf[18]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(LDC_CONFIG[2]));
    //DFFRX1HVT LDC_CONFIG_1 (.CK(addr_in_iso_buf[18]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(LDC_CONFIG[1]));
    //DFFRX1HVT LDC_CONFIG_0 (.CK(addr_in_iso_buf[18]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(LDC_CONFIG[0]));

   //****************************************************
   // REGISTER 0x13 ( 19)
   //****************************************************
    //CTRL_ICHARGE_MUL (7'h00)
    //DFFRX1HVT CTRL_ICHARGE_MUL_6 (.CK(addr_in_iso_buf[19]), .D(data_in_iso_buf[18]), .RN(RESETn), .Q(CTRL_ICHARGE_MUL[6]));
    //DFFRX1HVT CTRL_ICHARGE_MUL_5 (.CK(addr_in_iso_buf[19]), .D(data_in_iso_buf[17]), .RN(RESETn), .Q(CTRL_ICHARGE_MUL[5]));
    //DFFRX1HVT CTRL_ICHARGE_MUL_4 (.CK(addr_in_iso_buf[19]), .D(data_in_iso_buf[16]), .RN(RESETn), .Q(CTRL_ICHARGE_MUL[4]));
    //DFFRX1HVT CTRL_ICHARGE_MUL_3 (.CK(addr_in_iso_buf[19]), .D(data_in_iso_buf[15]), .RN(RESETn), .Q(CTRL_ICHARGE_MUL[3]));
    //DFFRX1HVT CTRL_ICHARGE_MUL_2 (.CK(addr_in_iso_buf[19]), .D(data_in_iso_buf[14]), .RN(RESETn), .Q(CTRL_ICHARGE_MUL[2]));
    //DFFRX1HVT CTRL_ICHARGE_MUL_1 (.CK(addr_in_iso_buf[19]), .D(data_in_iso_buf[13]), .RN(RESETn), .Q(CTRL_ICHARGE_MUL[1]));
    //DFFRX1HVT CTRL_ICHARGE_MUL_0 (.CK(addr_in_iso_buf[19]), .D(data_in_iso_buf[12]), .RN(RESETn), .Q(CTRL_ICHARGE_MUL[0]));
    //CTRLB_ICHARGE_DIV (3'h0)
    //DFFRX1HVT CTRLB_ICHARGE_DIV_2 (.CK(addr_in_iso_buf[19]), .D(data_in_iso_buf[11]), .RN(RESETn), .Q(CTRLB_ICHARGE_DIV[2]));
    //DFFRX1HVT CTRLB_ICHARGE_DIV_1 (.CK(addr_in_iso_buf[19]), .D(data_in_iso_buf[10]), .RN(RESETn), .Q(CTRLB_ICHARGE_DIV[1]));
    //DFFRX1HVT CTRLB_ICHARGE_DIV_0 (.CK(addr_in_iso_buf[19]), .D(data_in_iso_buf[9]), .RN(RESETn), .Q(CTRLB_ICHARGE_DIV[0]));
    //CTRL_ICHARGE_DIV (7'h00)
    //DFFRX1HVT CTRL_ICHARGE_DIV_6 (.CK(addr_in_iso_buf[19]), .D(data_in_iso_buf[8]), .RN(RESETn), .Q(CTRL_ICHARGE_DIV[6]));
    //DFFRX1HVT CTRL_ICHARGE_DIV_5 (.CK(addr_in_iso_buf[19]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(CTRL_ICHARGE_DIV[5]));
    //DFFRX1HVT CTRL_ICHARGE_DIV_4 (.CK(addr_in_iso_buf[19]), .D(data_in_iso_buf[6]), .RN(RESETn), .Q(CTRL_ICHARGE_DIV[4]));
    //DFFRX1HVT CTRL_ICHARGE_DIV_3 (.CK(addr_in_iso_buf[19]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(CTRL_ICHARGE_DIV[3]));
    //DFFRX1HVT CTRL_ICHARGE_DIV_2 (.CK(addr_in_iso_buf[19]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(CTRL_ICHARGE_DIV[2]));
    //DFFRX1HVT CTRL_ICHARGE_DIV_1 (.CK(addr_in_iso_buf[19]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(CTRL_ICHARGE_DIV[1]));
    //DFFRX1HVT CTRL_ICHARGE_DIV_0 (.CK(addr_in_iso_buf[19]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(CTRL_ICHARGE_DIV[0]));
    //CTRLB_ICHARGE_MUL_LOWLEAK (1'h0)
    //DFFRX1HVT CTRLB_ICHARGE_MUL_LOWLEAK_0 (.CK(addr_in_iso_buf[19]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(CTRLB_ICHARGE_MUL_LOWLEAK));
    //CTRLB_ICHARGE_DIV_LOWLEAK (1'h0)
    //DFFRX1HVT CTRLB_ICHARGE_DIV_LOWLEAK_0 (.CK(addr_in_iso_buf[19]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(CTRLB_ICHARGE_DIV_LOWLEAK));

   //****************************************************
   // REGISTER 0x14 ( 20)
   //****************************************************
    //MONITOR_OVERFLOW (1'h0)
    //DFFRX1HVT MONITOR_OVERFLOW_0 (.CK(addr_in_iso_buf[20]), .D(data_in_iso_buf[12]), .RN(RESETn), .Q(MONITOR_OVERFLOW));
    //MONITOR (12'h000)
    //DFFRX1HVT MONITOR_11 (.CK(addr_in_iso_buf[20]), .D(data_in_iso_buf[11]), .RN(RESETn), .Q(MONITOR[11]));
    //DFFRX1HVT MONITOR_10 (.CK(addr_in_iso_buf[20]), .D(data_in_iso_buf[10]), .RN(RESETn), .Q(MONITOR[10]));
    //DFFRX1HVT MONITOR_9 (.CK(addr_in_iso_buf[20]), .D(data_in_iso_buf[9]), .RN(RESETn), .Q(MONITOR[9]));
    //DFFRX1HVT MONITOR_8 (.CK(addr_in_iso_buf[20]), .D(data_in_iso_buf[8]), .RN(RESETn), .Q(MONITOR[8]));
    //DFFRX1HVT MONITOR_7 (.CK(addr_in_iso_buf[20]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(MONITOR[7]));
    //DFFRX1HVT MONITOR_6 (.CK(addr_in_iso_buf[20]), .D(data_in_iso_buf[6]), .RN(RESETn), .Q(MONITOR[6]));
    //DFFRX1HVT MONITOR_5 (.CK(addr_in_iso_buf[20]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(MONITOR[5]));
    //DFFRX1HVT MONITOR_4 (.CK(addr_in_iso_buf[20]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(MONITOR[4]));
    //DFFRX1HVT MONITOR_3 (.CK(addr_in_iso_buf[20]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(MONITOR[3]));
    //DFFRX1HVT MONITOR_2 (.CK(addr_in_iso_buf[20]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(MONITOR[2]));
    //DFFRX1HVT MONITOR_1 (.CK(addr_in_iso_buf[20]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(MONITOR[1]));
    //DFFRX1HVT MONITOR_0 (.CK(addr_in_iso_buf[20]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(MONITOR[0]));

   //****************************************************
   // REGISTER 0x15 ( 21)
   //****************************************************
    //MONITOR_STATE (3'h0)
    //DFFRX1HVT MONITOR_STATE_2 (.CK(addr_in_iso_buf[21]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(MONITOR_STATE[2]));
    //DFFRX1HVT MONITOR_STATE_1 (.CK(addr_in_iso_buf[21]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(MONITOR_STATE[1]));
    //DFFRX1HVT MONITOR_STATE_0 (.CK(addr_in_iso_buf[21]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(MONITOR_STATE[0]));

   //****************************************************
   // REGISTER 0x16 ( 22)
   //****************************************************
    //COUNTER_STATE (3'h0)
    //DFFRX1HVT COUNTER_STATE_2 (.CK(addr_in_iso_buf[22]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(COUNTER_STATE[2]));
    //DFFRX1HVT COUNTER_STATE_1 (.CK(addr_in_iso_buf[22]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(COUNTER_STATE[1]));
    //DFFRX1HVT COUNTER_STATE_0 (.CK(addr_in_iso_buf[22]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(COUNTER_STATE[0]));

   //****************************************************
   // REGISTER 0x17 ( 23)
   //****************************************************
    //FDIV_CTRL_FREQ (4'h0)
    DFFRX1HVT FDIV_CTRL_FREQ_3 (.CK(addr_in_iso_buf[23]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(FDIV_CTRL_FREQ[3]));
    DFFRX1HVT FDIV_CTRL_FREQ_2 (.CK(addr_in_iso_buf[23]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(FDIV_CTRL_FREQ[2]));
    DFFRX1HVT FDIV_CTRL_FREQ_1 (.CK(addr_in_iso_buf[23]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(FDIV_CTRL_FREQ[1]));
    DFFRX1HVT FDIV_CTRL_FREQ_0 (.CK(addr_in_iso_buf[23]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(FDIV_CTRL_FREQ[0]));
    //FDIV_RESETN (1'h0)
    DFFRX1HVT FDIV_RESETN_0 (.CK(addr_in_iso_buf[23]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(FDIV_RESETN));

   //****************************************************
   // REGISTER 0x18 ( 24) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x19 ( 25) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x1A ( 26) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x1B ( 27) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x1C ( 28) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x1D ( 29) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x1E ( 30) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x1F ( 31) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x20 ( 32)
   //****************************************************
    //TMR_RESETB (1'h0)
    DFFRX1HVT TMR_RESETB_0 (.CK(addr_in_iso_buf[32]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(TMR_RESETB));
    //TMR_EN_OSC (1'h0)
    DFFRX1HVT TMR_EN_OSC_0 (.CK(addr_in_iso_buf[32]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(TMR_EN_OSC));
    //TMR_RESETB_DIV (1'h0)
    DFFRX1HVT TMR_RESETB_DIV_0 (.CK(addr_in_iso_buf[32]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(TMR_RESETB_DIV));
    //TMR_RESETB_DCDC (1'h0)
    DFFRX1HVT TMR_RESETB_DCDC_0 (.CK(addr_in_iso_buf[32]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(TMR_RESETB_DCDC));
    //TMR_EN_SELF_CLK (1'h0)
    DFFRX1HVT TMR_EN_SELF_CLK_0 (.CK(addr_in_iso_buf[32]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(TMR_EN_SELF_CLK));

   //****************************************************
   // REGISTER 0x21 ( 33)
   //****************************************************
    //TMR_SEL_CLK_DIV (1'h1)
    DFFSX1HVT TMR_SEL_CLK_DIV_0 (.CK(addr_in_iso_buf[33]), .D(data_in_iso_buf[23]), .SN(RESETn), .Q(TMR_SEL_CLK_DIV));
    //TMR_SEL_CLK_OSC (1'h1)
    DFFSX1HVT TMR_SEL_CLK_OSC_0 (.CK(addr_in_iso_buf[33]), .D(data_in_iso_buf[22]), .SN(RESETn), .Q(TMR_SEL_CLK_OSC));
    //TMR_SELF_EN (1'h1)
    DFFSX1HVT TMR_SELF_EN_0 (.CK(addr_in_iso_buf[33]), .D(data_in_iso_buf[21]), .SN(RESETn), .Q(TMR_SELF_EN));
    //TMR_IBIAS_REF (4'h4)
    DFFRX1HVT TMR_IBIAS_REF_3 (.CK(addr_in_iso_buf[33]), .D(data_in_iso_buf[20]), .RN(RESETn), .Q(TMR_IBIAS_REF[3]));
    DFFSX1HVT TMR_IBIAS_REF_2 (.CK(addr_in_iso_buf[33]), .D(data_in_iso_buf[19]), .SN(RESETn), .Q(TMR_IBIAS_REF[2]));
    DFFRX1HVT TMR_IBIAS_REF_1 (.CK(addr_in_iso_buf[33]), .D(data_in_iso_buf[18]), .RN(RESETn), .Q(TMR_IBIAS_REF[1]));
    DFFRX1HVT TMR_IBIAS_REF_0 (.CK(addr_in_iso_buf[33]), .D(data_in_iso_buf[17]), .RN(RESETn), .Q(TMR_IBIAS_REF[0]));
    //TMR_CASCODE_BOOST (1'h0)
    DFFRX1HVT TMR_CASCODE_BOOST_0 (.CK(addr_in_iso_buf[33]), .D(data_in_iso_buf[16]), .RN(RESETn), .Q(TMR_CASCODE_BOOST));
    //TMR_SEL_CAP (8'h08)
    DFFRX1HVT TMR_SEL_CAP_7 (.CK(addr_in_iso_buf[33]), .D(data_in_iso_buf[15]), .RN(RESETn), .Q(TMR_SEL_CAP[7]));
    DFFRX1HVT TMR_SEL_CAP_6 (.CK(addr_in_iso_buf[33]), .D(data_in_iso_buf[14]), .RN(RESETn), .Q(TMR_SEL_CAP[6]));
    DFFRX1HVT TMR_SEL_CAP_5 (.CK(addr_in_iso_buf[33]), .D(data_in_iso_buf[13]), .RN(RESETn), .Q(TMR_SEL_CAP[5]));
    DFFRX1HVT TMR_SEL_CAP_4 (.CK(addr_in_iso_buf[33]), .D(data_in_iso_buf[12]), .RN(RESETn), .Q(TMR_SEL_CAP[4]));
    DFFSX1HVT TMR_SEL_CAP_3 (.CK(addr_in_iso_buf[33]), .D(data_in_iso_buf[11]), .SN(RESETn), .Q(TMR_SEL_CAP[3]));
    DFFRX1HVT TMR_SEL_CAP_2 (.CK(addr_in_iso_buf[33]), .D(data_in_iso_buf[10]), .RN(RESETn), .Q(TMR_SEL_CAP[2]));
    DFFRX1HVT TMR_SEL_CAP_1 (.CK(addr_in_iso_buf[33]), .D(data_in_iso_buf[9]), .RN(RESETn), .Q(TMR_SEL_CAP[1]));
    DFFRX1HVT TMR_SEL_CAP_0 (.CK(addr_in_iso_buf[33]), .D(data_in_iso_buf[8]), .RN(RESETn), .Q(TMR_SEL_CAP[0]));
    //TMR_SEL_DCAP (6'h04)
    DFFRX1HVT TMR_SEL_DCAP_5 (.CK(addr_in_iso_buf[33]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(TMR_SEL_DCAP[5]));
    DFFRX1HVT TMR_SEL_DCAP_4 (.CK(addr_in_iso_buf[33]), .D(data_in_iso_buf[6]), .RN(RESETn), .Q(TMR_SEL_DCAP[4]));
    DFFRX1HVT TMR_SEL_DCAP_3 (.CK(addr_in_iso_buf[33]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(TMR_SEL_DCAP[3]));
    DFFSX1HVT TMR_SEL_DCAP_2 (.CK(addr_in_iso_buf[33]), .D(data_in_iso_buf[4]), .SN(RESETn), .Q(TMR_SEL_DCAP[2]));
    DFFRX1HVT TMR_SEL_DCAP_1 (.CK(addr_in_iso_buf[33]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(TMR_SEL_DCAP[1]));
    DFFRX1HVT TMR_SEL_DCAP_0 (.CK(addr_in_iso_buf[33]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(TMR_SEL_DCAP[0]));
    //TMR_EN_TUNE1 (1'h1)
    DFFSX1HVT TMR_EN_TUNE1_0 (.CK(addr_in_iso_buf[33]), .D(data_in_iso_buf[1]), .SN(RESETn), .Q(TMR_EN_TUNE1));
    //TMR_EN_TUNE2 (1'h1)
    DFFSX1HVT TMR_EN_TUNE2_0 (.CK(addr_in_iso_buf[33]), .D(data_in_iso_buf[0]), .SN(RESETn), .Q(TMR_EN_TUNE2));

   //****************************************************
   // REGISTER 0x22 ( 34)
   //****************************************************
    //TMR_S (3'h4)
    DFFSX1HVT TMR_S_2 (.CK(addr_in_iso_buf[34]), .D(data_in_iso_buf[23]), .SN(RESETn), .Q(TMR_S[2]));
    DFFRX1HVT TMR_S_1 (.CK(addr_in_iso_buf[34]), .D(data_in_iso_buf[22]), .RN(RESETn), .Q(TMR_S[1]));
    DFFRX1HVT TMR_S_0 (.CK(addr_in_iso_buf[34]), .D(data_in_iso_buf[21]), .RN(RESETn), .Q(TMR_S[0]));
    //TMR_DIFF_CON (14'h3FFB)
    DFFSX1HVT TMR_DIFF_CON_13 (.CK(addr_in_iso_buf[34]), .D(data_in_iso_buf[20]), .SN(RESETn), .Q(TMR_DIFF_CON[13]));
    DFFSX1HVT TMR_DIFF_CON_12 (.CK(addr_in_iso_buf[34]), .D(data_in_iso_buf[19]), .SN(RESETn), .Q(TMR_DIFF_CON[12]));
    DFFSX1HVT TMR_DIFF_CON_11 (.CK(addr_in_iso_buf[34]), .D(data_in_iso_buf[18]), .SN(RESETn), .Q(TMR_DIFF_CON[11]));
    DFFSX1HVT TMR_DIFF_CON_10 (.CK(addr_in_iso_buf[34]), .D(data_in_iso_buf[17]), .SN(RESETn), .Q(TMR_DIFF_CON[10]));
    DFFSX1HVT TMR_DIFF_CON_9 (.CK(addr_in_iso_buf[34]), .D(data_in_iso_buf[16]), .SN(RESETn), .Q(TMR_DIFF_CON[9]));
    DFFSX1HVT TMR_DIFF_CON_8 (.CK(addr_in_iso_buf[34]), .D(data_in_iso_buf[15]), .SN(RESETn), .Q(TMR_DIFF_CON[8]));
    DFFSX1HVT TMR_DIFF_CON_7 (.CK(addr_in_iso_buf[34]), .D(data_in_iso_buf[14]), .SN(RESETn), .Q(TMR_DIFF_CON[7]));
    DFFSX1HVT TMR_DIFF_CON_6 (.CK(addr_in_iso_buf[34]), .D(data_in_iso_buf[13]), .SN(RESETn), .Q(TMR_DIFF_CON[6]));
    DFFSX1HVT TMR_DIFF_CON_5 (.CK(addr_in_iso_buf[34]), .D(data_in_iso_buf[12]), .SN(RESETn), .Q(TMR_DIFF_CON[5]));
    DFFSX1HVT TMR_DIFF_CON_4 (.CK(addr_in_iso_buf[34]), .D(data_in_iso_buf[11]), .SN(RESETn), .Q(TMR_DIFF_CON[4]));
    DFFSX1HVT TMR_DIFF_CON_3 (.CK(addr_in_iso_buf[34]), .D(data_in_iso_buf[10]), .SN(RESETn), .Q(TMR_DIFF_CON[3]));
    DFFRX1HVT TMR_DIFF_CON_2 (.CK(addr_in_iso_buf[34]), .D(data_in_iso_buf[9]), .RN(RESETn), .Q(TMR_DIFF_CON[2]));
    DFFSX1HVT TMR_DIFF_CON_1 (.CK(addr_in_iso_buf[34]), .D(data_in_iso_buf[8]), .SN(RESETn), .Q(TMR_DIFF_CON[1]));
    DFFSX1HVT TMR_DIFF_CON_0 (.CK(addr_in_iso_buf[34]), .D(data_in_iso_buf[7]), .SN(RESETn), .Q(TMR_DIFF_CON[0]));
    //TMR_POLY_CON (1'h1)
    DFFSX1HVT TMR_POLY_CON_0 (.CK(addr_in_iso_buf[34]), .D(data_in_iso_buf[6]), .SN(RESETn), .Q(TMR_POLY_CON));
    //TMR_EN_TUNE1_RES (1'h1)
    DFFSX1HVT TMR_EN_TUNE1_RES_0 (.CK(addr_in_iso_buf[34]), .D(data_in_iso_buf[5]), .SN(RESETn), .Q(TMR_EN_TUNE1_RES));
    //TMR_EN_TUNE2_RES (1'h1)
    DFFSX1HVT TMR_EN_TUNE2_RES_0 (.CK(addr_in_iso_buf[34]), .D(data_in_iso_buf[4]), .SN(RESETn), .Q(TMR_EN_TUNE2_RES));
    //TMR_SAMPLE_EN (1'h1)
    DFFSX1HVT TMR_SAMPLE_EN_0 (.CK(addr_in_iso_buf[34]), .D(data_in_iso_buf[3]), .SN(RESETn), .Q(TMR_SAMPLE_EN));
    //TMR_AFC (3'h4)
    DFFSX1HVT TMR_AFC_2 (.CK(addr_in_iso_buf[34]), .D(data_in_iso_buf[2]), .SN(RESETn), .Q(TMR_AFC[2]));
    DFFRX1HVT TMR_AFC_1 (.CK(addr_in_iso_buf[34]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(TMR_AFC[1]));
    DFFRX1HVT TMR_AFC_0 (.CK(addr_in_iso_buf[34]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(TMR_AFC[0]));

   //****************************************************
   // REGISTER 0x23 ( 35) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x24 ( 36) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x25 ( 37) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x26 ( 38) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x27 ( 39) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x28 ( 40) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x29 ( 41) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x2A ( 42) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x2B ( 43) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x2C ( 44) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x2D ( 45) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x2E ( 46) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x2F ( 47) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x30 ( 48)
   //****************************************************
    //WAKEUP_ON_PEND_REQ (1'h0)
    DFFRX1HVT WAKEUP_ON_PEND_REQ_0 (.CK(addr_in_iso_buf[48]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(WAKEUP_ON_PEND_REQ));
    //MBUS_IGNORE_RX_FAIL (1'h1)
    DFFSX1HVT MBUS_IGNORE_RX_FAIL_0 (.CK(addr_in_iso_buf[48]), .D(data_in_iso_buf[4]), .SN(RESETn), .Q(MBUS_IGNORE_RX_FAIL));
    //CLKGEN_DIV (2'h2)
    DFFSX1HVT CLKGEN_DIV_1 (.CK(addr_in_iso_buf[48]), .D(data_in_iso_buf[3]), .SN(RESETn), .Q(CLKGEN_DIV[1]));
    DFFRX1HVT CLKGEN_DIV_0 (.CK(addr_in_iso_buf[48]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(CLKGEN_DIV[0]));
    //CLKGEN_RING (2'h1)
    DFFRX1HVT CLKGEN_RING_1 (.CK(addr_in_iso_buf[48]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(CLKGEN_RING[1]));
    DFFSX1HVT CLKGEN_RING_0 (.CK(addr_in_iso_buf[48]), .D(data_in_iso_buf[0]), .SN(RESETn), .Q(CLKGEN_RING[0]));

   //****************************************************
   // REGISTER 0x31 ( 49)
   //****************************************************
    //LDC_IRQ_SHORT_ADDR (8'h10)
    DFFRX1HVT LDC_IRQ_SHORT_ADDR_7 (.CK(addr_in_iso_buf[49]), .D(data_in_iso_buf[15]), .RN(RESETn), .Q(LDC_IRQ_SHORT_ADDR[7]));
    DFFRX1HVT LDC_IRQ_SHORT_ADDR_6 (.CK(addr_in_iso_buf[49]), .D(data_in_iso_buf[14]), .RN(RESETn), .Q(LDC_IRQ_SHORT_ADDR[6]));
    DFFRX1HVT LDC_IRQ_SHORT_ADDR_5 (.CK(addr_in_iso_buf[49]), .D(data_in_iso_buf[13]), .RN(RESETn), .Q(LDC_IRQ_SHORT_ADDR[5]));
    DFFSX1HVT LDC_IRQ_SHORT_ADDR_4 (.CK(addr_in_iso_buf[49]), .D(data_in_iso_buf[12]), .SN(RESETn), .Q(LDC_IRQ_SHORT_ADDR[4]));
    DFFRX1HVT LDC_IRQ_SHORT_ADDR_3 (.CK(addr_in_iso_buf[49]), .D(data_in_iso_buf[11]), .RN(RESETn), .Q(LDC_IRQ_SHORT_ADDR[3]));
    DFFRX1HVT LDC_IRQ_SHORT_ADDR_2 (.CK(addr_in_iso_buf[49]), .D(data_in_iso_buf[10]), .RN(RESETn), .Q(LDC_IRQ_SHORT_ADDR[2]));
    DFFRX1HVT LDC_IRQ_SHORT_ADDR_1 (.CK(addr_in_iso_buf[49]), .D(data_in_iso_buf[9]), .RN(RESETn), .Q(LDC_IRQ_SHORT_ADDR[1]));
    DFFRX1HVT LDC_IRQ_SHORT_ADDR_0 (.CK(addr_in_iso_buf[49]), .D(data_in_iso_buf[8]), .RN(RESETn), .Q(LDC_IRQ_SHORT_ADDR[0]));
    //LDC_IRQ_REG_ADDR (8'h00)
    DFFRX1HVT LDC_IRQ_REG_ADDR_7 (.CK(addr_in_iso_buf[49]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(LDC_IRQ_REG_ADDR[7]));
    DFFRX1HVT LDC_IRQ_REG_ADDR_6 (.CK(addr_in_iso_buf[49]), .D(data_in_iso_buf[6]), .RN(RESETn), .Q(LDC_IRQ_REG_ADDR[6]));
    DFFRX1HVT LDC_IRQ_REG_ADDR_5 (.CK(addr_in_iso_buf[49]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(LDC_IRQ_REG_ADDR[5]));
    DFFRX1HVT LDC_IRQ_REG_ADDR_4 (.CK(addr_in_iso_buf[49]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(LDC_IRQ_REG_ADDR[4]));
    DFFRX1HVT LDC_IRQ_REG_ADDR_3 (.CK(addr_in_iso_buf[49]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(LDC_IRQ_REG_ADDR[3]));
    DFFRX1HVT LDC_IRQ_REG_ADDR_2 (.CK(addr_in_iso_buf[49]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(LDC_IRQ_REG_ADDR[2]));
    DFFRX1HVT LDC_IRQ_REG_ADDR_1 (.CK(addr_in_iso_buf[49]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(LDC_IRQ_REG_ADDR[1]));
    DFFRX1HVT LDC_IRQ_REG_ADDR_0 (.CK(addr_in_iso_buf[49]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(LDC_IRQ_REG_ADDR[0]));

   //****************************************************
   // REGISTER 0x32 ( 50)
   //****************************************************
    //LDC_IRQ_START_REG_ADDR (8'h10)
    DFFRX1HVT LDC_IRQ_START_REG_ADDR_7 (.CK(addr_in_iso_buf[50]), .D(data_in_iso_buf[15]), .RN(RESETn), .Q(LDC_IRQ_START_REG_ADDR[7]));
    DFFRX1HVT LDC_IRQ_START_REG_ADDR_6 (.CK(addr_in_iso_buf[50]), .D(data_in_iso_buf[14]), .RN(RESETn), .Q(LDC_IRQ_START_REG_ADDR[6]));
    DFFRX1HVT LDC_IRQ_START_REG_ADDR_5 (.CK(addr_in_iso_buf[50]), .D(data_in_iso_buf[13]), .RN(RESETn), .Q(LDC_IRQ_START_REG_ADDR[5]));
    DFFSX1HVT LDC_IRQ_START_REG_ADDR_4 (.CK(addr_in_iso_buf[50]), .D(data_in_iso_buf[12]), .SN(RESETn), .Q(LDC_IRQ_START_REG_ADDR[4]));
    DFFRX1HVT LDC_IRQ_START_REG_ADDR_3 (.CK(addr_in_iso_buf[50]), .D(data_in_iso_buf[11]), .RN(RESETn), .Q(LDC_IRQ_START_REG_ADDR[3]));
    DFFRX1HVT LDC_IRQ_START_REG_ADDR_2 (.CK(addr_in_iso_buf[50]), .D(data_in_iso_buf[10]), .RN(RESETn), .Q(LDC_IRQ_START_REG_ADDR[2]));
    DFFRX1HVT LDC_IRQ_START_REG_ADDR_1 (.CK(addr_in_iso_buf[50]), .D(data_in_iso_buf[9]), .RN(RESETn), .Q(LDC_IRQ_START_REG_ADDR[1]));
    DFFRX1HVT LDC_IRQ_START_REG_ADDR_0 (.CK(addr_in_iso_buf[50]), .D(data_in_iso_buf[8]), .RN(RESETn), .Q(LDC_IRQ_START_REG_ADDR[0]));
    //LDC_IRQ_NUM_REG_1 (8'h01)
    DFFRX1HVT LDC_IRQ_NUM_REG_1_7 (.CK(addr_in_iso_buf[50]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(LDC_IRQ_NUM_REG_1[7]));
    DFFRX1HVT LDC_IRQ_NUM_REG_1_6 (.CK(addr_in_iso_buf[50]), .D(data_in_iso_buf[6]), .RN(RESETn), .Q(LDC_IRQ_NUM_REG_1[6]));
    DFFRX1HVT LDC_IRQ_NUM_REG_1_5 (.CK(addr_in_iso_buf[50]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(LDC_IRQ_NUM_REG_1[5]));
    DFFRX1HVT LDC_IRQ_NUM_REG_1_4 (.CK(addr_in_iso_buf[50]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(LDC_IRQ_NUM_REG_1[4]));
    DFFRX1HVT LDC_IRQ_NUM_REG_1_3 (.CK(addr_in_iso_buf[50]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(LDC_IRQ_NUM_REG_1[3]));
    DFFRX1HVT LDC_IRQ_NUM_REG_1_2 (.CK(addr_in_iso_buf[50]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(LDC_IRQ_NUM_REG_1[2]));
    DFFRX1HVT LDC_IRQ_NUM_REG_1_1 (.CK(addr_in_iso_buf[50]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(LDC_IRQ_NUM_REG_1[1]));
    DFFSX1HVT LDC_IRQ_NUM_REG_1_0 (.CK(addr_in_iso_buf[50]), .D(data_in_iso_buf[0]), .SN(RESETn), .Q(LDC_IRQ_NUM_REG_1[0]));

   //****************************************************
   // REGISTER 0x33 ( 51) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x34 ( 52) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x35 ( 53) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x36 ( 54) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x37 ( 55) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x38 ( 56) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x39 ( 57) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x3A ( 58) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x3B ( 59) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x3C ( 60) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x3D ( 61) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x3E ( 62) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x3F ( 63) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x40 ( 64)
   //****************************************************
    //WUP_ENABLE (1'h0)
    DFFRX1HVT WUP_ENABLE_0 (.CK(addr_in_iso_buf[64]), .D(data_in_iso_buf[23]), .RN(RESETn), .Q(WUP_ENABLE));
    //WUP_LC_IRQ_EN (1'h1)
    DFFSX1HVT WUP_LC_IRQ_EN_0 (.CK(addr_in_iso_buf[64]), .D(data_in_iso_buf[22]), .SN(RESETn), .Q(WUP_LC_IRQ_EN));
    //WUP_AUTO_RESET (1'h1)
    DFFSX1HVT WUP_AUTO_RESET_0 (.CK(addr_in_iso_buf[64]), .D(data_in_iso_buf[21]), .SN(RESETn), .Q(WUP_AUTO_RESET));
    //WUP_ENABLE_CLK_SLP_OUT (1'h0)
    DFFRX1HVT WUP_ENABLE_CLK_SLP_OUT_0 (.CK(addr_in_iso_buf[64]), .D(data_in_iso_buf[19]), .RN(RESETn), .Q(WUP_ENABLE_CLK_SLP_OUT));

   //****************************************************
   // REGISTER 0x41 ( 65)
   //****************************************************
    //WUP_THRESHOLD_EXT (8'h00)
    DFFRX1HVT WUP_THRESHOLD_EXT_7 (.CK(addr_in_iso_buf[65]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(WUP_THRESHOLD_EXT[7]));
    DFFRX1HVT WUP_THRESHOLD_EXT_6 (.CK(addr_in_iso_buf[65]), .D(data_in_iso_buf[6]), .RN(RESETn), .Q(WUP_THRESHOLD_EXT[6]));
    DFFRX1HVT WUP_THRESHOLD_EXT_5 (.CK(addr_in_iso_buf[65]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(WUP_THRESHOLD_EXT[5]));
    DFFRX1HVT WUP_THRESHOLD_EXT_4 (.CK(addr_in_iso_buf[65]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(WUP_THRESHOLD_EXT[4]));
    DFFRX1HVT WUP_THRESHOLD_EXT_3 (.CK(addr_in_iso_buf[65]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(WUP_THRESHOLD_EXT[3]));
    DFFRX1HVT WUP_THRESHOLD_EXT_2 (.CK(addr_in_iso_buf[65]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(WUP_THRESHOLD_EXT[2]));
    DFFRX1HVT WUP_THRESHOLD_EXT_1 (.CK(addr_in_iso_buf[65]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(WUP_THRESHOLD_EXT[1]));
    DFFRX1HVT WUP_THRESHOLD_EXT_0 (.CK(addr_in_iso_buf[65]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(WUP_THRESHOLD_EXT[0]));

   //****************************************************
   // REGISTER 0x42 ( 66)
   //****************************************************
    //WUP_THRESHOLD (24'h2DC6C0)
    DFFRX1HVT WUP_THRESHOLD_23 (.CK(addr_in_iso_buf[66]), .D(data_in_iso_buf[23]), .RN(RESETn), .Q(WUP_THRESHOLD[23]));
    DFFRX1HVT WUP_THRESHOLD_22 (.CK(addr_in_iso_buf[66]), .D(data_in_iso_buf[22]), .RN(RESETn), .Q(WUP_THRESHOLD[22]));
    DFFSX1HVT WUP_THRESHOLD_21 (.CK(addr_in_iso_buf[66]), .D(data_in_iso_buf[21]), .SN(RESETn), .Q(WUP_THRESHOLD[21]));
    DFFRX1HVT WUP_THRESHOLD_20 (.CK(addr_in_iso_buf[66]), .D(data_in_iso_buf[20]), .RN(RESETn), .Q(WUP_THRESHOLD[20]));
    DFFSX1HVT WUP_THRESHOLD_19 (.CK(addr_in_iso_buf[66]), .D(data_in_iso_buf[19]), .SN(RESETn), .Q(WUP_THRESHOLD[19]));
    DFFSX1HVT WUP_THRESHOLD_18 (.CK(addr_in_iso_buf[66]), .D(data_in_iso_buf[18]), .SN(RESETn), .Q(WUP_THRESHOLD[18]));
    DFFRX1HVT WUP_THRESHOLD_17 (.CK(addr_in_iso_buf[66]), .D(data_in_iso_buf[17]), .RN(RESETn), .Q(WUP_THRESHOLD[17]));
    DFFSX1HVT WUP_THRESHOLD_16 (.CK(addr_in_iso_buf[66]), .D(data_in_iso_buf[16]), .SN(RESETn), .Q(WUP_THRESHOLD[16]));
    DFFSX1HVT WUP_THRESHOLD_15 (.CK(addr_in_iso_buf[66]), .D(data_in_iso_buf[15]), .SN(RESETn), .Q(WUP_THRESHOLD[15]));
    DFFSX1HVT WUP_THRESHOLD_14 (.CK(addr_in_iso_buf[66]), .D(data_in_iso_buf[14]), .SN(RESETn), .Q(WUP_THRESHOLD[14]));
    DFFRX1HVT WUP_THRESHOLD_13 (.CK(addr_in_iso_buf[66]), .D(data_in_iso_buf[13]), .RN(RESETn), .Q(WUP_THRESHOLD[13]));
    DFFRX1HVT WUP_THRESHOLD_12 (.CK(addr_in_iso_buf[66]), .D(data_in_iso_buf[12]), .RN(RESETn), .Q(WUP_THRESHOLD[12]));
    DFFRX1HVT WUP_THRESHOLD_11 (.CK(addr_in_iso_buf[66]), .D(data_in_iso_buf[11]), .RN(RESETn), .Q(WUP_THRESHOLD[11]));
    DFFSX1HVT WUP_THRESHOLD_10 (.CK(addr_in_iso_buf[66]), .D(data_in_iso_buf[10]), .SN(RESETn), .Q(WUP_THRESHOLD[10]));
    DFFSX1HVT WUP_THRESHOLD_9 (.CK(addr_in_iso_buf[66]), .D(data_in_iso_buf[9]), .SN(RESETn), .Q(WUP_THRESHOLD[9]));
    DFFRX1HVT WUP_THRESHOLD_8 (.CK(addr_in_iso_buf[66]), .D(data_in_iso_buf[8]), .RN(RESETn), .Q(WUP_THRESHOLD[8]));
    DFFSX1HVT WUP_THRESHOLD_7 (.CK(addr_in_iso_buf[66]), .D(data_in_iso_buf[7]), .SN(RESETn), .Q(WUP_THRESHOLD[7]));
    DFFSX1HVT WUP_THRESHOLD_6 (.CK(addr_in_iso_buf[66]), .D(data_in_iso_buf[6]), .SN(RESETn), .Q(WUP_THRESHOLD[6]));
    DFFRX1HVT WUP_THRESHOLD_5 (.CK(addr_in_iso_buf[66]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(WUP_THRESHOLD[5]));
    DFFRX1HVT WUP_THRESHOLD_4 (.CK(addr_in_iso_buf[66]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(WUP_THRESHOLD[4]));
    DFFRX1HVT WUP_THRESHOLD_3 (.CK(addr_in_iso_buf[66]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(WUP_THRESHOLD[3]));
    DFFRX1HVT WUP_THRESHOLD_2 (.CK(addr_in_iso_buf[66]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(WUP_THRESHOLD[2]));
    DFFRX1HVT WUP_THRESHOLD_1 (.CK(addr_in_iso_buf[66]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(WUP_THRESHOLD[1]));
    DFFRX1HVT WUP_THRESHOLD_0 (.CK(addr_in_iso_buf[66]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(WUP_THRESHOLD[0]));

   //****************************************************
   // REGISTER 0x43 ( 67)
   //****************************************************
    //WUP_CNT_VALUE_EXT (8'h00)
    //DFFRX1HVT WUP_CNT_VALUE_EXT_7 (.CK(addr_in_iso_buf[67]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(WUP_CNT_VALUE_EXT[7]));
    //DFFRX1HVT WUP_CNT_VALUE_EXT_6 (.CK(addr_in_iso_buf[67]), .D(data_in_iso_buf[6]), .RN(RESETn), .Q(WUP_CNT_VALUE_EXT[6]));
    //DFFRX1HVT WUP_CNT_VALUE_EXT_5 (.CK(addr_in_iso_buf[67]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(WUP_CNT_VALUE_EXT[5]));
    //DFFRX1HVT WUP_CNT_VALUE_EXT_4 (.CK(addr_in_iso_buf[67]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(WUP_CNT_VALUE_EXT[4]));
    //DFFRX1HVT WUP_CNT_VALUE_EXT_3 (.CK(addr_in_iso_buf[67]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(WUP_CNT_VALUE_EXT[3]));
    //DFFRX1HVT WUP_CNT_VALUE_EXT_2 (.CK(addr_in_iso_buf[67]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(WUP_CNT_VALUE_EXT[2]));
    //DFFRX1HVT WUP_CNT_VALUE_EXT_1 (.CK(addr_in_iso_buf[67]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(WUP_CNT_VALUE_EXT[1]));
    //DFFRX1HVT WUP_CNT_VALUE_EXT_0 (.CK(addr_in_iso_buf[67]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(WUP_CNT_VALUE_EXT[0]));

   //****************************************************
   // REGISTER 0x44 ( 68)
   //****************************************************
    //WUP_CNT_VALUE (24'h000000)
    //DFFRX1HVT WUP_CNT_VALUE_23 (.CK(addr_in_iso_buf[68]), .D(data_in_iso_buf[23]), .RN(RESETn), .Q(WUP_CNT_VALUE[23]));
    //DFFRX1HVT WUP_CNT_VALUE_22 (.CK(addr_in_iso_buf[68]), .D(data_in_iso_buf[22]), .RN(RESETn), .Q(WUP_CNT_VALUE[22]));
    //DFFRX1HVT WUP_CNT_VALUE_21 (.CK(addr_in_iso_buf[68]), .D(data_in_iso_buf[21]), .RN(RESETn), .Q(WUP_CNT_VALUE[21]));
    //DFFRX1HVT WUP_CNT_VALUE_20 (.CK(addr_in_iso_buf[68]), .D(data_in_iso_buf[20]), .RN(RESETn), .Q(WUP_CNT_VALUE[20]));
    //DFFRX1HVT WUP_CNT_VALUE_19 (.CK(addr_in_iso_buf[68]), .D(data_in_iso_buf[19]), .RN(RESETn), .Q(WUP_CNT_VALUE[19]));
    //DFFRX1HVT WUP_CNT_VALUE_18 (.CK(addr_in_iso_buf[68]), .D(data_in_iso_buf[18]), .RN(RESETn), .Q(WUP_CNT_VALUE[18]));
    //DFFRX1HVT WUP_CNT_VALUE_17 (.CK(addr_in_iso_buf[68]), .D(data_in_iso_buf[17]), .RN(RESETn), .Q(WUP_CNT_VALUE[17]));
    //DFFRX1HVT WUP_CNT_VALUE_16 (.CK(addr_in_iso_buf[68]), .D(data_in_iso_buf[16]), .RN(RESETn), .Q(WUP_CNT_VALUE[16]));
    //DFFRX1HVT WUP_CNT_VALUE_15 (.CK(addr_in_iso_buf[68]), .D(data_in_iso_buf[15]), .RN(RESETn), .Q(WUP_CNT_VALUE[15]));
    //DFFRX1HVT WUP_CNT_VALUE_14 (.CK(addr_in_iso_buf[68]), .D(data_in_iso_buf[14]), .RN(RESETn), .Q(WUP_CNT_VALUE[14]));
    //DFFRX1HVT WUP_CNT_VALUE_13 (.CK(addr_in_iso_buf[68]), .D(data_in_iso_buf[13]), .RN(RESETn), .Q(WUP_CNT_VALUE[13]));
    //DFFRX1HVT WUP_CNT_VALUE_12 (.CK(addr_in_iso_buf[68]), .D(data_in_iso_buf[12]), .RN(RESETn), .Q(WUP_CNT_VALUE[12]));
    //DFFRX1HVT WUP_CNT_VALUE_11 (.CK(addr_in_iso_buf[68]), .D(data_in_iso_buf[11]), .RN(RESETn), .Q(WUP_CNT_VALUE[11]));
    //DFFRX1HVT WUP_CNT_VALUE_10 (.CK(addr_in_iso_buf[68]), .D(data_in_iso_buf[10]), .RN(RESETn), .Q(WUP_CNT_VALUE[10]));
    //DFFRX1HVT WUP_CNT_VALUE_9 (.CK(addr_in_iso_buf[68]), .D(data_in_iso_buf[9]), .RN(RESETn), .Q(WUP_CNT_VALUE[9]));
    //DFFRX1HVT WUP_CNT_VALUE_8 (.CK(addr_in_iso_buf[68]), .D(data_in_iso_buf[8]), .RN(RESETn), .Q(WUP_CNT_VALUE[8]));
    //DFFRX1HVT WUP_CNT_VALUE_7 (.CK(addr_in_iso_buf[68]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(WUP_CNT_VALUE[7]));
    //DFFRX1HVT WUP_CNT_VALUE_6 (.CK(addr_in_iso_buf[68]), .D(data_in_iso_buf[6]), .RN(RESETn), .Q(WUP_CNT_VALUE[6]));
    //DFFRX1HVT WUP_CNT_VALUE_5 (.CK(addr_in_iso_buf[68]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(WUP_CNT_VALUE[5]));
    //DFFRX1HVT WUP_CNT_VALUE_4 (.CK(addr_in_iso_buf[68]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(WUP_CNT_VALUE[4]));
    //DFFRX1HVT WUP_CNT_VALUE_3 (.CK(addr_in_iso_buf[68]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(WUP_CNT_VALUE[3]));
    //DFFRX1HVT WUP_CNT_VALUE_2 (.CK(addr_in_iso_buf[68]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(WUP_CNT_VALUE[2]));
    //DFFRX1HVT WUP_CNT_VALUE_1 (.CK(addr_in_iso_buf[68]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(WUP_CNT_VALUE[1]));
    //DFFRX1HVT WUP_CNT_VALUE_0 (.CK(addr_in_iso_buf[68]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(WUP_CNT_VALUE[0]));

   //****************************************************
   // REGISTER 0x45 ( 69)
   //****************************************************
    //WUP_IRQ_PAYLOAD (24'h025001)
    DFFRX1HVT WUP_IRQ_PAYLOAD_23 (.CK(addr_in_iso_buf[69]), .D(data_in_iso_buf[23]), .RN(RESETn), .Q(WUP_IRQ_PAYLOAD[23]));
    DFFRX1HVT WUP_IRQ_PAYLOAD_22 (.CK(addr_in_iso_buf[69]), .D(data_in_iso_buf[22]), .RN(RESETn), .Q(WUP_IRQ_PAYLOAD[22]));
    DFFRX1HVT WUP_IRQ_PAYLOAD_21 (.CK(addr_in_iso_buf[69]), .D(data_in_iso_buf[21]), .RN(RESETn), .Q(WUP_IRQ_PAYLOAD[21]));
    DFFRX1HVT WUP_IRQ_PAYLOAD_20 (.CK(addr_in_iso_buf[69]), .D(data_in_iso_buf[20]), .RN(RESETn), .Q(WUP_IRQ_PAYLOAD[20]));
    DFFRX1HVT WUP_IRQ_PAYLOAD_19 (.CK(addr_in_iso_buf[69]), .D(data_in_iso_buf[19]), .RN(RESETn), .Q(WUP_IRQ_PAYLOAD[19]));
    DFFRX1HVT WUP_IRQ_PAYLOAD_18 (.CK(addr_in_iso_buf[69]), .D(data_in_iso_buf[18]), .RN(RESETn), .Q(WUP_IRQ_PAYLOAD[18]));
    DFFSX1HVT WUP_IRQ_PAYLOAD_17 (.CK(addr_in_iso_buf[69]), .D(data_in_iso_buf[17]), .SN(RESETn), .Q(WUP_IRQ_PAYLOAD[17]));
    DFFRX1HVT WUP_IRQ_PAYLOAD_16 (.CK(addr_in_iso_buf[69]), .D(data_in_iso_buf[16]), .RN(RESETn), .Q(WUP_IRQ_PAYLOAD[16]));
    DFFRX1HVT WUP_IRQ_PAYLOAD_15 (.CK(addr_in_iso_buf[69]), .D(data_in_iso_buf[15]), .RN(RESETn), .Q(WUP_IRQ_PAYLOAD[15]));
    DFFSX1HVT WUP_IRQ_PAYLOAD_14 (.CK(addr_in_iso_buf[69]), .D(data_in_iso_buf[14]), .SN(RESETn), .Q(WUP_IRQ_PAYLOAD[14]));
    DFFRX1HVT WUP_IRQ_PAYLOAD_13 (.CK(addr_in_iso_buf[69]), .D(data_in_iso_buf[13]), .RN(RESETn), .Q(WUP_IRQ_PAYLOAD[13]));
    DFFSX1HVT WUP_IRQ_PAYLOAD_12 (.CK(addr_in_iso_buf[69]), .D(data_in_iso_buf[12]), .SN(RESETn), .Q(WUP_IRQ_PAYLOAD[12]));
    DFFRX1HVT WUP_IRQ_PAYLOAD_11 (.CK(addr_in_iso_buf[69]), .D(data_in_iso_buf[11]), .RN(RESETn), .Q(WUP_IRQ_PAYLOAD[11]));
    DFFRX1HVT WUP_IRQ_PAYLOAD_10 (.CK(addr_in_iso_buf[69]), .D(data_in_iso_buf[10]), .RN(RESETn), .Q(WUP_IRQ_PAYLOAD[10]));
    DFFRX1HVT WUP_IRQ_PAYLOAD_9 (.CK(addr_in_iso_buf[69]), .D(data_in_iso_buf[9]), .RN(RESETn), .Q(WUP_IRQ_PAYLOAD[9]));
    DFFRX1HVT WUP_IRQ_PAYLOAD_8 (.CK(addr_in_iso_buf[69]), .D(data_in_iso_buf[8]), .RN(RESETn), .Q(WUP_IRQ_PAYLOAD[8]));
    DFFRX1HVT WUP_IRQ_PAYLOAD_7 (.CK(addr_in_iso_buf[69]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(WUP_IRQ_PAYLOAD[7]));
    DFFRX1HVT WUP_IRQ_PAYLOAD_6 (.CK(addr_in_iso_buf[69]), .D(data_in_iso_buf[6]), .RN(RESETn), .Q(WUP_IRQ_PAYLOAD[6]));
    DFFRX1HVT WUP_IRQ_PAYLOAD_5 (.CK(addr_in_iso_buf[69]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(WUP_IRQ_PAYLOAD[5]));
    DFFRX1HVT WUP_IRQ_PAYLOAD_4 (.CK(addr_in_iso_buf[69]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(WUP_IRQ_PAYLOAD[4]));
    DFFRX1HVT WUP_IRQ_PAYLOAD_3 (.CK(addr_in_iso_buf[69]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(WUP_IRQ_PAYLOAD[3]));
    DFFRX1HVT WUP_IRQ_PAYLOAD_2 (.CK(addr_in_iso_buf[69]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(WUP_IRQ_PAYLOAD[2]));
    DFFRX1HVT WUP_IRQ_PAYLOAD_1 (.CK(addr_in_iso_buf[69]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(WUP_IRQ_PAYLOAD[1]));
    DFFSX1HVT WUP_IRQ_PAYLOAD_0 (.CK(addr_in_iso_buf[69]), .D(data_in_iso_buf[0]), .SN(RESETn), .Q(WUP_IRQ_PAYLOAD[0]));

   //****************************************************
   // REGISTER 0x46 ( 70)
   //****************************************************
    //WUP_IRQ_SHORT_ADDR (8'h10)
    DFFRX1HVT WUP_IRQ_SHORT_ADDR_7 (.CK(addr_in_iso_buf[70]), .D(data_in_iso_buf[15]), .RN(RESETn), .Q(WUP_IRQ_SHORT_ADDR[7]));
    DFFRX1HVT WUP_IRQ_SHORT_ADDR_6 (.CK(addr_in_iso_buf[70]), .D(data_in_iso_buf[14]), .RN(RESETn), .Q(WUP_IRQ_SHORT_ADDR[6]));
    DFFRX1HVT WUP_IRQ_SHORT_ADDR_5 (.CK(addr_in_iso_buf[70]), .D(data_in_iso_buf[13]), .RN(RESETn), .Q(WUP_IRQ_SHORT_ADDR[5]));
    DFFSX1HVT WUP_IRQ_SHORT_ADDR_4 (.CK(addr_in_iso_buf[70]), .D(data_in_iso_buf[12]), .SN(RESETn), .Q(WUP_IRQ_SHORT_ADDR[4]));
    DFFRX1HVT WUP_IRQ_SHORT_ADDR_3 (.CK(addr_in_iso_buf[70]), .D(data_in_iso_buf[11]), .RN(RESETn), .Q(WUP_IRQ_SHORT_ADDR[3]));
    DFFRX1HVT WUP_IRQ_SHORT_ADDR_2 (.CK(addr_in_iso_buf[70]), .D(data_in_iso_buf[10]), .RN(RESETn), .Q(WUP_IRQ_SHORT_ADDR[2]));
    DFFRX1HVT WUP_IRQ_SHORT_ADDR_1 (.CK(addr_in_iso_buf[70]), .D(data_in_iso_buf[9]), .RN(RESETn), .Q(WUP_IRQ_SHORT_ADDR[1]));
    DFFRX1HVT WUP_IRQ_SHORT_ADDR_0 (.CK(addr_in_iso_buf[70]), .D(data_in_iso_buf[8]), .RN(RESETn), .Q(WUP_IRQ_SHORT_ADDR[0]));
    //WUP_IRQ_REG_ADDR (8'h00)
    DFFRX1HVT WUP_IRQ_REG_ADDR_7 (.CK(addr_in_iso_buf[70]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(WUP_IRQ_REG_ADDR[7]));
    DFFRX1HVT WUP_IRQ_REG_ADDR_6 (.CK(addr_in_iso_buf[70]), .D(data_in_iso_buf[6]), .RN(RESETn), .Q(WUP_IRQ_REG_ADDR[6]));
    DFFRX1HVT WUP_IRQ_REG_ADDR_5 (.CK(addr_in_iso_buf[70]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(WUP_IRQ_REG_ADDR[5]));
    DFFRX1HVT WUP_IRQ_REG_ADDR_4 (.CK(addr_in_iso_buf[70]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(WUP_IRQ_REG_ADDR[4]));
    DFFRX1HVT WUP_IRQ_REG_ADDR_3 (.CK(addr_in_iso_buf[70]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(WUP_IRQ_REG_ADDR[3]));
    DFFRX1HVT WUP_IRQ_REG_ADDR_2 (.CK(addr_in_iso_buf[70]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(WUP_IRQ_REG_ADDR[2]));
    DFFRX1HVT WUP_IRQ_REG_ADDR_1 (.CK(addr_in_iso_buf[70]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(WUP_IRQ_REG_ADDR[1]));
    DFFRX1HVT WUP_IRQ_REG_ADDR_0 (.CK(addr_in_iso_buf[70]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(WUP_IRQ_REG_ADDR[0]));

   //****************************************************
   // REGISTER 0x47 ( 71)
   //****************************************************
    //WUP_IRQ_START_REG_ADDR (8'h35)
    DFFRX1HVT WUP_IRQ_START_REG_ADDR_7 (.CK(addr_in_iso_buf[71]), .D(data_in_iso_buf[15]), .RN(RESETn), .Q(WUP_IRQ_START_REG_ADDR[7]));
    DFFRX1HVT WUP_IRQ_START_REG_ADDR_6 (.CK(addr_in_iso_buf[71]), .D(data_in_iso_buf[14]), .RN(RESETn), .Q(WUP_IRQ_START_REG_ADDR[6]));
    DFFSX1HVT WUP_IRQ_START_REG_ADDR_5 (.CK(addr_in_iso_buf[71]), .D(data_in_iso_buf[13]), .SN(RESETn), .Q(WUP_IRQ_START_REG_ADDR[5]));
    DFFSX1HVT WUP_IRQ_START_REG_ADDR_4 (.CK(addr_in_iso_buf[71]), .D(data_in_iso_buf[12]), .SN(RESETn), .Q(WUP_IRQ_START_REG_ADDR[4]));
    DFFRX1HVT WUP_IRQ_START_REG_ADDR_3 (.CK(addr_in_iso_buf[71]), .D(data_in_iso_buf[11]), .RN(RESETn), .Q(WUP_IRQ_START_REG_ADDR[3]));
    DFFSX1HVT WUP_IRQ_START_REG_ADDR_2 (.CK(addr_in_iso_buf[71]), .D(data_in_iso_buf[10]), .SN(RESETn), .Q(WUP_IRQ_START_REG_ADDR[2]));
    DFFRX1HVT WUP_IRQ_START_REG_ADDR_1 (.CK(addr_in_iso_buf[71]), .D(data_in_iso_buf[9]), .RN(RESETn), .Q(WUP_IRQ_START_REG_ADDR[1]));
    DFFSX1HVT WUP_IRQ_START_REG_ADDR_0 (.CK(addr_in_iso_buf[71]), .D(data_in_iso_buf[8]), .SN(RESETn), .Q(WUP_IRQ_START_REG_ADDR[0]));
    //WUP_IRQ_NUM_REG_1 (8'h00)
    DFFRX1HVT WUP_IRQ_NUM_REG_1_7 (.CK(addr_in_iso_buf[71]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(WUP_IRQ_NUM_REG_1[7]));
    DFFRX1HVT WUP_IRQ_NUM_REG_1_6 (.CK(addr_in_iso_buf[71]), .D(data_in_iso_buf[6]), .RN(RESETn), .Q(WUP_IRQ_NUM_REG_1[6]));
    DFFRX1HVT WUP_IRQ_NUM_REG_1_5 (.CK(addr_in_iso_buf[71]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(WUP_IRQ_NUM_REG_1[5]));
    DFFRX1HVT WUP_IRQ_NUM_REG_1_4 (.CK(addr_in_iso_buf[71]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(WUP_IRQ_NUM_REG_1[4]));
    DFFRX1HVT WUP_IRQ_NUM_REG_1_3 (.CK(addr_in_iso_buf[71]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(WUP_IRQ_NUM_REG_1[3]));
    DFFRX1HVT WUP_IRQ_NUM_REG_1_2 (.CK(addr_in_iso_buf[71]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(WUP_IRQ_NUM_REG_1[2]));
    DFFRX1HVT WUP_IRQ_NUM_REG_1_1 (.CK(addr_in_iso_buf[71]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(WUP_IRQ_NUM_REG_1[1]));
    DFFRX1HVT WUP_IRQ_NUM_REG_1_0 (.CK(addr_in_iso_buf[71]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(WUP_IRQ_NUM_REG_1[0]));

endmodule // lntv1a_rf
