//*******************************************************************************************
// Description:    Netlist for SNTv3's MBus Register File
//     Generated by genRF (Version 1.2) 11/09/2018 12:54:44
//*******************************************************************************************

//*******************************************************************************************
// MEMORY MAP
//*******************************************************************************************
// MBUS ADDR     || Register Name                         || Reset Value || Type || Comments 
//*******************************************************************************************
// 8'h00         || REGISTER 0x00 (  0)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h00 [ 9: 6] || LDO_VREF_I_AMP                        ||  4'h0       ||  W/R || 
// 8'h00 [ 5: 3] || LDO_SEL_VOUT                          ||  3'h4       ||  W/R || 
// 8'h00 [    2] || LDO_EN_VREF                           ||  1'h0       ||  W/R || 
// 8'h00 [    1] || LDO_EN_IREF                           ||  1'h0       ||  W/R || 
// 8'h00 [    0] || LDO_EN_LDO                            ||  1'h0       ||  W/R || 
//*******************************************************************************************
// 8'h01         || REGISTER 0x01 (  1)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h01 [   11] || TSNS_FORCE_CLR_IRQ_IF_EN_IRQ_0        ||  1'h1       ||  W/R || If 1, mbus_isolation will clear TSNS_IRQ if TSNS_EN_IRQ=0
// 8'h01 [   10] || TSNS_EN_CLK_REF                       ||  1'h0       ||  W/R || 
// 8'h01 [    9] || TSNS_EN_CLK_SENS                      ||  1'h0       ||  W/R || 
// 8'h01 [    8] || TSNS_EN_IRQ                           ||  1'h0       ||  W/R || 
// 8'h01 [    7] || TSNS_CONT_MODE                        ||  1'h0       ||  W/R || 
// 8'h01 [    6] || TSNS_BURST_MODE                       ||  1'h0       ||  W/R || 
// 8'h01 [    5] || TSNS_EN_SENSOR_LDO                    ||  1'h0       ||  W/R || 
// 8'h01 [    4] || TSNS_EN_SENSOR_V1P2                   ||  1'h0       ||  W/R || 
// 8'h01 [    3] || TSNS_SEL_LDO                          ||  1'h0       ||  W/R || 
// 8'h01 [    2] || TSNS_SEL_V1P2                         ||  1'h0       ||  W/R || 
// 8'h01 [    1] || TSNS_ISOLATE                          ||  1'h1       ||  W/R || 
// 8'h01 [    0] || TSNS_RESETn                           ||  1'h0       ||  W/R || 
//*******************************************************************************************
// 8'h02         || REGISTER 0x02 (  2)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h02 [21:18] || TSNS_R_REF                            ||  4'h8       ||  W/R || 
// 8'h02 [17:14] || TSNS_I_BUF                            ||  4'h0       ||  W/R || 
// 8'h02 [13:10] || TSNS_I_BUF2                           ||  4'h0       ||  W/R || 
// 8'h02 [ 9: 6] || TSNS_I_CMP                            ||  4'h1       ||  W/R || 
// 8'h02 [ 5: 4] || TSNS_I_MIRROR                         ||  2'h1       ||  W/R || 
// 8'h02 [ 3: 0] || TSNS_I_SOSC                           ||  4'h0       ||  W/R || 
//*******************************************************************************************
// 8'h03         || REGISTER 0x03 (  3)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h03 [18:16] || TSNS_MIM                              ||  3'h4       ||  W/R || 
// 8'h03 [15:13] || TSNS_MOM                              ||  3'h4       ||  W/R || 
// 8'h03 [12: 9] || TSNS_SEL_VVDD                         ||  4'hE       ||  W/R || 
// 8'h03 [ 8: 6] || TSNS_SEL_STB_TIME                     ||  3'h3       ||  W/R || 
// 8'h03 [ 5: 4] || TSNS_SEL_REF_STB_TIME                 ||  2'h2       ||  W/R || 
// 8'h03 [ 3: 0] || TSNS_SEL_CONV_TIME                    ||  4'h6       ||  W/R || 
//*******************************************************************************************
// 8'h04         || REGISTER 0x04 (  4)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h04 [14: 0] || TSNS_PDIFF                            || 15'h0200    ||  W/R || 
//*******************************************************************************************
// 8'h05         || REGISTER 0x05 (  5)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h05 [23: 0] || TSNS_POLY                             || 24'h004000  ||  W/R || 
//*******************************************************************************************
// 8'h06         || REGISTER 0x06 (  6)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h06 [23: 0] || TSNS_DOUT                             || 24'h000000  ||   R  || 
//*******************************************************************************************
// 8'h07         || REGISTER 0x07 (  7)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h07 [15: 8] || TSNS_INT_RPLY_SHORT_ADDR              ||  8'h10      ||  W/R || 
// 8'h07 [ 7: 0] || TSNS_INT_RPLY_REG_ADDR                ||  8'h00      ||  W/R || 
//*******************************************************************************************
// 8'h08         || REGISTER 0x08 (  8)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h08 [    6] || TMR_SLEEP                             ||  1'h1       ||  W/R || 
// 8'h08 [    5] || TMR_ISOLATE                           ||  1'h1       ||  W/R || 
// 8'h08 [    4] || TMR_RESETB                            ||  1'h0       ||  W/R || 
// 8'h08 [    3] || TMR_EN_OSC                            ||  1'h0       ||  W/R || 
// 8'h08 [    2] || TMR_RESETB_DIV                        ||  1'h0       ||  W/R || 
// 8'h08 [    1] || TMR_RESETB_DCDC                       ||  1'h0       ||  W/R || 
// 8'h08 [    0] || TMR_EN_SELF_CLK                       ||  1'h0       ||  W/R || 
//*******************************************************************************************
// 8'h09         || REGISTER 0x09 (  9)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h09 [   23] || TMR_SEL_CLK_DIV                       ||  1'h1       ||  W/R || 
// 8'h09 [   22] || TMR_SEL_CLK_OSC                       ||  1'h1       ||  W/R || 
// 8'h09 [   21] || TMR_SELF_EN                           ||  1'h1       ||  W/R || 
// 8'h09 [20:17] || TMR_IBIAS_REF                         ||  4'h4       ||  W/R || 
// 8'h09 [   16] || TMR_CASCODE_BOOST                     ||  1'h0       ||  W/R || 
// 8'h09 [15: 8] || TMR_SEL_CAP                           ||  8'h08      ||  W/R || 
// 8'h09 [ 7: 2] || TMR_SEL_DCAP                          ||  6'h04      ||  W/R || 
// 8'h09 [    1] || TMR_EN_TUNE1                          ||  1'h1       ||  W/R || 
// 8'h09 [    0] || TMR_EN_TUNE2                          ||  1'h1       ||  W/R || 
//*******************************************************************************************
// 8'h0A         || REGISTER 0x0A ( 10)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h0A [23:21] || TMR_S                                 ||  3'h4       ||  W/R || 
// 8'h0A [20: 7] || TMR_DIFF_CON                          || 14'h3FFB    ||  W/R || 
// 8'h0A [    5] || TMR_EN_TUNE1_RES                      ||  1'h1       ||  W/R || 
// 8'h0A [    4] || TMR_EN_TUNE2_RES                      ||  1'h1       ||  W/R || 
// 8'h0A [    3] || TMR_SAMPLE_EN                         ||  1'h1       ||  W/R || 
// 8'h0A [ 2: 0] || TMR_AFC                               ||  3'h4       ||  W/R || 
//*******************************************************************************************
// 8'h0B         || REGISTER 0x0B ( 11)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h0B [ 3: 0] || TMR_TFR_CON                           ||  4'hF       ||  W/R || 
//*******************************************************************************************
// 8'h0C         || REGISTER 0x0C ( 12)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h0D         || REGISTER 0x0D ( 13)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h0E         || REGISTER 0x0E ( 14)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h0F         || REGISTER 0x0F ( 15)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h10         || REGISTER 0x10 ( 16)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h11         || REGISTER 0x11 ( 17)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h12         || REGISTER 0x12 ( 18)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h13         || REGISTER 0x13 ( 19)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h14         || REGISTER 0x14 ( 20)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h15         || REGISTER 0x15 ( 21)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h16         || REGISTER 0x16 ( 22)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
//               !!--- EMPTY REGISTER ---!!               ||             ||      ||
//*******************************************************************************************
// 8'h17         || REGISTER 0x17 ( 23)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h17 [   23] || WUP_ENABLE                            ||  1'h0       ||  W/R || 
// 8'h17 [   22] || WUP_LC_IRQ_EN                         ||  1'h1       ||  W/R || 
// 8'h17 [   21] || WUP_AUTO_RESET                        ||  1'h1       ||  W/R || If 1, the wakeup timer is automatically reset to 0 when the system goes into sleep
// 8'h17 [   20] || WUP_CLK_SEL                           ||  1'h0       ||  W/R || 0: Dedicated Timer (5kHz), 1: TSNS's Reference Clock (20kHz)
// 8'h17 [   19] || WUP_ENABLE_CLK_SLP_OUT                ||  1'h0       ||  W/R || 
// 8'h17 [15: 8] || WUP_INT_RPLY_SHORT_ADDR               ||  8'h10      ||  W/R || 
// 8'h17 [ 7: 0] || WUP_INT_RPLY_REG_ADDR                 ||  8'h07      ||  W/R || 
//*******************************************************************************************
// 8'h18         || REGISTER 0x18 ( 24)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h18 [23: 0] || WUP_INT_RPLY_PAYLOAD                  || 24'h023002  ||  W/R || 
//*******************************************************************************************
// 8'h19         || REGISTER 0x19 ( 25)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h19 [ 7: 0] || WUP_THRESHOLD_EXT                     ||  8'h00      ||  W/R || Extended bits to provide 32-bit threshold
//*******************************************************************************************
// 8'h1A         || REGISTER 0x1A ( 26)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h1A [23: 0] || WUP_THRESHOLD                         || 24'h2DC6C0  ||  W/R || 3000000 in decimal: 10 mins with 5kHz, 2.5 mins with 20kHz clock frequency
//*******************************************************************************************
// 8'h1B         || REGISTER 0x1B ( 27)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h1B [ 7: 0] || WUP_CNT_VALUE_EXT                     ||  8'h00      ||   R  || 
//*******************************************************************************************
// 8'h1C         || REGISTER 0x1C ( 28)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h1C [23: 0] || WUP_CNT_VALUE                         || 24'h000000  ||   R  || 
//*******************************************************************************************
// 8'h1D         || REGISTER 0x1D ( 29)                   ||             ||      ||           
//-------------------------------------------------------------------------------------------
// 8'h1D [    5] || MBC_WAKEUP_ON_PEND_REQ                ||  1'h0       ||  W/R || 
// 8'h1D [    4] || MBC_IGNORE_RX_FAIL                    ||  1'h1       ||  W/R || 
// 8'h1D [ 3: 2] || LC_CLK_DIV                            ||  2'h2       ||  W/R || 
// 8'h1D [ 1: 0] || LC_CLK_RING                           ||  2'h1       ||  W/R || 
//*******************************************************************************************

module sntv3_rf (
   //Input
    input         RESETn,
    input         ISOLATE,
    input [ 29:0] ADDR_IN,
    input [ 23:0] DATA_IN,
   //Output
    //Register 0x00 (  0)
    output [ 3:0] LDO_VREF_I_AMP,
    output [ 2:0] LDO_SEL_VOUT,
    output        LDO_EN_VREF,
    output        LDO_EN_IREF,
    output        LDO_EN_LDO,
    //Register 0x01 (  1)
    output        TSNS_FORCE_CLR_IRQ_IF_EN_IRQ_0,
    output        TSNS_EN_CLK_REF,
    output        TSNS_EN_CLK_REF_B, // Inverted Signal of TSNS_EN_CLK_REF
    output        TSNS_EN_CLK_SENS,
    output        TSNS_EN_CLK_SENS_B, // Inverted Signal of TSNS_EN_CLK_SENS
    output        TSNS_EN_IRQ,
    output        TSNS_EN_IRQ_B, // Inverted Signal of TSNS_EN_IRQ
    output        TSNS_CONT_MODE,
    output        TSNS_CONT_MODE_B, // Inverted Signal of TSNS_CONT_MODE
    output        TSNS_BURST_MODE,
    output        TSNS_BURST_MODE_B, // Inverted Signal of TSNS_BURST_MODE
    output        TSNS_EN_SENSOR_LDO,
    output        TSNS_EN_SENSOR_LDO_B, // Inverted Signal of TSNS_EN_SENSOR_LDO
    output        TSNS_EN_SENSOR_V1P2,
    output        TSNS_EN_SENSOR_V1P2_B, // Inverted Signal of TSNS_EN_SENSOR_V1P2
    output        TSNS_SEL_LDO,
    output        TSNS_SEL_LDO_B, // Inverted Signal of TSNS_SEL_LDO
    output        TSNS_SEL_V1P2,
    output        TSNS_SEL_V1P2_B, // Inverted Signal of TSNS_SEL_V1P2
    output        TSNS_ISOLATE,
    output        TSNS_ISOLATE_B, // Inverted Signal of TSNS_ISOLATE
    output        TSNS_RESETn,
    output        TSNS_RESETn_B, // Inverted Signal of TSNS_RESETn
    //Register 0x02 (  2)
    output [ 3:0] TSNS_R_REF,
    output [ 3:0] TSNS_R_REF_B, // Inverted Signal of TSNS_R_REF
    output [ 3:0] TSNS_I_BUF,
    output [ 3:0] TSNS_I_BUF_B, // Inverted Signal of TSNS_I_BUF
    output [ 3:0] TSNS_I_BUF2,
    output [ 3:0] TSNS_I_BUF2_B, // Inverted Signal of TSNS_I_BUF2
    output [ 3:0] TSNS_I_CMP,
    output [ 3:0] TSNS_I_CMP_B, // Inverted Signal of TSNS_I_CMP
    output [ 1:0] TSNS_I_MIRROR,
    output [ 1:0] TSNS_I_MIRROR_B, // Inverted Signal of TSNS_I_MIRROR
    output [ 3:0] TSNS_I_SOSC,
    output [ 3:0] TSNS_I_SOSC_B, // Inverted Signal of TSNS_I_SOSC
    //Register 0x03 (  3)
    output [ 2:0] TSNS_MIM,
    output [ 2:0] TSNS_MIM_B, // Inverted Signal of TSNS_MIM
    output [ 2:0] TSNS_MOM,
    output [ 2:0] TSNS_MOM_B, // Inverted Signal of TSNS_MOM
    output [ 3:0] TSNS_SEL_VVDD,
    output [ 3:0] TSNS_SEL_VVDD_B, // Inverted Signal of TSNS_SEL_VVDD
    output [ 2:0] TSNS_SEL_STB_TIME,
    output [ 2:0] TSNS_SEL_STB_TIME_B, // Inverted Signal of TSNS_SEL_STB_TIME
    output [ 1:0] TSNS_SEL_REF_STB_TIME,
    output [ 1:0] TSNS_SEL_REF_STB_TIME_B, // Inverted Signal of TSNS_SEL_REF_STB_TIME
    output [ 3:0] TSNS_SEL_CONV_TIME,
    output [ 3:0] TSNS_SEL_CONV_TIME_B, // Inverted Signal of TSNS_SEL_CONV_TIME
    //Register 0x04 (  4)
    output [14:0] TSNS_PDIFF,
    output [14:0] TSNS_PDIFF_B, // Inverted Signal of TSNS_PDIFF
    //Register 0x05 (  5)
    output [23:0] TSNS_POLY,
    output [23:0] TSNS_POLY_B, // Inverted Signal of TSNS_POLY
    //Register 0x06 (  6)
    //output [23:0] TSNS_DOUT, // READ-ONLY
    //Register 0x07 (  7)
    output [ 7:0] TSNS_INT_RPLY_SHORT_ADDR,
    output [ 7:0] TSNS_INT_RPLY_REG_ADDR,
    //Register 0x08 (  8)
    output        TMR_SLEEP,
    output        TMR_ISOLATE,
    output        TMR_ISOLATE_B, // Inverted Signal of TMR_ISOLATE
    output        TMR_RESETB,
    output        TMR_EN_OSC,
    output        TMR_RESETB_DIV,
    output        TMR_RESETB_DCDC,
    output        TMR_EN_SELF_CLK,
    //Register 0x09 (  9)
    output        TMR_SEL_CLK_DIV,
    output        TMR_SEL_CLK_OSC,
    output        TMR_SELF_EN,
    output [ 3:0] TMR_IBIAS_REF,
    output        TMR_CASCODE_BOOST,
    output [ 7:0] TMR_SEL_CAP,
    output [ 5:0] TMR_SEL_DCAP,
    output        TMR_EN_TUNE1,
    output        TMR_EN_TUNE2,
    //Register 0x0A ( 10)
    output [ 2:0] TMR_S,
    output [13:0] TMR_DIFF_CON,
    output        TMR_EN_TUNE1_RES,
    output        TMR_EN_TUNE2_RES,
    output        TMR_SAMPLE_EN,
    output [ 2:0] TMR_AFC,
    //Register 0x0B ( 11)
    output [ 3:0] TMR_TFR_CON,
    //Register 0x17 ( 23)
    output        WUP_ENABLE,
    output        WUP_LC_IRQ_EN,
    output        WUP_AUTO_RESET,
    output        WUP_CLK_SEL,
    output        WUP_ENABLE_CLK_SLP_OUT,
    output [ 7:0] WUP_INT_RPLY_SHORT_ADDR,
    output [ 7:0] WUP_INT_RPLY_REG_ADDR,
    //Register 0x18 ( 24)
    output [23:0] WUP_INT_RPLY_PAYLOAD,
    //Register 0x19 ( 25)
    output [ 7:0] WUP_THRESHOLD_EXT,
    //Register 0x1A ( 26)
    output [23:0] WUP_THRESHOLD,
    //Register 0x1B ( 27)
    //output [ 7:0] WUP_CNT_VALUE_EXT, // READ-ONLY
    //Register 0x1C ( 28)
    //output [23:0] WUP_CNT_VALUE, // READ-ONLY
    //Register 0x1D ( 29)
    output        MBC_WAKEUP_ON_PEND_REQ,
    output        MBC_IGNORE_RX_FAIL,
    output [ 1:0] LC_CLK_DIV,
    output [ 1:0] LC_CLK_RING
   );

   //Internal Wires
    wire         isolate_n;
    wire [ 29:0] addr_in_iso;
    wire [ 29:0] addr_in_iso_buf;
    wire [ 23:0] data_in_iso;
    wire [ 23:0] data_in_iso_buf;

   //****************************************************
   // ISOLATE                                            
   //****************************************************
    INVX4HVT ISOLATE_INV_0 (.A(ISOLATE), .Y(isolate_n));

    AND2X1HVT ADDR_IN_AND_029 (.A(isolate_n), .B(ADDR_IN[ 29]), .Y(addr_in_iso[ 29]));
    //AND2X1HVT ADDR_IN_AND_028 (.A(isolate_n), .B(ADDR_IN[ 28]), .Y(addr_in_iso[ 28]));
    //AND2X1HVT ADDR_IN_AND_027 (.A(isolate_n), .B(ADDR_IN[ 27]), .Y(addr_in_iso[ 27]));
    AND2X1HVT ADDR_IN_AND_026 (.A(isolate_n), .B(ADDR_IN[ 26]), .Y(addr_in_iso[ 26]));
    AND2X1HVT ADDR_IN_AND_025 (.A(isolate_n), .B(ADDR_IN[ 25]), .Y(addr_in_iso[ 25]));
    AND2X1HVT ADDR_IN_AND_024 (.A(isolate_n), .B(ADDR_IN[ 24]), .Y(addr_in_iso[ 24]));
    AND2X1HVT ADDR_IN_AND_023 (.A(isolate_n), .B(ADDR_IN[ 23]), .Y(addr_in_iso[ 23]));
    //AND2X1HVT ADDR_IN_AND_022 (.A(isolate_n), .B(ADDR_IN[ 22]), .Y(addr_in_iso[ 22]));
    //AND2X1HVT ADDR_IN_AND_021 (.A(isolate_n), .B(ADDR_IN[ 21]), .Y(addr_in_iso[ 21]));
    //AND2X1HVT ADDR_IN_AND_020 (.A(isolate_n), .B(ADDR_IN[ 20]), .Y(addr_in_iso[ 20]));
    //AND2X1HVT ADDR_IN_AND_019 (.A(isolate_n), .B(ADDR_IN[ 19]), .Y(addr_in_iso[ 19]));
    //AND2X1HVT ADDR_IN_AND_018 (.A(isolate_n), .B(ADDR_IN[ 18]), .Y(addr_in_iso[ 18]));
    //AND2X1HVT ADDR_IN_AND_017 (.A(isolate_n), .B(ADDR_IN[ 17]), .Y(addr_in_iso[ 17]));
    //AND2X1HVT ADDR_IN_AND_016 (.A(isolate_n), .B(ADDR_IN[ 16]), .Y(addr_in_iso[ 16]));
    //AND2X1HVT ADDR_IN_AND_015 (.A(isolate_n), .B(ADDR_IN[ 15]), .Y(addr_in_iso[ 15]));
    //AND2X1HVT ADDR_IN_AND_014 (.A(isolate_n), .B(ADDR_IN[ 14]), .Y(addr_in_iso[ 14]));
    //AND2X1HVT ADDR_IN_AND_013 (.A(isolate_n), .B(ADDR_IN[ 13]), .Y(addr_in_iso[ 13]));
    //AND2X1HVT ADDR_IN_AND_012 (.A(isolate_n), .B(ADDR_IN[ 12]), .Y(addr_in_iso[ 12]));
    AND2X1HVT ADDR_IN_AND_011 (.A(isolate_n), .B(ADDR_IN[ 11]), .Y(addr_in_iso[ 11]));
    AND2X1HVT ADDR_IN_AND_010 (.A(isolate_n), .B(ADDR_IN[ 10]), .Y(addr_in_iso[ 10]));
    AND2X1HVT ADDR_IN_AND_009 (.A(isolate_n), .B(ADDR_IN[  9]), .Y(addr_in_iso[  9]));
    AND2X1HVT ADDR_IN_AND_008 (.A(isolate_n), .B(ADDR_IN[  8]), .Y(addr_in_iso[  8]));
    AND2X1HVT ADDR_IN_AND_007 (.A(isolate_n), .B(ADDR_IN[  7]), .Y(addr_in_iso[  7]));
    //AND2X1HVT ADDR_IN_AND_006 (.A(isolate_n), .B(ADDR_IN[  6]), .Y(addr_in_iso[  6]));
    AND2X1HVT ADDR_IN_AND_005 (.A(isolate_n), .B(ADDR_IN[  5]), .Y(addr_in_iso[  5]));
    AND2X1HVT ADDR_IN_AND_004 (.A(isolate_n), .B(ADDR_IN[  4]), .Y(addr_in_iso[  4]));
    AND2X1HVT ADDR_IN_AND_003 (.A(isolate_n), .B(ADDR_IN[  3]), .Y(addr_in_iso[  3]));
    AND2X1HVT ADDR_IN_AND_002 (.A(isolate_n), .B(ADDR_IN[  2]), .Y(addr_in_iso[  2]));
    AND2X1HVT ADDR_IN_AND_001 (.A(isolate_n), .B(ADDR_IN[  1]), .Y(addr_in_iso[  1]));
    AND2X1HVT ADDR_IN_AND_000 (.A(isolate_n), .B(ADDR_IN[  0]), .Y(addr_in_iso[  0]));

    AND2X1HVT DATA_IN_AND_23 (.A(isolate_n), .B(DATA_IN[23]), .Y(data_in_iso[23]));
    AND2X1HVT DATA_IN_AND_22 (.A(isolate_n), .B(DATA_IN[22]), .Y(data_in_iso[22]));
    AND2X1HVT DATA_IN_AND_21 (.A(isolate_n), .B(DATA_IN[21]), .Y(data_in_iso[21]));
    AND2X1HVT DATA_IN_AND_20 (.A(isolate_n), .B(DATA_IN[20]), .Y(data_in_iso[20]));
    AND2X1HVT DATA_IN_AND_19 (.A(isolate_n), .B(DATA_IN[19]), .Y(data_in_iso[19]));
    AND2X1HVT DATA_IN_AND_18 (.A(isolate_n), .B(DATA_IN[18]), .Y(data_in_iso[18]));
    AND2X1HVT DATA_IN_AND_17 (.A(isolate_n), .B(DATA_IN[17]), .Y(data_in_iso[17]));
    AND2X1HVT DATA_IN_AND_16 (.A(isolate_n), .B(DATA_IN[16]), .Y(data_in_iso[16]));
    AND2X1HVT DATA_IN_AND_15 (.A(isolate_n), .B(DATA_IN[15]), .Y(data_in_iso[15]));
    AND2X1HVT DATA_IN_AND_14 (.A(isolate_n), .B(DATA_IN[14]), .Y(data_in_iso[14]));
    AND2X1HVT DATA_IN_AND_13 (.A(isolate_n), .B(DATA_IN[13]), .Y(data_in_iso[13]));
    AND2X1HVT DATA_IN_AND_12 (.A(isolate_n), .B(DATA_IN[12]), .Y(data_in_iso[12]));
    AND2X1HVT DATA_IN_AND_11 (.A(isolate_n), .B(DATA_IN[11]), .Y(data_in_iso[11]));
    AND2X1HVT DATA_IN_AND_10 (.A(isolate_n), .B(DATA_IN[10]), .Y(data_in_iso[10]));
    AND2X1HVT DATA_IN_AND_09 (.A(isolate_n), .B(DATA_IN[ 9]), .Y(data_in_iso[ 9]));
    AND2X1HVT DATA_IN_AND_08 (.A(isolate_n), .B(DATA_IN[ 8]), .Y(data_in_iso[ 8]));
    AND2X1HVT DATA_IN_AND_07 (.A(isolate_n), .B(DATA_IN[ 7]), .Y(data_in_iso[ 7]));
    AND2X1HVT DATA_IN_AND_06 (.A(isolate_n), .B(DATA_IN[ 6]), .Y(data_in_iso[ 6]));
    AND2X1HVT DATA_IN_AND_05 (.A(isolate_n), .B(DATA_IN[ 5]), .Y(data_in_iso[ 5]));
    AND2X1HVT DATA_IN_AND_04 (.A(isolate_n), .B(DATA_IN[ 4]), .Y(data_in_iso[ 4]));
    AND2X1HVT DATA_IN_AND_03 (.A(isolate_n), .B(DATA_IN[ 3]), .Y(data_in_iso[ 3]));
    AND2X1HVT DATA_IN_AND_02 (.A(isolate_n), .B(DATA_IN[ 2]), .Y(data_in_iso[ 2]));
    AND2X1HVT DATA_IN_AND_01 (.A(isolate_n), .B(DATA_IN[ 1]), .Y(data_in_iso[ 1]));
    AND2X1HVT DATA_IN_AND_00 (.A(isolate_n), .B(DATA_IN[ 0]), .Y(data_in_iso[ 0]));

    BUFX4HVT BUF_ADDR_IN_029 (.A(addr_in_iso[ 29]), .Y(addr_in_iso_buf[ 29]));
    //BUFX4HVT BUF_ADDR_IN_028 (.A(addr_in_iso[ 28]), .Y(addr_in_iso_buf[ 28]));
    //BUFX4HVT BUF_ADDR_IN_027 (.A(addr_in_iso[ 27]), .Y(addr_in_iso_buf[ 27]));
    BUFX4HVT BUF_ADDR_IN_026 (.A(addr_in_iso[ 26]), .Y(addr_in_iso_buf[ 26]));
    BUFX4HVT BUF_ADDR_IN_025 (.A(addr_in_iso[ 25]), .Y(addr_in_iso_buf[ 25]));
    BUFX4HVT BUF_ADDR_IN_024 (.A(addr_in_iso[ 24]), .Y(addr_in_iso_buf[ 24]));
    BUFX4HVT BUF_ADDR_IN_023 (.A(addr_in_iso[ 23]), .Y(addr_in_iso_buf[ 23]));
    //BUFX4HVT BUF_ADDR_IN_022 (.A(addr_in_iso[ 22]), .Y(addr_in_iso_buf[ 22]));
    //BUFX4HVT BUF_ADDR_IN_021 (.A(addr_in_iso[ 21]), .Y(addr_in_iso_buf[ 21]));
    //BUFX4HVT BUF_ADDR_IN_020 (.A(addr_in_iso[ 20]), .Y(addr_in_iso_buf[ 20]));
    //BUFX4HVT BUF_ADDR_IN_019 (.A(addr_in_iso[ 19]), .Y(addr_in_iso_buf[ 19]));
    //BUFX4HVT BUF_ADDR_IN_018 (.A(addr_in_iso[ 18]), .Y(addr_in_iso_buf[ 18]));
    //BUFX4HVT BUF_ADDR_IN_017 (.A(addr_in_iso[ 17]), .Y(addr_in_iso_buf[ 17]));
    //BUFX4HVT BUF_ADDR_IN_016 (.A(addr_in_iso[ 16]), .Y(addr_in_iso_buf[ 16]));
    //BUFX4HVT BUF_ADDR_IN_015 (.A(addr_in_iso[ 15]), .Y(addr_in_iso_buf[ 15]));
    //BUFX4HVT BUF_ADDR_IN_014 (.A(addr_in_iso[ 14]), .Y(addr_in_iso_buf[ 14]));
    //BUFX4HVT BUF_ADDR_IN_013 (.A(addr_in_iso[ 13]), .Y(addr_in_iso_buf[ 13]));
    //BUFX4HVT BUF_ADDR_IN_012 (.A(addr_in_iso[ 12]), .Y(addr_in_iso_buf[ 12]));
    BUFX4HVT BUF_ADDR_IN_011 (.A(addr_in_iso[ 11]), .Y(addr_in_iso_buf[ 11]));
    BUFX4HVT BUF_ADDR_IN_010 (.A(addr_in_iso[ 10]), .Y(addr_in_iso_buf[ 10]));
    BUFX4HVT BUF_ADDR_IN_009 (.A(addr_in_iso[  9]), .Y(addr_in_iso_buf[  9]));
    BUFX4HVT BUF_ADDR_IN_008 (.A(addr_in_iso[  8]), .Y(addr_in_iso_buf[  8]));
    BUFX4HVT BUF_ADDR_IN_007 (.A(addr_in_iso[  7]), .Y(addr_in_iso_buf[  7]));
    //BUFX4HVT BUF_ADDR_IN_006 (.A(addr_in_iso[  6]), .Y(addr_in_iso_buf[  6]));
    BUFX4HVT BUF_ADDR_IN_005 (.A(addr_in_iso[  5]), .Y(addr_in_iso_buf[  5]));
    BUFX4HVT BUF_ADDR_IN_004 (.A(addr_in_iso[  4]), .Y(addr_in_iso_buf[  4]));
    BUFX4HVT BUF_ADDR_IN_003 (.A(addr_in_iso[  3]), .Y(addr_in_iso_buf[  3]));
    BUFX4HVT BUF_ADDR_IN_002 (.A(addr_in_iso[  2]), .Y(addr_in_iso_buf[  2]));
    BUFX4HVT BUF_ADDR_IN_001 (.A(addr_in_iso[  1]), .Y(addr_in_iso_buf[  1]));
    BUFX4HVT BUF_ADDR_IN_000 (.A(addr_in_iso[  0]), .Y(addr_in_iso_buf[  0]));

    BUFX4HVT BUF_DATA_IN_23 (.A(data_in_iso[23]), .Y(data_in_iso_buf[23]));
    BUFX4HVT BUF_DATA_IN_22 (.A(data_in_iso[22]), .Y(data_in_iso_buf[22]));
    BUFX4HVT BUF_DATA_IN_21 (.A(data_in_iso[21]), .Y(data_in_iso_buf[21]));
    BUFX4HVT BUF_DATA_IN_20 (.A(data_in_iso[20]), .Y(data_in_iso_buf[20]));
    BUFX4HVT BUF_DATA_IN_19 (.A(data_in_iso[19]), .Y(data_in_iso_buf[19]));
    BUFX4HVT BUF_DATA_IN_18 (.A(data_in_iso[18]), .Y(data_in_iso_buf[18]));
    BUFX4HVT BUF_DATA_IN_17 (.A(data_in_iso[17]), .Y(data_in_iso_buf[17]));
    BUFX4HVT BUF_DATA_IN_16 (.A(data_in_iso[16]), .Y(data_in_iso_buf[16]));
    BUFX4HVT BUF_DATA_IN_15 (.A(data_in_iso[15]), .Y(data_in_iso_buf[15]));
    BUFX4HVT BUF_DATA_IN_14 (.A(data_in_iso[14]), .Y(data_in_iso_buf[14]));
    BUFX4HVT BUF_DATA_IN_13 (.A(data_in_iso[13]), .Y(data_in_iso_buf[13]));
    BUFX4HVT BUF_DATA_IN_12 (.A(data_in_iso[12]), .Y(data_in_iso_buf[12]));
    BUFX4HVT BUF_DATA_IN_11 (.A(data_in_iso[11]), .Y(data_in_iso_buf[11]));
    BUFX4HVT BUF_DATA_IN_10 (.A(data_in_iso[10]), .Y(data_in_iso_buf[10]));
    BUFX4HVT BUF_DATA_IN_09 (.A(data_in_iso[ 9]), .Y(data_in_iso_buf[ 9]));
    BUFX4HVT BUF_DATA_IN_08 (.A(data_in_iso[ 8]), .Y(data_in_iso_buf[ 8]));
    BUFX4HVT BUF_DATA_IN_07 (.A(data_in_iso[ 7]), .Y(data_in_iso_buf[ 7]));
    BUFX4HVT BUF_DATA_IN_06 (.A(data_in_iso[ 6]), .Y(data_in_iso_buf[ 6]));
    BUFX4HVT BUF_DATA_IN_05 (.A(data_in_iso[ 5]), .Y(data_in_iso_buf[ 5]));
    BUFX4HVT BUF_DATA_IN_04 (.A(data_in_iso[ 4]), .Y(data_in_iso_buf[ 4]));
    BUFX4HVT BUF_DATA_IN_03 (.A(data_in_iso[ 3]), .Y(data_in_iso_buf[ 3]));
    BUFX4HVT BUF_DATA_IN_02 (.A(data_in_iso[ 2]), .Y(data_in_iso_buf[ 2]));
    BUFX4HVT BUF_DATA_IN_01 (.A(data_in_iso[ 1]), .Y(data_in_iso_buf[ 1]));
    BUFX4HVT BUF_DATA_IN_00 (.A(data_in_iso[ 0]), .Y(data_in_iso_buf[ 0]));

   //****************************************************
   // REGISTER 0x00 (  0)
   //****************************************************
    //LDO_VREF_I_AMP (4'h0)
    DFFRX1HVT LDO_VREF_I_AMP_3 (.CK(addr_in_iso_buf[0]), .D(data_in_iso_buf[9]), .RN(RESETn), .Q(LDO_VREF_I_AMP[3]));
    DFFRX1HVT LDO_VREF_I_AMP_2 (.CK(addr_in_iso_buf[0]), .D(data_in_iso_buf[8]), .RN(RESETn), .Q(LDO_VREF_I_AMP[2]));
    DFFRX1HVT LDO_VREF_I_AMP_1 (.CK(addr_in_iso_buf[0]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(LDO_VREF_I_AMP[1]));
    DFFRX1HVT LDO_VREF_I_AMP_0 (.CK(addr_in_iso_buf[0]), .D(data_in_iso_buf[6]), .RN(RESETn), .Q(LDO_VREF_I_AMP[0]));
    //LDO_SEL_VOUT (3'h4)
    DFFSX1HVT LDO_SEL_VOUT_2 (.CK(addr_in_iso_buf[0]), .D(data_in_iso_buf[5]), .SN(RESETn), .Q(LDO_SEL_VOUT[2]));
    DFFRX1HVT LDO_SEL_VOUT_1 (.CK(addr_in_iso_buf[0]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(LDO_SEL_VOUT[1]));
    DFFRX1HVT LDO_SEL_VOUT_0 (.CK(addr_in_iso_buf[0]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(LDO_SEL_VOUT[0]));
    //LDO_EN_VREF (1'h0)
    DFFRX1HVT LDO_EN_VREF_0 (.CK(addr_in_iso_buf[0]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(LDO_EN_VREF));
    //LDO_EN_IREF (1'h0)
    DFFRX1HVT LDO_EN_IREF_0 (.CK(addr_in_iso_buf[0]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(LDO_EN_IREF));
    //LDO_EN_LDO (1'h0)
    DFFRX1HVT LDO_EN_LDO_0 (.CK(addr_in_iso_buf[0]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(LDO_EN_LDO));

   //****************************************************
   // REGISTER 0x01 (  1)
   //****************************************************
    //TSNS_FORCE_CLR_IRQ_IF_EN_IRQ_0 (1'h1)
    DFFSX1HVT TSNS_FORCE_CLR_IRQ_IF_EN_IRQ_0_0 (.CK(addr_in_iso_buf[1]), .D(data_in_iso_buf[11]), .SN(RESETn), .Q(TSNS_FORCE_CLR_IRQ_IF_EN_IRQ_0));
    //TSNS_EN_CLK_REF (1'h0)
    DFFRX1HVT TSNS_EN_CLK_REF_0 (.CK(addr_in_iso_buf[1]), .D(data_in_iso_buf[10]), .RN(RESETn), .Q(TSNS_EN_CLK_REF));
    //TSNS_EN_CLK_SENS (1'h0)
    DFFRX1HVT TSNS_EN_CLK_SENS_0 (.CK(addr_in_iso_buf[1]), .D(data_in_iso_buf[9]), .RN(RESETn), .Q(TSNS_EN_CLK_SENS));
    //TSNS_EN_IRQ (1'h0)
    DFFRX1HVT TSNS_EN_IRQ_0 (.CK(addr_in_iso_buf[1]), .D(data_in_iso_buf[8]), .RN(RESETn), .Q(TSNS_EN_IRQ));
    //TSNS_CONT_MODE (1'h0)
    DFFRX1HVT TSNS_CONT_MODE_0 (.CK(addr_in_iso_buf[1]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(TSNS_CONT_MODE));
    //TSNS_BURST_MODE (1'h0)
    DFFRX1HVT TSNS_BURST_MODE_0 (.CK(addr_in_iso_buf[1]), .D(data_in_iso_buf[6]), .RN(RESETn), .Q(TSNS_BURST_MODE));
    //TSNS_EN_SENSOR_LDO (1'h0)
    DFFRX1HVT TSNS_EN_SENSOR_LDO_0 (.CK(addr_in_iso_buf[1]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(TSNS_EN_SENSOR_LDO));
    //TSNS_EN_SENSOR_V1P2 (1'h0)
    DFFRX1HVT TSNS_EN_SENSOR_V1P2_0 (.CK(addr_in_iso_buf[1]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(TSNS_EN_SENSOR_V1P2));
    //TSNS_SEL_LDO (1'h0)
    DFFRX1HVT TSNS_SEL_LDO_0 (.CK(addr_in_iso_buf[1]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(TSNS_SEL_LDO));
    //TSNS_SEL_V1P2 (1'h0)
    DFFRX1HVT TSNS_SEL_V1P2_0 (.CK(addr_in_iso_buf[1]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(TSNS_SEL_V1P2));
    //TSNS_ISOLATE (1'h1)
    DFFSX1HVT TSNS_ISOLATE_0 (.CK(addr_in_iso_buf[1]), .D(data_in_iso_buf[1]), .SN(RESETn), .Q(TSNS_ISOLATE));
    //TSNS_RESETn (1'h0)
    DFFRX1HVT TSNS_RESETn_0 (.CK(addr_in_iso_buf[1]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(TSNS_RESETn));

    // Inverted Signals
    INVX4HVT TSNS_EN_CLK_REF_B_0 (.A(TSNS_EN_CLK_REF), .Y(TSNS_EN_CLK_REF_B));
    INVX4HVT TSNS_EN_CLK_SENS_B_0 (.A(TSNS_EN_CLK_SENS), .Y(TSNS_EN_CLK_SENS_B));
    INVX4HVT TSNS_EN_IRQ_B_0 (.A(TSNS_EN_IRQ), .Y(TSNS_EN_IRQ_B));
    INVX4HVT TSNS_CONT_MODE_B_0 (.A(TSNS_CONT_MODE), .Y(TSNS_CONT_MODE_B));
    INVX4HVT TSNS_BURST_MODE_B_0 (.A(TSNS_BURST_MODE), .Y(TSNS_BURST_MODE_B));
    INVX4HVT TSNS_EN_SENSOR_LDO_B_0 (.A(TSNS_EN_SENSOR_LDO), .Y(TSNS_EN_SENSOR_LDO_B));
    INVX4HVT TSNS_EN_SENSOR_V1P2_B_0 (.A(TSNS_EN_SENSOR_V1P2), .Y(TSNS_EN_SENSOR_V1P2_B));
    INVX4HVT TSNS_SEL_LDO_B_0 (.A(TSNS_SEL_LDO), .Y(TSNS_SEL_LDO_B));
    INVX4HVT TSNS_SEL_V1P2_B_0 (.A(TSNS_SEL_V1P2), .Y(TSNS_SEL_V1P2_B));
    INVX4HVT TSNS_ISOLATE_B_0 (.A(TSNS_ISOLATE), .Y(TSNS_ISOLATE_B));
    INVX4HVT TSNS_RESETn_B_0 (.A(TSNS_RESETn), .Y(TSNS_RESETn_B));

   //****************************************************
   // REGISTER 0x02 (  2)
   //****************************************************
    //TSNS_R_REF (4'h8)
    DFFSX1HVT TSNS_R_REF_3 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[21]), .SN(RESETn), .Q(TSNS_R_REF[3]));
    DFFRX1HVT TSNS_R_REF_2 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[20]), .RN(RESETn), .Q(TSNS_R_REF[2]));
    DFFRX1HVT TSNS_R_REF_1 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[19]), .RN(RESETn), .Q(TSNS_R_REF[1]));
    DFFRX1HVT TSNS_R_REF_0 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[18]), .RN(RESETn), .Q(TSNS_R_REF[0]));
    //TSNS_I_BUF (4'h0)
    DFFRX1HVT TSNS_I_BUF_3 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[17]), .RN(RESETn), .Q(TSNS_I_BUF[3]));
    DFFRX1HVT TSNS_I_BUF_2 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[16]), .RN(RESETn), .Q(TSNS_I_BUF[2]));
    DFFRX1HVT TSNS_I_BUF_1 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[15]), .RN(RESETn), .Q(TSNS_I_BUF[1]));
    DFFRX1HVT TSNS_I_BUF_0 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[14]), .RN(RESETn), .Q(TSNS_I_BUF[0]));
    //TSNS_I_BUF2 (4'h0)
    DFFRX1HVT TSNS_I_BUF2_3 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[13]), .RN(RESETn), .Q(TSNS_I_BUF2[3]));
    DFFRX1HVT TSNS_I_BUF2_2 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[12]), .RN(RESETn), .Q(TSNS_I_BUF2[2]));
    DFFRX1HVT TSNS_I_BUF2_1 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[11]), .RN(RESETn), .Q(TSNS_I_BUF2[1]));
    DFFRX1HVT TSNS_I_BUF2_0 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[10]), .RN(RESETn), .Q(TSNS_I_BUF2[0]));
    //TSNS_I_CMP (4'h1)
    DFFRX1HVT TSNS_I_CMP_3 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[9]), .RN(RESETn), .Q(TSNS_I_CMP[3]));
    DFFRX1HVT TSNS_I_CMP_2 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[8]), .RN(RESETn), .Q(TSNS_I_CMP[2]));
    DFFRX1HVT TSNS_I_CMP_1 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(TSNS_I_CMP[1]));
    DFFSX1HVT TSNS_I_CMP_0 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[6]), .SN(RESETn), .Q(TSNS_I_CMP[0]));
    //TSNS_I_MIRROR (2'h1)
    DFFRX1HVT TSNS_I_MIRROR_1 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(TSNS_I_MIRROR[1]));
    DFFSX1HVT TSNS_I_MIRROR_0 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[4]), .SN(RESETn), .Q(TSNS_I_MIRROR[0]));
    //TSNS_I_SOSC (4'h0)
    DFFRX1HVT TSNS_I_SOSC_3 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(TSNS_I_SOSC[3]));
    DFFRX1HVT TSNS_I_SOSC_2 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(TSNS_I_SOSC[2]));
    DFFRX1HVT TSNS_I_SOSC_1 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(TSNS_I_SOSC[1]));
    DFFRX1HVT TSNS_I_SOSC_0 (.CK(addr_in_iso_buf[2]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(TSNS_I_SOSC[0]));

    // Inverted Signals
    INVX4HVT TSNS_R_REF_B_3 (.A(TSNS_R_REF[3]), .Y(TSNS_R_REF_B[3]));
    INVX4HVT TSNS_R_REF_B_2 (.A(TSNS_R_REF[2]), .Y(TSNS_R_REF_B[2]));
    INVX4HVT TSNS_R_REF_B_1 (.A(TSNS_R_REF[1]), .Y(TSNS_R_REF_B[1]));
    INVX4HVT TSNS_R_REF_B_0 (.A(TSNS_R_REF[0]), .Y(TSNS_R_REF_B[0]));
    INVX4HVT TSNS_I_BUF_B_3 (.A(TSNS_I_BUF[3]), .Y(TSNS_I_BUF_B[3]));
    INVX4HVT TSNS_I_BUF_B_2 (.A(TSNS_I_BUF[2]), .Y(TSNS_I_BUF_B[2]));
    INVX4HVT TSNS_I_BUF_B_1 (.A(TSNS_I_BUF[1]), .Y(TSNS_I_BUF_B[1]));
    INVX4HVT TSNS_I_BUF_B_0 (.A(TSNS_I_BUF[0]), .Y(TSNS_I_BUF_B[0]));
    INVX4HVT TSNS_I_BUF2_B_3 (.A(TSNS_I_BUF2[3]), .Y(TSNS_I_BUF2_B[3]));
    INVX4HVT TSNS_I_BUF2_B_2 (.A(TSNS_I_BUF2[2]), .Y(TSNS_I_BUF2_B[2]));
    INVX4HVT TSNS_I_BUF2_B_1 (.A(TSNS_I_BUF2[1]), .Y(TSNS_I_BUF2_B[1]));
    INVX4HVT TSNS_I_BUF2_B_0 (.A(TSNS_I_BUF2[0]), .Y(TSNS_I_BUF2_B[0]));
    INVX4HVT TSNS_I_CMP_B_3 (.A(TSNS_I_CMP[3]), .Y(TSNS_I_CMP_B[3]));
    INVX4HVT TSNS_I_CMP_B_2 (.A(TSNS_I_CMP[2]), .Y(TSNS_I_CMP_B[2]));
    INVX4HVT TSNS_I_CMP_B_1 (.A(TSNS_I_CMP[1]), .Y(TSNS_I_CMP_B[1]));
    INVX4HVT TSNS_I_CMP_B_0 (.A(TSNS_I_CMP[0]), .Y(TSNS_I_CMP_B[0]));
    INVX4HVT TSNS_I_MIRROR_B_1 (.A(TSNS_I_MIRROR[1]), .Y(TSNS_I_MIRROR_B[1]));
    INVX4HVT TSNS_I_MIRROR_B_0 (.A(TSNS_I_MIRROR[0]), .Y(TSNS_I_MIRROR_B[0]));
    INVX4HVT TSNS_I_SOSC_B_3 (.A(TSNS_I_SOSC[3]), .Y(TSNS_I_SOSC_B[3]));
    INVX4HVT TSNS_I_SOSC_B_2 (.A(TSNS_I_SOSC[2]), .Y(TSNS_I_SOSC_B[2]));
    INVX4HVT TSNS_I_SOSC_B_1 (.A(TSNS_I_SOSC[1]), .Y(TSNS_I_SOSC_B[1]));
    INVX4HVT TSNS_I_SOSC_B_0 (.A(TSNS_I_SOSC[0]), .Y(TSNS_I_SOSC_B[0]));

   //****************************************************
   // REGISTER 0x03 (  3)
   //****************************************************
    //TSNS_MIM (3'h4)
    DFFSX1HVT TSNS_MIM_2 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[18]), .SN(RESETn), .Q(TSNS_MIM[2]));
    DFFRX1HVT TSNS_MIM_1 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[17]), .RN(RESETn), .Q(TSNS_MIM[1]));
    DFFRX1HVT TSNS_MIM_0 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[16]), .RN(RESETn), .Q(TSNS_MIM[0]));
    //TSNS_MOM (3'h4)
    DFFSX1HVT TSNS_MOM_2 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[15]), .SN(RESETn), .Q(TSNS_MOM[2]));
    DFFRX1HVT TSNS_MOM_1 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[14]), .RN(RESETn), .Q(TSNS_MOM[1]));
    DFFRX1HVT TSNS_MOM_0 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[13]), .RN(RESETn), .Q(TSNS_MOM[0]));
    //TSNS_SEL_VVDD (4'hE)
    DFFSX1HVT TSNS_SEL_VVDD_3 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[12]), .SN(RESETn), .Q(TSNS_SEL_VVDD[3]));
    DFFSX1HVT TSNS_SEL_VVDD_2 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[11]), .SN(RESETn), .Q(TSNS_SEL_VVDD[2]));
    DFFSX1HVT TSNS_SEL_VVDD_1 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[10]), .SN(RESETn), .Q(TSNS_SEL_VVDD[1]));
    DFFRX1HVT TSNS_SEL_VVDD_0 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[9]), .RN(RESETn), .Q(TSNS_SEL_VVDD[0]));
    //TSNS_SEL_STB_TIME (3'h3)
    DFFRX1HVT TSNS_SEL_STB_TIME_2 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[8]), .RN(RESETn), .Q(TSNS_SEL_STB_TIME[2]));
    DFFSX1HVT TSNS_SEL_STB_TIME_1 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[7]), .SN(RESETn), .Q(TSNS_SEL_STB_TIME[1]));
    DFFSX1HVT TSNS_SEL_STB_TIME_0 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[6]), .SN(RESETn), .Q(TSNS_SEL_STB_TIME[0]));
    //TSNS_SEL_REF_STB_TIME (2'h2)
    DFFSX1HVT TSNS_SEL_REF_STB_TIME_1 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[5]), .SN(RESETn), .Q(TSNS_SEL_REF_STB_TIME[1]));
    DFFRX1HVT TSNS_SEL_REF_STB_TIME_0 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(TSNS_SEL_REF_STB_TIME[0]));
    //TSNS_SEL_CONV_TIME (4'h6)
    DFFRX1HVT TSNS_SEL_CONV_TIME_3 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(TSNS_SEL_CONV_TIME[3]));
    DFFSX1HVT TSNS_SEL_CONV_TIME_2 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[2]), .SN(RESETn), .Q(TSNS_SEL_CONV_TIME[2]));
    DFFSX1HVT TSNS_SEL_CONV_TIME_1 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[1]), .SN(RESETn), .Q(TSNS_SEL_CONV_TIME[1]));
    DFFRX1HVT TSNS_SEL_CONV_TIME_0 (.CK(addr_in_iso_buf[3]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(TSNS_SEL_CONV_TIME[0]));

    // Inverted Signals
    INVX4HVT TSNS_MIM_B_2 (.A(TSNS_MIM[2]), .Y(TSNS_MIM_B[2]));
    INVX4HVT TSNS_MIM_B_1 (.A(TSNS_MIM[1]), .Y(TSNS_MIM_B[1]));
    INVX4HVT TSNS_MIM_B_0 (.A(TSNS_MIM[0]), .Y(TSNS_MIM_B[0]));
    INVX4HVT TSNS_MOM_B_2 (.A(TSNS_MOM[2]), .Y(TSNS_MOM_B[2]));
    INVX4HVT TSNS_MOM_B_1 (.A(TSNS_MOM[1]), .Y(TSNS_MOM_B[1]));
    INVX4HVT TSNS_MOM_B_0 (.A(TSNS_MOM[0]), .Y(TSNS_MOM_B[0]));
    INVX4HVT TSNS_SEL_VVDD_B_3 (.A(TSNS_SEL_VVDD[3]), .Y(TSNS_SEL_VVDD_B[3]));
    INVX4HVT TSNS_SEL_VVDD_B_2 (.A(TSNS_SEL_VVDD[2]), .Y(TSNS_SEL_VVDD_B[2]));
    INVX4HVT TSNS_SEL_VVDD_B_1 (.A(TSNS_SEL_VVDD[1]), .Y(TSNS_SEL_VVDD_B[1]));
    INVX4HVT TSNS_SEL_VVDD_B_0 (.A(TSNS_SEL_VVDD[0]), .Y(TSNS_SEL_VVDD_B[0]));
    INVX4HVT TSNS_SEL_STB_TIME_B_2 (.A(TSNS_SEL_STB_TIME[2]), .Y(TSNS_SEL_STB_TIME_B[2]));
    INVX4HVT TSNS_SEL_STB_TIME_B_1 (.A(TSNS_SEL_STB_TIME[1]), .Y(TSNS_SEL_STB_TIME_B[1]));
    INVX4HVT TSNS_SEL_STB_TIME_B_0 (.A(TSNS_SEL_STB_TIME[0]), .Y(TSNS_SEL_STB_TIME_B[0]));
    INVX4HVT TSNS_SEL_REF_STB_TIME_B_1 (.A(TSNS_SEL_REF_STB_TIME[1]), .Y(TSNS_SEL_REF_STB_TIME_B[1]));
    INVX4HVT TSNS_SEL_REF_STB_TIME_B_0 (.A(TSNS_SEL_REF_STB_TIME[0]), .Y(TSNS_SEL_REF_STB_TIME_B[0]));
    INVX4HVT TSNS_SEL_CONV_TIME_B_3 (.A(TSNS_SEL_CONV_TIME[3]), .Y(TSNS_SEL_CONV_TIME_B[3]));
    INVX4HVT TSNS_SEL_CONV_TIME_B_2 (.A(TSNS_SEL_CONV_TIME[2]), .Y(TSNS_SEL_CONV_TIME_B[2]));
    INVX4HVT TSNS_SEL_CONV_TIME_B_1 (.A(TSNS_SEL_CONV_TIME[1]), .Y(TSNS_SEL_CONV_TIME_B[1]));
    INVX4HVT TSNS_SEL_CONV_TIME_B_0 (.A(TSNS_SEL_CONV_TIME[0]), .Y(TSNS_SEL_CONV_TIME_B[0]));

   //****************************************************
   // REGISTER 0x04 (  4)
   //****************************************************
    //TSNS_PDIFF (15'h0200)
    DFFRX1HVT TSNS_PDIFF_14 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[14]), .RN(RESETn), .Q(TSNS_PDIFF[14]));
    DFFRX1HVT TSNS_PDIFF_13 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[13]), .RN(RESETn), .Q(TSNS_PDIFF[13]));
    DFFRX1HVT TSNS_PDIFF_12 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[12]), .RN(RESETn), .Q(TSNS_PDIFF[12]));
    DFFRX1HVT TSNS_PDIFF_11 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[11]), .RN(RESETn), .Q(TSNS_PDIFF[11]));
    DFFRX1HVT TSNS_PDIFF_10 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[10]), .RN(RESETn), .Q(TSNS_PDIFF[10]));
    DFFSX1HVT TSNS_PDIFF_9 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[9]), .SN(RESETn), .Q(TSNS_PDIFF[9]));
    DFFRX1HVT TSNS_PDIFF_8 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[8]), .RN(RESETn), .Q(TSNS_PDIFF[8]));
    DFFRX1HVT TSNS_PDIFF_7 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(TSNS_PDIFF[7]));
    DFFRX1HVT TSNS_PDIFF_6 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[6]), .RN(RESETn), .Q(TSNS_PDIFF[6]));
    DFFRX1HVT TSNS_PDIFF_5 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(TSNS_PDIFF[5]));
    DFFRX1HVT TSNS_PDIFF_4 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(TSNS_PDIFF[4]));
    DFFRX1HVT TSNS_PDIFF_3 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(TSNS_PDIFF[3]));
    DFFRX1HVT TSNS_PDIFF_2 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(TSNS_PDIFF[2]));
    DFFRX1HVT TSNS_PDIFF_1 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(TSNS_PDIFF[1]));
    DFFRX1HVT TSNS_PDIFF_0 (.CK(addr_in_iso_buf[4]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(TSNS_PDIFF[0]));

    // Inverted Signals
    INVX4HVT TSNS_PDIFF_B_14 (.A(TSNS_PDIFF[14]), .Y(TSNS_PDIFF_B[14]));
    INVX4HVT TSNS_PDIFF_B_13 (.A(TSNS_PDIFF[13]), .Y(TSNS_PDIFF_B[13]));
    INVX4HVT TSNS_PDIFF_B_12 (.A(TSNS_PDIFF[12]), .Y(TSNS_PDIFF_B[12]));
    INVX4HVT TSNS_PDIFF_B_11 (.A(TSNS_PDIFF[11]), .Y(TSNS_PDIFF_B[11]));
    INVX4HVT TSNS_PDIFF_B_10 (.A(TSNS_PDIFF[10]), .Y(TSNS_PDIFF_B[10]));
    INVX4HVT TSNS_PDIFF_B_9 (.A(TSNS_PDIFF[9]), .Y(TSNS_PDIFF_B[9]));
    INVX4HVT TSNS_PDIFF_B_8 (.A(TSNS_PDIFF[8]), .Y(TSNS_PDIFF_B[8]));
    INVX4HVT TSNS_PDIFF_B_7 (.A(TSNS_PDIFF[7]), .Y(TSNS_PDIFF_B[7]));
    INVX4HVT TSNS_PDIFF_B_6 (.A(TSNS_PDIFF[6]), .Y(TSNS_PDIFF_B[6]));
    INVX4HVT TSNS_PDIFF_B_5 (.A(TSNS_PDIFF[5]), .Y(TSNS_PDIFF_B[5]));
    INVX4HVT TSNS_PDIFF_B_4 (.A(TSNS_PDIFF[4]), .Y(TSNS_PDIFF_B[4]));
    INVX4HVT TSNS_PDIFF_B_3 (.A(TSNS_PDIFF[3]), .Y(TSNS_PDIFF_B[3]));
    INVX4HVT TSNS_PDIFF_B_2 (.A(TSNS_PDIFF[2]), .Y(TSNS_PDIFF_B[2]));
    INVX4HVT TSNS_PDIFF_B_1 (.A(TSNS_PDIFF[1]), .Y(TSNS_PDIFF_B[1]));
    INVX4HVT TSNS_PDIFF_B_0 (.A(TSNS_PDIFF[0]), .Y(TSNS_PDIFF_B[0]));

   //****************************************************
   // REGISTER 0x05 (  5)
   //****************************************************
    //TSNS_POLY (24'h004000)
    DFFRX1HVT TSNS_POLY_23 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[23]), .RN(RESETn), .Q(TSNS_POLY[23]));
    DFFRX1HVT TSNS_POLY_22 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[22]), .RN(RESETn), .Q(TSNS_POLY[22]));
    DFFRX1HVT TSNS_POLY_21 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[21]), .RN(RESETn), .Q(TSNS_POLY[21]));
    DFFRX1HVT TSNS_POLY_20 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[20]), .RN(RESETn), .Q(TSNS_POLY[20]));
    DFFRX1HVT TSNS_POLY_19 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[19]), .RN(RESETn), .Q(TSNS_POLY[19]));
    DFFRX1HVT TSNS_POLY_18 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[18]), .RN(RESETn), .Q(TSNS_POLY[18]));
    DFFRX1HVT TSNS_POLY_17 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[17]), .RN(RESETn), .Q(TSNS_POLY[17]));
    DFFRX1HVT TSNS_POLY_16 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[16]), .RN(RESETn), .Q(TSNS_POLY[16]));
    DFFRX1HVT TSNS_POLY_15 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[15]), .RN(RESETn), .Q(TSNS_POLY[15]));
    DFFSX1HVT TSNS_POLY_14 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[14]), .SN(RESETn), .Q(TSNS_POLY[14]));
    DFFRX1HVT TSNS_POLY_13 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[13]), .RN(RESETn), .Q(TSNS_POLY[13]));
    DFFRX1HVT TSNS_POLY_12 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[12]), .RN(RESETn), .Q(TSNS_POLY[12]));
    DFFRX1HVT TSNS_POLY_11 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[11]), .RN(RESETn), .Q(TSNS_POLY[11]));
    DFFRX1HVT TSNS_POLY_10 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[10]), .RN(RESETn), .Q(TSNS_POLY[10]));
    DFFRX1HVT TSNS_POLY_9 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[9]), .RN(RESETn), .Q(TSNS_POLY[9]));
    DFFRX1HVT TSNS_POLY_8 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[8]), .RN(RESETn), .Q(TSNS_POLY[8]));
    DFFRX1HVT TSNS_POLY_7 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(TSNS_POLY[7]));
    DFFRX1HVT TSNS_POLY_6 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[6]), .RN(RESETn), .Q(TSNS_POLY[6]));
    DFFRX1HVT TSNS_POLY_5 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(TSNS_POLY[5]));
    DFFRX1HVT TSNS_POLY_4 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(TSNS_POLY[4]));
    DFFRX1HVT TSNS_POLY_3 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(TSNS_POLY[3]));
    DFFRX1HVT TSNS_POLY_2 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(TSNS_POLY[2]));
    DFFRX1HVT TSNS_POLY_1 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(TSNS_POLY[1]));
    DFFRX1HVT TSNS_POLY_0 (.CK(addr_in_iso_buf[5]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(TSNS_POLY[0]));

    // Inverted Signals
    INVX4HVT TSNS_POLY_B_23 (.A(TSNS_POLY[23]), .Y(TSNS_POLY_B[23]));
    INVX4HVT TSNS_POLY_B_22 (.A(TSNS_POLY[22]), .Y(TSNS_POLY_B[22]));
    INVX4HVT TSNS_POLY_B_21 (.A(TSNS_POLY[21]), .Y(TSNS_POLY_B[21]));
    INVX4HVT TSNS_POLY_B_20 (.A(TSNS_POLY[20]), .Y(TSNS_POLY_B[20]));
    INVX4HVT TSNS_POLY_B_19 (.A(TSNS_POLY[19]), .Y(TSNS_POLY_B[19]));
    INVX4HVT TSNS_POLY_B_18 (.A(TSNS_POLY[18]), .Y(TSNS_POLY_B[18]));
    INVX4HVT TSNS_POLY_B_17 (.A(TSNS_POLY[17]), .Y(TSNS_POLY_B[17]));
    INVX4HVT TSNS_POLY_B_16 (.A(TSNS_POLY[16]), .Y(TSNS_POLY_B[16]));
    INVX4HVT TSNS_POLY_B_15 (.A(TSNS_POLY[15]), .Y(TSNS_POLY_B[15]));
    INVX4HVT TSNS_POLY_B_14 (.A(TSNS_POLY[14]), .Y(TSNS_POLY_B[14]));
    INVX4HVT TSNS_POLY_B_13 (.A(TSNS_POLY[13]), .Y(TSNS_POLY_B[13]));
    INVX4HVT TSNS_POLY_B_12 (.A(TSNS_POLY[12]), .Y(TSNS_POLY_B[12]));
    INVX4HVT TSNS_POLY_B_11 (.A(TSNS_POLY[11]), .Y(TSNS_POLY_B[11]));
    INVX4HVT TSNS_POLY_B_10 (.A(TSNS_POLY[10]), .Y(TSNS_POLY_B[10]));
    INVX4HVT TSNS_POLY_B_9 (.A(TSNS_POLY[9]), .Y(TSNS_POLY_B[9]));
    INVX4HVT TSNS_POLY_B_8 (.A(TSNS_POLY[8]), .Y(TSNS_POLY_B[8]));
    INVX4HVT TSNS_POLY_B_7 (.A(TSNS_POLY[7]), .Y(TSNS_POLY_B[7]));
    INVX4HVT TSNS_POLY_B_6 (.A(TSNS_POLY[6]), .Y(TSNS_POLY_B[6]));
    INVX4HVT TSNS_POLY_B_5 (.A(TSNS_POLY[5]), .Y(TSNS_POLY_B[5]));
    INVX4HVT TSNS_POLY_B_4 (.A(TSNS_POLY[4]), .Y(TSNS_POLY_B[4]));
    INVX4HVT TSNS_POLY_B_3 (.A(TSNS_POLY[3]), .Y(TSNS_POLY_B[3]));
    INVX4HVT TSNS_POLY_B_2 (.A(TSNS_POLY[2]), .Y(TSNS_POLY_B[2]));
    INVX4HVT TSNS_POLY_B_1 (.A(TSNS_POLY[1]), .Y(TSNS_POLY_B[1]));
    INVX4HVT TSNS_POLY_B_0 (.A(TSNS_POLY[0]), .Y(TSNS_POLY_B[0]));

   //****************************************************
   // REGISTER 0x06 (  6)
   //****************************************************
    //TSNS_DOUT (24'h000000)
    //DFFRX1HVT TSNS_DOUT_23 (.CK(addr_in_iso_buf[6]), .D(data_in_iso_buf[23]), .RN(RESETn), .Q(TSNS_DOUT[23]));
    //DFFRX1HVT TSNS_DOUT_22 (.CK(addr_in_iso_buf[6]), .D(data_in_iso_buf[22]), .RN(RESETn), .Q(TSNS_DOUT[22]));
    //DFFRX1HVT TSNS_DOUT_21 (.CK(addr_in_iso_buf[6]), .D(data_in_iso_buf[21]), .RN(RESETn), .Q(TSNS_DOUT[21]));
    //DFFRX1HVT TSNS_DOUT_20 (.CK(addr_in_iso_buf[6]), .D(data_in_iso_buf[20]), .RN(RESETn), .Q(TSNS_DOUT[20]));
    //DFFRX1HVT TSNS_DOUT_19 (.CK(addr_in_iso_buf[6]), .D(data_in_iso_buf[19]), .RN(RESETn), .Q(TSNS_DOUT[19]));
    //DFFRX1HVT TSNS_DOUT_18 (.CK(addr_in_iso_buf[6]), .D(data_in_iso_buf[18]), .RN(RESETn), .Q(TSNS_DOUT[18]));
    //DFFRX1HVT TSNS_DOUT_17 (.CK(addr_in_iso_buf[6]), .D(data_in_iso_buf[17]), .RN(RESETn), .Q(TSNS_DOUT[17]));
    //DFFRX1HVT TSNS_DOUT_16 (.CK(addr_in_iso_buf[6]), .D(data_in_iso_buf[16]), .RN(RESETn), .Q(TSNS_DOUT[16]));
    //DFFRX1HVT TSNS_DOUT_15 (.CK(addr_in_iso_buf[6]), .D(data_in_iso_buf[15]), .RN(RESETn), .Q(TSNS_DOUT[15]));
    //DFFRX1HVT TSNS_DOUT_14 (.CK(addr_in_iso_buf[6]), .D(data_in_iso_buf[14]), .RN(RESETn), .Q(TSNS_DOUT[14]));
    //DFFRX1HVT TSNS_DOUT_13 (.CK(addr_in_iso_buf[6]), .D(data_in_iso_buf[13]), .RN(RESETn), .Q(TSNS_DOUT[13]));
    //DFFRX1HVT TSNS_DOUT_12 (.CK(addr_in_iso_buf[6]), .D(data_in_iso_buf[12]), .RN(RESETn), .Q(TSNS_DOUT[12]));
    //DFFRX1HVT TSNS_DOUT_11 (.CK(addr_in_iso_buf[6]), .D(data_in_iso_buf[11]), .RN(RESETn), .Q(TSNS_DOUT[11]));
    //DFFRX1HVT TSNS_DOUT_10 (.CK(addr_in_iso_buf[6]), .D(data_in_iso_buf[10]), .RN(RESETn), .Q(TSNS_DOUT[10]));
    //DFFRX1HVT TSNS_DOUT_9 (.CK(addr_in_iso_buf[6]), .D(data_in_iso_buf[9]), .RN(RESETn), .Q(TSNS_DOUT[9]));
    //DFFRX1HVT TSNS_DOUT_8 (.CK(addr_in_iso_buf[6]), .D(data_in_iso_buf[8]), .RN(RESETn), .Q(TSNS_DOUT[8]));
    //DFFRX1HVT TSNS_DOUT_7 (.CK(addr_in_iso_buf[6]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(TSNS_DOUT[7]));
    //DFFRX1HVT TSNS_DOUT_6 (.CK(addr_in_iso_buf[6]), .D(data_in_iso_buf[6]), .RN(RESETn), .Q(TSNS_DOUT[6]));
    //DFFRX1HVT TSNS_DOUT_5 (.CK(addr_in_iso_buf[6]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(TSNS_DOUT[5]));
    //DFFRX1HVT TSNS_DOUT_4 (.CK(addr_in_iso_buf[6]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(TSNS_DOUT[4]));
    //DFFRX1HVT TSNS_DOUT_3 (.CK(addr_in_iso_buf[6]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(TSNS_DOUT[3]));
    //DFFRX1HVT TSNS_DOUT_2 (.CK(addr_in_iso_buf[6]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(TSNS_DOUT[2]));
    //DFFRX1HVT TSNS_DOUT_1 (.CK(addr_in_iso_buf[6]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(TSNS_DOUT[1]));
    //DFFRX1HVT TSNS_DOUT_0 (.CK(addr_in_iso_buf[6]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(TSNS_DOUT[0]));

   //****************************************************
   // REGISTER 0x07 (  7)
   //****************************************************
    //TSNS_INT_RPLY_SHORT_ADDR (8'h10)
    DFFRX1HVT TSNS_INT_RPLY_SHORT_ADDR_7 (.CK(addr_in_iso_buf[7]), .D(data_in_iso_buf[15]), .RN(RESETn), .Q(TSNS_INT_RPLY_SHORT_ADDR[7]));
    DFFRX1HVT TSNS_INT_RPLY_SHORT_ADDR_6 (.CK(addr_in_iso_buf[7]), .D(data_in_iso_buf[14]), .RN(RESETn), .Q(TSNS_INT_RPLY_SHORT_ADDR[6]));
    DFFRX1HVT TSNS_INT_RPLY_SHORT_ADDR_5 (.CK(addr_in_iso_buf[7]), .D(data_in_iso_buf[13]), .RN(RESETn), .Q(TSNS_INT_RPLY_SHORT_ADDR[5]));
    DFFSX1HVT TSNS_INT_RPLY_SHORT_ADDR_4 (.CK(addr_in_iso_buf[7]), .D(data_in_iso_buf[12]), .SN(RESETn), .Q(TSNS_INT_RPLY_SHORT_ADDR[4]));
    DFFRX1HVT TSNS_INT_RPLY_SHORT_ADDR_3 (.CK(addr_in_iso_buf[7]), .D(data_in_iso_buf[11]), .RN(RESETn), .Q(TSNS_INT_RPLY_SHORT_ADDR[3]));
    DFFRX1HVT TSNS_INT_RPLY_SHORT_ADDR_2 (.CK(addr_in_iso_buf[7]), .D(data_in_iso_buf[10]), .RN(RESETn), .Q(TSNS_INT_RPLY_SHORT_ADDR[2]));
    DFFRX1HVT TSNS_INT_RPLY_SHORT_ADDR_1 (.CK(addr_in_iso_buf[7]), .D(data_in_iso_buf[9]), .RN(RESETn), .Q(TSNS_INT_RPLY_SHORT_ADDR[1]));
    DFFRX1HVT TSNS_INT_RPLY_SHORT_ADDR_0 (.CK(addr_in_iso_buf[7]), .D(data_in_iso_buf[8]), .RN(RESETn), .Q(TSNS_INT_RPLY_SHORT_ADDR[0]));
    //TSNS_INT_RPLY_REG_ADDR (8'h00)
    DFFRX1HVT TSNS_INT_RPLY_REG_ADDR_7 (.CK(addr_in_iso_buf[7]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(TSNS_INT_RPLY_REG_ADDR[7]));
    DFFRX1HVT TSNS_INT_RPLY_REG_ADDR_6 (.CK(addr_in_iso_buf[7]), .D(data_in_iso_buf[6]), .RN(RESETn), .Q(TSNS_INT_RPLY_REG_ADDR[6]));
    DFFRX1HVT TSNS_INT_RPLY_REG_ADDR_5 (.CK(addr_in_iso_buf[7]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(TSNS_INT_RPLY_REG_ADDR[5]));
    DFFRX1HVT TSNS_INT_RPLY_REG_ADDR_4 (.CK(addr_in_iso_buf[7]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(TSNS_INT_RPLY_REG_ADDR[4]));
    DFFRX1HVT TSNS_INT_RPLY_REG_ADDR_3 (.CK(addr_in_iso_buf[7]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(TSNS_INT_RPLY_REG_ADDR[3]));
    DFFRX1HVT TSNS_INT_RPLY_REG_ADDR_2 (.CK(addr_in_iso_buf[7]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(TSNS_INT_RPLY_REG_ADDR[2]));
    DFFRX1HVT TSNS_INT_RPLY_REG_ADDR_1 (.CK(addr_in_iso_buf[7]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(TSNS_INT_RPLY_REG_ADDR[1]));
    DFFRX1HVT TSNS_INT_RPLY_REG_ADDR_0 (.CK(addr_in_iso_buf[7]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(TSNS_INT_RPLY_REG_ADDR[0]));

   //****************************************************
   // REGISTER 0x08 (  8)
   //****************************************************
    //TMR_SLEEP (1'h1)
    DFFSX1HVT TMR_SLEEP_0 (.CK(addr_in_iso_buf[8]), .D(data_in_iso_buf[6]), .SN(RESETn), .Q(TMR_SLEEP));
    //TMR_ISOLATE (1'h1)
    DFFSX1HVT TMR_ISOLATE_0 (.CK(addr_in_iso_buf[8]), .D(data_in_iso_buf[5]), .SN(RESETn), .Q(TMR_ISOLATE));
    //TMR_RESETB (1'h0)
    DFFRX1HVT TMR_RESETB_0 (.CK(addr_in_iso_buf[8]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(TMR_RESETB));
    //TMR_EN_OSC (1'h0)
    DFFRX1HVT TMR_EN_OSC_0 (.CK(addr_in_iso_buf[8]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(TMR_EN_OSC));
    //TMR_RESETB_DIV (1'h0)
    DFFRX1HVT TMR_RESETB_DIV_0 (.CK(addr_in_iso_buf[8]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(TMR_RESETB_DIV));
    //TMR_RESETB_DCDC (1'h0)
    DFFRX1HVT TMR_RESETB_DCDC_0 (.CK(addr_in_iso_buf[8]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(TMR_RESETB_DCDC));
    //TMR_EN_SELF_CLK (1'h0)
    DFFRX1HVT TMR_EN_SELF_CLK_0 (.CK(addr_in_iso_buf[8]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(TMR_EN_SELF_CLK));

    // Inverted Signals
    INVX4HVT TMR_ISOLATE_B_0 (.A(TMR_ISOLATE), .Y(TMR_ISOLATE_B));

   //****************************************************
   // REGISTER 0x09 (  9)
   //****************************************************
    //TMR_SEL_CLK_DIV (1'h1)
    DFFSX1HVT TMR_SEL_CLK_DIV_0 (.CK(addr_in_iso_buf[9]), .D(data_in_iso_buf[23]), .SN(RESETn), .Q(TMR_SEL_CLK_DIV));
    //TMR_SEL_CLK_OSC (1'h1)
    DFFSX1HVT TMR_SEL_CLK_OSC_0 (.CK(addr_in_iso_buf[9]), .D(data_in_iso_buf[22]), .SN(RESETn), .Q(TMR_SEL_CLK_OSC));
    //TMR_SELF_EN (1'h1)
    DFFSX1HVT TMR_SELF_EN_0 (.CK(addr_in_iso_buf[9]), .D(data_in_iso_buf[21]), .SN(RESETn), .Q(TMR_SELF_EN));
    //TMR_IBIAS_REF (4'h4)
    DFFRX1HVT TMR_IBIAS_REF_3 (.CK(addr_in_iso_buf[9]), .D(data_in_iso_buf[20]), .RN(RESETn), .Q(TMR_IBIAS_REF[3]));
    DFFSX1HVT TMR_IBIAS_REF_2 (.CK(addr_in_iso_buf[9]), .D(data_in_iso_buf[19]), .SN(RESETn), .Q(TMR_IBIAS_REF[2]));
    DFFRX1HVT TMR_IBIAS_REF_1 (.CK(addr_in_iso_buf[9]), .D(data_in_iso_buf[18]), .RN(RESETn), .Q(TMR_IBIAS_REF[1]));
    DFFRX1HVT TMR_IBIAS_REF_0 (.CK(addr_in_iso_buf[9]), .D(data_in_iso_buf[17]), .RN(RESETn), .Q(TMR_IBIAS_REF[0]));
    //TMR_CASCODE_BOOST (1'h0)
    DFFRX1HVT TMR_CASCODE_BOOST_0 (.CK(addr_in_iso_buf[9]), .D(data_in_iso_buf[16]), .RN(RESETn), .Q(TMR_CASCODE_BOOST));
    //TMR_SEL_CAP (8'h08)
    DFFRX1HVT TMR_SEL_CAP_7 (.CK(addr_in_iso_buf[9]), .D(data_in_iso_buf[15]), .RN(RESETn), .Q(TMR_SEL_CAP[7]));
    DFFRX1HVT TMR_SEL_CAP_6 (.CK(addr_in_iso_buf[9]), .D(data_in_iso_buf[14]), .RN(RESETn), .Q(TMR_SEL_CAP[6]));
    DFFRX1HVT TMR_SEL_CAP_5 (.CK(addr_in_iso_buf[9]), .D(data_in_iso_buf[13]), .RN(RESETn), .Q(TMR_SEL_CAP[5]));
    DFFRX1HVT TMR_SEL_CAP_4 (.CK(addr_in_iso_buf[9]), .D(data_in_iso_buf[12]), .RN(RESETn), .Q(TMR_SEL_CAP[4]));
    DFFSX1HVT TMR_SEL_CAP_3 (.CK(addr_in_iso_buf[9]), .D(data_in_iso_buf[11]), .SN(RESETn), .Q(TMR_SEL_CAP[3]));
    DFFRX1HVT TMR_SEL_CAP_2 (.CK(addr_in_iso_buf[9]), .D(data_in_iso_buf[10]), .RN(RESETn), .Q(TMR_SEL_CAP[2]));
    DFFRX1HVT TMR_SEL_CAP_1 (.CK(addr_in_iso_buf[9]), .D(data_in_iso_buf[9]), .RN(RESETn), .Q(TMR_SEL_CAP[1]));
    DFFRX1HVT TMR_SEL_CAP_0 (.CK(addr_in_iso_buf[9]), .D(data_in_iso_buf[8]), .RN(RESETn), .Q(TMR_SEL_CAP[0]));
    //TMR_SEL_DCAP (6'h04)
    DFFRX1HVT TMR_SEL_DCAP_5 (.CK(addr_in_iso_buf[9]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(TMR_SEL_DCAP[5]));
    DFFRX1HVT TMR_SEL_DCAP_4 (.CK(addr_in_iso_buf[9]), .D(data_in_iso_buf[6]), .RN(RESETn), .Q(TMR_SEL_DCAP[4]));
    DFFRX1HVT TMR_SEL_DCAP_3 (.CK(addr_in_iso_buf[9]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(TMR_SEL_DCAP[3]));
    DFFSX1HVT TMR_SEL_DCAP_2 (.CK(addr_in_iso_buf[9]), .D(data_in_iso_buf[4]), .SN(RESETn), .Q(TMR_SEL_DCAP[2]));
    DFFRX1HVT TMR_SEL_DCAP_1 (.CK(addr_in_iso_buf[9]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(TMR_SEL_DCAP[1]));
    DFFRX1HVT TMR_SEL_DCAP_0 (.CK(addr_in_iso_buf[9]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(TMR_SEL_DCAP[0]));
    //TMR_EN_TUNE1 (1'h1)
    DFFSX1HVT TMR_EN_TUNE1_0 (.CK(addr_in_iso_buf[9]), .D(data_in_iso_buf[1]), .SN(RESETn), .Q(TMR_EN_TUNE1));
    //TMR_EN_TUNE2 (1'h1)
    DFFSX1HVT TMR_EN_TUNE2_0 (.CK(addr_in_iso_buf[9]), .D(data_in_iso_buf[0]), .SN(RESETn), .Q(TMR_EN_TUNE2));

   //****************************************************
   // REGISTER 0x0A ( 10)
   //****************************************************
    //TMR_S (3'h4)
    DFFSX1HVT TMR_S_2 (.CK(addr_in_iso_buf[10]), .D(data_in_iso_buf[23]), .SN(RESETn), .Q(TMR_S[2]));
    DFFRX1HVT TMR_S_1 (.CK(addr_in_iso_buf[10]), .D(data_in_iso_buf[22]), .RN(RESETn), .Q(TMR_S[1]));
    DFFRX1HVT TMR_S_0 (.CK(addr_in_iso_buf[10]), .D(data_in_iso_buf[21]), .RN(RESETn), .Q(TMR_S[0]));
    //TMR_DIFF_CON (14'h3FFB)
    DFFSX1HVT TMR_DIFF_CON_13 (.CK(addr_in_iso_buf[10]), .D(data_in_iso_buf[20]), .SN(RESETn), .Q(TMR_DIFF_CON[13]));
    DFFSX1HVT TMR_DIFF_CON_12 (.CK(addr_in_iso_buf[10]), .D(data_in_iso_buf[19]), .SN(RESETn), .Q(TMR_DIFF_CON[12]));
    DFFSX1HVT TMR_DIFF_CON_11 (.CK(addr_in_iso_buf[10]), .D(data_in_iso_buf[18]), .SN(RESETn), .Q(TMR_DIFF_CON[11]));
    DFFSX1HVT TMR_DIFF_CON_10 (.CK(addr_in_iso_buf[10]), .D(data_in_iso_buf[17]), .SN(RESETn), .Q(TMR_DIFF_CON[10]));
    DFFSX1HVT TMR_DIFF_CON_9 (.CK(addr_in_iso_buf[10]), .D(data_in_iso_buf[16]), .SN(RESETn), .Q(TMR_DIFF_CON[9]));
    DFFSX1HVT TMR_DIFF_CON_8 (.CK(addr_in_iso_buf[10]), .D(data_in_iso_buf[15]), .SN(RESETn), .Q(TMR_DIFF_CON[8]));
    DFFSX1HVT TMR_DIFF_CON_7 (.CK(addr_in_iso_buf[10]), .D(data_in_iso_buf[14]), .SN(RESETn), .Q(TMR_DIFF_CON[7]));
    DFFSX1HVT TMR_DIFF_CON_6 (.CK(addr_in_iso_buf[10]), .D(data_in_iso_buf[13]), .SN(RESETn), .Q(TMR_DIFF_CON[6]));
    DFFSX1HVT TMR_DIFF_CON_5 (.CK(addr_in_iso_buf[10]), .D(data_in_iso_buf[12]), .SN(RESETn), .Q(TMR_DIFF_CON[5]));
    DFFSX1HVT TMR_DIFF_CON_4 (.CK(addr_in_iso_buf[10]), .D(data_in_iso_buf[11]), .SN(RESETn), .Q(TMR_DIFF_CON[4]));
    DFFSX1HVT TMR_DIFF_CON_3 (.CK(addr_in_iso_buf[10]), .D(data_in_iso_buf[10]), .SN(RESETn), .Q(TMR_DIFF_CON[3]));
    DFFRX1HVT TMR_DIFF_CON_2 (.CK(addr_in_iso_buf[10]), .D(data_in_iso_buf[9]), .RN(RESETn), .Q(TMR_DIFF_CON[2]));
    DFFSX1HVT TMR_DIFF_CON_1 (.CK(addr_in_iso_buf[10]), .D(data_in_iso_buf[8]), .SN(RESETn), .Q(TMR_DIFF_CON[1]));
    DFFSX1HVT TMR_DIFF_CON_0 (.CK(addr_in_iso_buf[10]), .D(data_in_iso_buf[7]), .SN(RESETn), .Q(TMR_DIFF_CON[0]));
    //TMR_EN_TUNE1_RES (1'h1)
    DFFSX1HVT TMR_EN_TUNE1_RES_0 (.CK(addr_in_iso_buf[10]), .D(data_in_iso_buf[5]), .SN(RESETn), .Q(TMR_EN_TUNE1_RES));
    //TMR_EN_TUNE2_RES (1'h1)
    DFFSX1HVT TMR_EN_TUNE2_RES_0 (.CK(addr_in_iso_buf[10]), .D(data_in_iso_buf[4]), .SN(RESETn), .Q(TMR_EN_TUNE2_RES));
    //TMR_SAMPLE_EN (1'h1)
    DFFSX1HVT TMR_SAMPLE_EN_0 (.CK(addr_in_iso_buf[10]), .D(data_in_iso_buf[3]), .SN(RESETn), .Q(TMR_SAMPLE_EN));
    //TMR_AFC (3'h4)
    DFFSX1HVT TMR_AFC_2 (.CK(addr_in_iso_buf[10]), .D(data_in_iso_buf[2]), .SN(RESETn), .Q(TMR_AFC[2]));
    DFFRX1HVT TMR_AFC_1 (.CK(addr_in_iso_buf[10]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(TMR_AFC[1]));
    DFFRX1HVT TMR_AFC_0 (.CK(addr_in_iso_buf[10]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(TMR_AFC[0]));

   //****************************************************
   // REGISTER 0x0B ( 11)
   //****************************************************
    //TMR_TFR_CON (4'hF)
    DFFSX1HVT TMR_TFR_CON_3 (.CK(addr_in_iso_buf[11]), .D(data_in_iso_buf[3]), .SN(RESETn), .Q(TMR_TFR_CON[3]));
    DFFSX1HVT TMR_TFR_CON_2 (.CK(addr_in_iso_buf[11]), .D(data_in_iso_buf[2]), .SN(RESETn), .Q(TMR_TFR_CON[2]));
    DFFSX1HVT TMR_TFR_CON_1 (.CK(addr_in_iso_buf[11]), .D(data_in_iso_buf[1]), .SN(RESETn), .Q(TMR_TFR_CON[1]));
    DFFSX1HVT TMR_TFR_CON_0 (.CK(addr_in_iso_buf[11]), .D(data_in_iso_buf[0]), .SN(RESETn), .Q(TMR_TFR_CON[0]));

   //****************************************************
   // REGISTER 0x0C ( 12) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x0D ( 13) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x0E ( 14) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x0F ( 15) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x10 ( 16) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x11 ( 17) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x12 ( 18) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x13 ( 19) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x14 ( 20) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x15 ( 21) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x16 ( 22) - Empty Register
   //****************************************************

   //****************************************************
   // REGISTER 0x17 ( 23)
   //****************************************************
    //WUP_ENABLE (1'h0)
    DFFRX1HVT WUP_ENABLE_0 (.CK(addr_in_iso_buf[23]), .D(data_in_iso_buf[23]), .RN(RESETn), .Q(WUP_ENABLE));
    //WUP_LC_IRQ_EN (1'h1)
    DFFSX1HVT WUP_LC_IRQ_EN_0 (.CK(addr_in_iso_buf[23]), .D(data_in_iso_buf[22]), .SN(RESETn), .Q(WUP_LC_IRQ_EN));
    //WUP_AUTO_RESET (1'h1)
    DFFSX1HVT WUP_AUTO_RESET_0 (.CK(addr_in_iso_buf[23]), .D(data_in_iso_buf[21]), .SN(RESETn), .Q(WUP_AUTO_RESET));
    //WUP_CLK_SEL (1'h0)
    DFFRX1HVT WUP_CLK_SEL_0 (.CK(addr_in_iso_buf[23]), .D(data_in_iso_buf[20]), .RN(RESETn), .Q(WUP_CLK_SEL));
    //WUP_ENABLE_CLK_SLP_OUT (1'h0)
    DFFRX1HVT WUP_ENABLE_CLK_SLP_OUT_0 (.CK(addr_in_iso_buf[23]), .D(data_in_iso_buf[19]), .RN(RESETn), .Q(WUP_ENABLE_CLK_SLP_OUT));
    //WUP_INT_RPLY_SHORT_ADDR (8'h10)
    DFFRX1HVT WUP_INT_RPLY_SHORT_ADDR_7 (.CK(addr_in_iso_buf[23]), .D(data_in_iso_buf[15]), .RN(RESETn), .Q(WUP_INT_RPLY_SHORT_ADDR[7]));
    DFFRX1HVT WUP_INT_RPLY_SHORT_ADDR_6 (.CK(addr_in_iso_buf[23]), .D(data_in_iso_buf[14]), .RN(RESETn), .Q(WUP_INT_RPLY_SHORT_ADDR[6]));
    DFFRX1HVT WUP_INT_RPLY_SHORT_ADDR_5 (.CK(addr_in_iso_buf[23]), .D(data_in_iso_buf[13]), .RN(RESETn), .Q(WUP_INT_RPLY_SHORT_ADDR[5]));
    DFFSX1HVT WUP_INT_RPLY_SHORT_ADDR_4 (.CK(addr_in_iso_buf[23]), .D(data_in_iso_buf[12]), .SN(RESETn), .Q(WUP_INT_RPLY_SHORT_ADDR[4]));
    DFFRX1HVT WUP_INT_RPLY_SHORT_ADDR_3 (.CK(addr_in_iso_buf[23]), .D(data_in_iso_buf[11]), .RN(RESETn), .Q(WUP_INT_RPLY_SHORT_ADDR[3]));
    DFFRX1HVT WUP_INT_RPLY_SHORT_ADDR_2 (.CK(addr_in_iso_buf[23]), .D(data_in_iso_buf[10]), .RN(RESETn), .Q(WUP_INT_RPLY_SHORT_ADDR[2]));
    DFFRX1HVT WUP_INT_RPLY_SHORT_ADDR_1 (.CK(addr_in_iso_buf[23]), .D(data_in_iso_buf[9]), .RN(RESETn), .Q(WUP_INT_RPLY_SHORT_ADDR[1]));
    DFFRX1HVT WUP_INT_RPLY_SHORT_ADDR_0 (.CK(addr_in_iso_buf[23]), .D(data_in_iso_buf[8]), .RN(RESETn), .Q(WUP_INT_RPLY_SHORT_ADDR[0]));
    //WUP_INT_RPLY_REG_ADDR (8'h07)
    DFFRX1HVT WUP_INT_RPLY_REG_ADDR_7 (.CK(addr_in_iso_buf[23]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(WUP_INT_RPLY_REG_ADDR[7]));
    DFFRX1HVT WUP_INT_RPLY_REG_ADDR_6 (.CK(addr_in_iso_buf[23]), .D(data_in_iso_buf[6]), .RN(RESETn), .Q(WUP_INT_RPLY_REG_ADDR[6]));
    DFFRX1HVT WUP_INT_RPLY_REG_ADDR_5 (.CK(addr_in_iso_buf[23]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(WUP_INT_RPLY_REG_ADDR[5]));
    DFFRX1HVT WUP_INT_RPLY_REG_ADDR_4 (.CK(addr_in_iso_buf[23]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(WUP_INT_RPLY_REG_ADDR[4]));
    DFFRX1HVT WUP_INT_RPLY_REG_ADDR_3 (.CK(addr_in_iso_buf[23]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(WUP_INT_RPLY_REG_ADDR[3]));
    DFFSX1HVT WUP_INT_RPLY_REG_ADDR_2 (.CK(addr_in_iso_buf[23]), .D(data_in_iso_buf[2]), .SN(RESETn), .Q(WUP_INT_RPLY_REG_ADDR[2]));
    DFFSX1HVT WUP_INT_RPLY_REG_ADDR_1 (.CK(addr_in_iso_buf[23]), .D(data_in_iso_buf[1]), .SN(RESETn), .Q(WUP_INT_RPLY_REG_ADDR[1]));
    DFFSX1HVT WUP_INT_RPLY_REG_ADDR_0 (.CK(addr_in_iso_buf[23]), .D(data_in_iso_buf[0]), .SN(RESETn), .Q(WUP_INT_RPLY_REG_ADDR[0]));

   //****************************************************
   // REGISTER 0x18 ( 24)
   //****************************************************
    //WUP_INT_RPLY_PAYLOAD (24'h023002)
    DFFRX1HVT WUP_INT_RPLY_PAYLOAD_23 (.CK(addr_in_iso_buf[24]), .D(data_in_iso_buf[23]), .RN(RESETn), .Q(WUP_INT_RPLY_PAYLOAD[23]));
    DFFRX1HVT WUP_INT_RPLY_PAYLOAD_22 (.CK(addr_in_iso_buf[24]), .D(data_in_iso_buf[22]), .RN(RESETn), .Q(WUP_INT_RPLY_PAYLOAD[22]));
    DFFRX1HVT WUP_INT_RPLY_PAYLOAD_21 (.CK(addr_in_iso_buf[24]), .D(data_in_iso_buf[21]), .RN(RESETn), .Q(WUP_INT_RPLY_PAYLOAD[21]));
    DFFRX1HVT WUP_INT_RPLY_PAYLOAD_20 (.CK(addr_in_iso_buf[24]), .D(data_in_iso_buf[20]), .RN(RESETn), .Q(WUP_INT_RPLY_PAYLOAD[20]));
    DFFRX1HVT WUP_INT_RPLY_PAYLOAD_19 (.CK(addr_in_iso_buf[24]), .D(data_in_iso_buf[19]), .RN(RESETn), .Q(WUP_INT_RPLY_PAYLOAD[19]));
    DFFRX1HVT WUP_INT_RPLY_PAYLOAD_18 (.CK(addr_in_iso_buf[24]), .D(data_in_iso_buf[18]), .RN(RESETn), .Q(WUP_INT_RPLY_PAYLOAD[18]));
    DFFSX1HVT WUP_INT_RPLY_PAYLOAD_17 (.CK(addr_in_iso_buf[24]), .D(data_in_iso_buf[17]), .SN(RESETn), .Q(WUP_INT_RPLY_PAYLOAD[17]));
    DFFRX1HVT WUP_INT_RPLY_PAYLOAD_16 (.CK(addr_in_iso_buf[24]), .D(data_in_iso_buf[16]), .RN(RESETn), .Q(WUP_INT_RPLY_PAYLOAD[16]));
    DFFRX1HVT WUP_INT_RPLY_PAYLOAD_15 (.CK(addr_in_iso_buf[24]), .D(data_in_iso_buf[15]), .RN(RESETn), .Q(WUP_INT_RPLY_PAYLOAD[15]));
    DFFRX1HVT WUP_INT_RPLY_PAYLOAD_14 (.CK(addr_in_iso_buf[24]), .D(data_in_iso_buf[14]), .RN(RESETn), .Q(WUP_INT_RPLY_PAYLOAD[14]));
    DFFSX1HVT WUP_INT_RPLY_PAYLOAD_13 (.CK(addr_in_iso_buf[24]), .D(data_in_iso_buf[13]), .SN(RESETn), .Q(WUP_INT_RPLY_PAYLOAD[13]));
    DFFSX1HVT WUP_INT_RPLY_PAYLOAD_12 (.CK(addr_in_iso_buf[24]), .D(data_in_iso_buf[12]), .SN(RESETn), .Q(WUP_INT_RPLY_PAYLOAD[12]));
    DFFRX1HVT WUP_INT_RPLY_PAYLOAD_11 (.CK(addr_in_iso_buf[24]), .D(data_in_iso_buf[11]), .RN(RESETn), .Q(WUP_INT_RPLY_PAYLOAD[11]));
    DFFRX1HVT WUP_INT_RPLY_PAYLOAD_10 (.CK(addr_in_iso_buf[24]), .D(data_in_iso_buf[10]), .RN(RESETn), .Q(WUP_INT_RPLY_PAYLOAD[10]));
    DFFRX1HVT WUP_INT_RPLY_PAYLOAD_9 (.CK(addr_in_iso_buf[24]), .D(data_in_iso_buf[9]), .RN(RESETn), .Q(WUP_INT_RPLY_PAYLOAD[9]));
    DFFRX1HVT WUP_INT_RPLY_PAYLOAD_8 (.CK(addr_in_iso_buf[24]), .D(data_in_iso_buf[8]), .RN(RESETn), .Q(WUP_INT_RPLY_PAYLOAD[8]));
    DFFRX1HVT WUP_INT_RPLY_PAYLOAD_7 (.CK(addr_in_iso_buf[24]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(WUP_INT_RPLY_PAYLOAD[7]));
    DFFRX1HVT WUP_INT_RPLY_PAYLOAD_6 (.CK(addr_in_iso_buf[24]), .D(data_in_iso_buf[6]), .RN(RESETn), .Q(WUP_INT_RPLY_PAYLOAD[6]));
    DFFRX1HVT WUP_INT_RPLY_PAYLOAD_5 (.CK(addr_in_iso_buf[24]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(WUP_INT_RPLY_PAYLOAD[5]));
    DFFRX1HVT WUP_INT_RPLY_PAYLOAD_4 (.CK(addr_in_iso_buf[24]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(WUP_INT_RPLY_PAYLOAD[4]));
    DFFRX1HVT WUP_INT_RPLY_PAYLOAD_3 (.CK(addr_in_iso_buf[24]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(WUP_INT_RPLY_PAYLOAD[3]));
    DFFRX1HVT WUP_INT_RPLY_PAYLOAD_2 (.CK(addr_in_iso_buf[24]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(WUP_INT_RPLY_PAYLOAD[2]));
    DFFSX1HVT WUP_INT_RPLY_PAYLOAD_1 (.CK(addr_in_iso_buf[24]), .D(data_in_iso_buf[1]), .SN(RESETn), .Q(WUP_INT_RPLY_PAYLOAD[1]));
    DFFRX1HVT WUP_INT_RPLY_PAYLOAD_0 (.CK(addr_in_iso_buf[24]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(WUP_INT_RPLY_PAYLOAD[0]));

   //****************************************************
   // REGISTER 0x19 ( 25)
   //****************************************************
    //WUP_THRESHOLD_EXT (8'h00)
    DFFRX1HVT WUP_THRESHOLD_EXT_7 (.CK(addr_in_iso_buf[25]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(WUP_THRESHOLD_EXT[7]));
    DFFRX1HVT WUP_THRESHOLD_EXT_6 (.CK(addr_in_iso_buf[25]), .D(data_in_iso_buf[6]), .RN(RESETn), .Q(WUP_THRESHOLD_EXT[6]));
    DFFRX1HVT WUP_THRESHOLD_EXT_5 (.CK(addr_in_iso_buf[25]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(WUP_THRESHOLD_EXT[5]));
    DFFRX1HVT WUP_THRESHOLD_EXT_4 (.CK(addr_in_iso_buf[25]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(WUP_THRESHOLD_EXT[4]));
    DFFRX1HVT WUP_THRESHOLD_EXT_3 (.CK(addr_in_iso_buf[25]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(WUP_THRESHOLD_EXT[3]));
    DFFRX1HVT WUP_THRESHOLD_EXT_2 (.CK(addr_in_iso_buf[25]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(WUP_THRESHOLD_EXT[2]));
    DFFRX1HVT WUP_THRESHOLD_EXT_1 (.CK(addr_in_iso_buf[25]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(WUP_THRESHOLD_EXT[1]));
    DFFRX1HVT WUP_THRESHOLD_EXT_0 (.CK(addr_in_iso_buf[25]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(WUP_THRESHOLD_EXT[0]));

   //****************************************************
   // REGISTER 0x1A ( 26)
   //****************************************************
    //WUP_THRESHOLD (24'h2DC6C0)
    DFFRX1HVT WUP_THRESHOLD_23 (.CK(addr_in_iso_buf[26]), .D(data_in_iso_buf[23]), .RN(RESETn), .Q(WUP_THRESHOLD[23]));
    DFFRX1HVT WUP_THRESHOLD_22 (.CK(addr_in_iso_buf[26]), .D(data_in_iso_buf[22]), .RN(RESETn), .Q(WUP_THRESHOLD[22]));
    DFFSX1HVT WUP_THRESHOLD_21 (.CK(addr_in_iso_buf[26]), .D(data_in_iso_buf[21]), .SN(RESETn), .Q(WUP_THRESHOLD[21]));
    DFFRX1HVT WUP_THRESHOLD_20 (.CK(addr_in_iso_buf[26]), .D(data_in_iso_buf[20]), .RN(RESETn), .Q(WUP_THRESHOLD[20]));
    DFFSX1HVT WUP_THRESHOLD_19 (.CK(addr_in_iso_buf[26]), .D(data_in_iso_buf[19]), .SN(RESETn), .Q(WUP_THRESHOLD[19]));
    DFFSX1HVT WUP_THRESHOLD_18 (.CK(addr_in_iso_buf[26]), .D(data_in_iso_buf[18]), .SN(RESETn), .Q(WUP_THRESHOLD[18]));
    DFFRX1HVT WUP_THRESHOLD_17 (.CK(addr_in_iso_buf[26]), .D(data_in_iso_buf[17]), .RN(RESETn), .Q(WUP_THRESHOLD[17]));
    DFFSX1HVT WUP_THRESHOLD_16 (.CK(addr_in_iso_buf[26]), .D(data_in_iso_buf[16]), .SN(RESETn), .Q(WUP_THRESHOLD[16]));
    DFFSX1HVT WUP_THRESHOLD_15 (.CK(addr_in_iso_buf[26]), .D(data_in_iso_buf[15]), .SN(RESETn), .Q(WUP_THRESHOLD[15]));
    DFFSX1HVT WUP_THRESHOLD_14 (.CK(addr_in_iso_buf[26]), .D(data_in_iso_buf[14]), .SN(RESETn), .Q(WUP_THRESHOLD[14]));
    DFFRX1HVT WUP_THRESHOLD_13 (.CK(addr_in_iso_buf[26]), .D(data_in_iso_buf[13]), .RN(RESETn), .Q(WUP_THRESHOLD[13]));
    DFFRX1HVT WUP_THRESHOLD_12 (.CK(addr_in_iso_buf[26]), .D(data_in_iso_buf[12]), .RN(RESETn), .Q(WUP_THRESHOLD[12]));
    DFFRX1HVT WUP_THRESHOLD_11 (.CK(addr_in_iso_buf[26]), .D(data_in_iso_buf[11]), .RN(RESETn), .Q(WUP_THRESHOLD[11]));
    DFFSX1HVT WUP_THRESHOLD_10 (.CK(addr_in_iso_buf[26]), .D(data_in_iso_buf[10]), .SN(RESETn), .Q(WUP_THRESHOLD[10]));
    DFFSX1HVT WUP_THRESHOLD_9 (.CK(addr_in_iso_buf[26]), .D(data_in_iso_buf[9]), .SN(RESETn), .Q(WUP_THRESHOLD[9]));
    DFFRX1HVT WUP_THRESHOLD_8 (.CK(addr_in_iso_buf[26]), .D(data_in_iso_buf[8]), .RN(RESETn), .Q(WUP_THRESHOLD[8]));
    DFFSX1HVT WUP_THRESHOLD_7 (.CK(addr_in_iso_buf[26]), .D(data_in_iso_buf[7]), .SN(RESETn), .Q(WUP_THRESHOLD[7]));
    DFFSX1HVT WUP_THRESHOLD_6 (.CK(addr_in_iso_buf[26]), .D(data_in_iso_buf[6]), .SN(RESETn), .Q(WUP_THRESHOLD[6]));
    DFFRX1HVT WUP_THRESHOLD_5 (.CK(addr_in_iso_buf[26]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(WUP_THRESHOLD[5]));
    DFFRX1HVT WUP_THRESHOLD_4 (.CK(addr_in_iso_buf[26]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(WUP_THRESHOLD[4]));
    DFFRX1HVT WUP_THRESHOLD_3 (.CK(addr_in_iso_buf[26]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(WUP_THRESHOLD[3]));
    DFFRX1HVT WUP_THRESHOLD_2 (.CK(addr_in_iso_buf[26]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(WUP_THRESHOLD[2]));
    DFFRX1HVT WUP_THRESHOLD_1 (.CK(addr_in_iso_buf[26]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(WUP_THRESHOLD[1]));
    DFFRX1HVT WUP_THRESHOLD_0 (.CK(addr_in_iso_buf[26]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(WUP_THRESHOLD[0]));

   //****************************************************
   // REGISTER 0x1B ( 27)
   //****************************************************
    //WUP_CNT_VALUE_EXT (8'h00)
    //DFFRX1HVT WUP_CNT_VALUE_EXT_7 (.CK(addr_in_iso_buf[27]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(WUP_CNT_VALUE_EXT[7]));
    //DFFRX1HVT WUP_CNT_VALUE_EXT_6 (.CK(addr_in_iso_buf[27]), .D(data_in_iso_buf[6]), .RN(RESETn), .Q(WUP_CNT_VALUE_EXT[6]));
    //DFFRX1HVT WUP_CNT_VALUE_EXT_5 (.CK(addr_in_iso_buf[27]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(WUP_CNT_VALUE_EXT[5]));
    //DFFRX1HVT WUP_CNT_VALUE_EXT_4 (.CK(addr_in_iso_buf[27]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(WUP_CNT_VALUE_EXT[4]));
    //DFFRX1HVT WUP_CNT_VALUE_EXT_3 (.CK(addr_in_iso_buf[27]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(WUP_CNT_VALUE_EXT[3]));
    //DFFRX1HVT WUP_CNT_VALUE_EXT_2 (.CK(addr_in_iso_buf[27]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(WUP_CNT_VALUE_EXT[2]));
    //DFFRX1HVT WUP_CNT_VALUE_EXT_1 (.CK(addr_in_iso_buf[27]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(WUP_CNT_VALUE_EXT[1]));
    //DFFRX1HVT WUP_CNT_VALUE_EXT_0 (.CK(addr_in_iso_buf[27]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(WUP_CNT_VALUE_EXT[0]));

   //****************************************************
   // REGISTER 0x1C ( 28)
   //****************************************************
    //WUP_CNT_VALUE (24'h000000)
    //DFFRX1HVT WUP_CNT_VALUE_23 (.CK(addr_in_iso_buf[28]), .D(data_in_iso_buf[23]), .RN(RESETn), .Q(WUP_CNT_VALUE[23]));
    //DFFRX1HVT WUP_CNT_VALUE_22 (.CK(addr_in_iso_buf[28]), .D(data_in_iso_buf[22]), .RN(RESETn), .Q(WUP_CNT_VALUE[22]));
    //DFFRX1HVT WUP_CNT_VALUE_21 (.CK(addr_in_iso_buf[28]), .D(data_in_iso_buf[21]), .RN(RESETn), .Q(WUP_CNT_VALUE[21]));
    //DFFRX1HVT WUP_CNT_VALUE_20 (.CK(addr_in_iso_buf[28]), .D(data_in_iso_buf[20]), .RN(RESETn), .Q(WUP_CNT_VALUE[20]));
    //DFFRX1HVT WUP_CNT_VALUE_19 (.CK(addr_in_iso_buf[28]), .D(data_in_iso_buf[19]), .RN(RESETn), .Q(WUP_CNT_VALUE[19]));
    //DFFRX1HVT WUP_CNT_VALUE_18 (.CK(addr_in_iso_buf[28]), .D(data_in_iso_buf[18]), .RN(RESETn), .Q(WUP_CNT_VALUE[18]));
    //DFFRX1HVT WUP_CNT_VALUE_17 (.CK(addr_in_iso_buf[28]), .D(data_in_iso_buf[17]), .RN(RESETn), .Q(WUP_CNT_VALUE[17]));
    //DFFRX1HVT WUP_CNT_VALUE_16 (.CK(addr_in_iso_buf[28]), .D(data_in_iso_buf[16]), .RN(RESETn), .Q(WUP_CNT_VALUE[16]));
    //DFFRX1HVT WUP_CNT_VALUE_15 (.CK(addr_in_iso_buf[28]), .D(data_in_iso_buf[15]), .RN(RESETn), .Q(WUP_CNT_VALUE[15]));
    //DFFRX1HVT WUP_CNT_VALUE_14 (.CK(addr_in_iso_buf[28]), .D(data_in_iso_buf[14]), .RN(RESETn), .Q(WUP_CNT_VALUE[14]));
    //DFFRX1HVT WUP_CNT_VALUE_13 (.CK(addr_in_iso_buf[28]), .D(data_in_iso_buf[13]), .RN(RESETn), .Q(WUP_CNT_VALUE[13]));
    //DFFRX1HVT WUP_CNT_VALUE_12 (.CK(addr_in_iso_buf[28]), .D(data_in_iso_buf[12]), .RN(RESETn), .Q(WUP_CNT_VALUE[12]));
    //DFFRX1HVT WUP_CNT_VALUE_11 (.CK(addr_in_iso_buf[28]), .D(data_in_iso_buf[11]), .RN(RESETn), .Q(WUP_CNT_VALUE[11]));
    //DFFRX1HVT WUP_CNT_VALUE_10 (.CK(addr_in_iso_buf[28]), .D(data_in_iso_buf[10]), .RN(RESETn), .Q(WUP_CNT_VALUE[10]));
    //DFFRX1HVT WUP_CNT_VALUE_9 (.CK(addr_in_iso_buf[28]), .D(data_in_iso_buf[9]), .RN(RESETn), .Q(WUP_CNT_VALUE[9]));
    //DFFRX1HVT WUP_CNT_VALUE_8 (.CK(addr_in_iso_buf[28]), .D(data_in_iso_buf[8]), .RN(RESETn), .Q(WUP_CNT_VALUE[8]));
    //DFFRX1HVT WUP_CNT_VALUE_7 (.CK(addr_in_iso_buf[28]), .D(data_in_iso_buf[7]), .RN(RESETn), .Q(WUP_CNT_VALUE[7]));
    //DFFRX1HVT WUP_CNT_VALUE_6 (.CK(addr_in_iso_buf[28]), .D(data_in_iso_buf[6]), .RN(RESETn), .Q(WUP_CNT_VALUE[6]));
    //DFFRX1HVT WUP_CNT_VALUE_5 (.CK(addr_in_iso_buf[28]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(WUP_CNT_VALUE[5]));
    //DFFRX1HVT WUP_CNT_VALUE_4 (.CK(addr_in_iso_buf[28]), .D(data_in_iso_buf[4]), .RN(RESETn), .Q(WUP_CNT_VALUE[4]));
    //DFFRX1HVT WUP_CNT_VALUE_3 (.CK(addr_in_iso_buf[28]), .D(data_in_iso_buf[3]), .RN(RESETn), .Q(WUP_CNT_VALUE[3]));
    //DFFRX1HVT WUP_CNT_VALUE_2 (.CK(addr_in_iso_buf[28]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(WUP_CNT_VALUE[2]));
    //DFFRX1HVT WUP_CNT_VALUE_1 (.CK(addr_in_iso_buf[28]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(WUP_CNT_VALUE[1]));
    //DFFRX1HVT WUP_CNT_VALUE_0 (.CK(addr_in_iso_buf[28]), .D(data_in_iso_buf[0]), .RN(RESETn), .Q(WUP_CNT_VALUE[0]));

   //****************************************************
   // REGISTER 0x1D ( 29)
   //****************************************************
    //MBC_WAKEUP_ON_PEND_REQ (1'h0)
    DFFRX1HVT MBC_WAKEUP_ON_PEND_REQ_0 (.CK(addr_in_iso_buf[29]), .D(data_in_iso_buf[5]), .RN(RESETn), .Q(MBC_WAKEUP_ON_PEND_REQ));
    //MBC_IGNORE_RX_FAIL (1'h1)
    DFFSX1HVT MBC_IGNORE_RX_FAIL_0 (.CK(addr_in_iso_buf[29]), .D(data_in_iso_buf[4]), .SN(RESETn), .Q(MBC_IGNORE_RX_FAIL));
    //LC_CLK_DIV (2'h2)
    DFFSX1HVT LC_CLK_DIV_1 (.CK(addr_in_iso_buf[29]), .D(data_in_iso_buf[3]), .SN(RESETn), .Q(LC_CLK_DIV[1]));
    DFFRX1HVT LC_CLK_DIV_0 (.CK(addr_in_iso_buf[29]), .D(data_in_iso_buf[2]), .RN(RESETn), .Q(LC_CLK_DIV[0]));
    //LC_CLK_RING (2'h1)
    DFFRX1HVT LC_CLK_RING_1 (.CK(addr_in_iso_buf[29]), .D(data_in_iso_buf[1]), .RN(RESETn), .Q(LC_CLK_RING[1]));
    DFFSX1HVT LC_CLK_RING_0 (.CK(addr_in_iso_buf[29]), .D(data_in_iso_buf[0]), .SN(RESETn), .Q(LC_CLK_RING[0]));

endmodule // sntv3_rf
